#pragma once
#include "../PhiLoader.hpp"
#include <GL/glcorearb.h>
#include <GL/glext.h>
typedef PFNGLDRAWRANGEELEMENTSPROC PFN_glDrawRangeElements;
typedef PFNGLTEXIMAGE3DPROC PFN_glTexImage3D;
typedef PFNGLTEXSUBIMAGE3DPROC PFN_glTexSubImage3D;
typedef PFNGLCOPYTEXSUBIMAGE3DPROC PFN_glCopyTexSubImage3D;
typedef PFNGLACTIVETEXTUREPROC PFN_glActiveTexture;
typedef PFNGLSAMPLECOVERAGEPROC PFN_glSampleCoverage;
typedef PFNGLCOMPRESSEDTEXIMAGE3DPROC PFN_glCompressedTexImage3D;
typedef PFNGLCOMPRESSEDTEXIMAGE2DPROC PFN_glCompressedTexImage2D;
typedef PFNGLCOMPRESSEDTEXIMAGE1DPROC PFN_glCompressedTexImage1D;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC PFN_glCompressedTexSubImage3D;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC PFN_glCompressedTexSubImage2D;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC PFN_glCompressedTexSubImage1D;
typedef PFNGLGETCOMPRESSEDTEXIMAGEPROC PFN_glGetCompressedTexImage;
typedef PFNGLCLIENTACTIVETEXTUREPROC PFN_glClientActiveTexture;
typedef PFNGLMULTITEXCOORD1DPROC PFN_glMultiTexCoord1d;
typedef PFNGLMULTITEXCOORD1DVPROC PFN_glMultiTexCoord1dv;
typedef PFNGLMULTITEXCOORD1FPROC PFN_glMultiTexCoord1f;
typedef PFNGLMULTITEXCOORD1FVPROC PFN_glMultiTexCoord1fv;
typedef PFNGLMULTITEXCOORD1IPROC PFN_glMultiTexCoord1i;
typedef PFNGLMULTITEXCOORD1IVPROC PFN_glMultiTexCoord1iv;
typedef PFNGLMULTITEXCOORD1SPROC PFN_glMultiTexCoord1s;
typedef PFNGLMULTITEXCOORD1SVPROC PFN_glMultiTexCoord1sv;
typedef PFNGLMULTITEXCOORD2DPROC PFN_glMultiTexCoord2d;
typedef PFNGLMULTITEXCOORD2DVPROC PFN_glMultiTexCoord2dv;
typedef PFNGLMULTITEXCOORD2FPROC PFN_glMultiTexCoord2f;
typedef PFNGLMULTITEXCOORD2FVPROC PFN_glMultiTexCoord2fv;
typedef PFNGLMULTITEXCOORD2IPROC PFN_glMultiTexCoord2i;
typedef PFNGLMULTITEXCOORD2IVPROC PFN_glMultiTexCoord2iv;
typedef PFNGLMULTITEXCOORD2SPROC PFN_glMultiTexCoord2s;
typedef PFNGLMULTITEXCOORD2SVPROC PFN_glMultiTexCoord2sv;
typedef PFNGLMULTITEXCOORD3DPROC PFN_glMultiTexCoord3d;
typedef PFNGLMULTITEXCOORD3DVPROC PFN_glMultiTexCoord3dv;
typedef PFNGLMULTITEXCOORD3FPROC PFN_glMultiTexCoord3f;
typedef PFNGLMULTITEXCOORD3FVPROC PFN_glMultiTexCoord3fv;
typedef PFNGLMULTITEXCOORD3IPROC PFN_glMultiTexCoord3i;
typedef PFNGLMULTITEXCOORD3IVPROC PFN_glMultiTexCoord3iv;
typedef PFNGLMULTITEXCOORD3SPROC PFN_glMultiTexCoord3s;
typedef PFNGLMULTITEXCOORD3SVPROC PFN_glMultiTexCoord3sv;
typedef PFNGLMULTITEXCOORD4DPROC PFN_glMultiTexCoord4d;
typedef PFNGLMULTITEXCOORD4DVPROC PFN_glMultiTexCoord4dv;
typedef PFNGLMULTITEXCOORD4FPROC PFN_glMultiTexCoord4f;
typedef PFNGLMULTITEXCOORD4FVPROC PFN_glMultiTexCoord4fv;
typedef PFNGLMULTITEXCOORD4IPROC PFN_glMultiTexCoord4i;
typedef PFNGLMULTITEXCOORD4IVPROC PFN_glMultiTexCoord4iv;
typedef PFNGLMULTITEXCOORD4SPROC PFN_glMultiTexCoord4s;
typedef PFNGLMULTITEXCOORD4SVPROC PFN_glMultiTexCoord4sv;
typedef PFNGLLOADTRANSPOSEMATRIXFPROC PFN_glLoadTransposeMatrixf;
typedef PFNGLLOADTRANSPOSEMATRIXDPROC PFN_glLoadTransposeMatrixd;
typedef PFNGLMULTTRANSPOSEMATRIXFPROC PFN_glMultTransposeMatrixf;
typedef PFNGLMULTTRANSPOSEMATRIXDPROC PFN_glMultTransposeMatrixd;
typedef PFNGLBLENDFUNCSEPARATEPROC PFN_glBlendFuncSeparate;
typedef PFNGLMULTIDRAWARRAYSPROC PFN_glMultiDrawArrays;
typedef PFNGLMULTIDRAWELEMENTSPROC PFN_glMultiDrawElements;
typedef PFNGLPOINTPARAMETERFPROC PFN_glPointParameterf;
typedef PFNGLPOINTPARAMETERFVPROC PFN_glPointParameterfv;
typedef PFNGLPOINTPARAMETERIPROC PFN_glPointParameteri;
typedef PFNGLPOINTPARAMETERIVPROC PFN_glPointParameteriv;
typedef PFNGLFOGCOORDFPROC PFN_glFogCoordf;
typedef PFNGLFOGCOORDFVPROC PFN_glFogCoordfv;
typedef PFNGLFOGCOORDDPROC PFN_glFogCoordd;
typedef PFNGLFOGCOORDDVPROC PFN_glFogCoorddv;
typedef PFNGLFOGCOORDPOINTERPROC PFN_glFogCoordPointer;
typedef PFNGLSECONDARYCOLOR3BPROC PFN_glSecondaryColor3b;
typedef PFNGLSECONDARYCOLOR3BVPROC PFN_glSecondaryColor3bv;
typedef PFNGLSECONDARYCOLOR3DPROC PFN_glSecondaryColor3d;
typedef PFNGLSECONDARYCOLOR3DVPROC PFN_glSecondaryColor3dv;
typedef PFNGLSECONDARYCOLOR3FPROC PFN_glSecondaryColor3f;
typedef PFNGLSECONDARYCOLOR3FVPROC PFN_glSecondaryColor3fv;
typedef PFNGLSECONDARYCOLOR3IPROC PFN_glSecondaryColor3i;
typedef PFNGLSECONDARYCOLOR3IVPROC PFN_glSecondaryColor3iv;
typedef PFNGLSECONDARYCOLOR3SPROC PFN_glSecondaryColor3s;
typedef PFNGLSECONDARYCOLOR3SVPROC PFN_glSecondaryColor3sv;
typedef PFNGLSECONDARYCOLOR3UBPROC PFN_glSecondaryColor3ub;
typedef PFNGLSECONDARYCOLOR3UBVPROC PFN_glSecondaryColor3ubv;
typedef PFNGLSECONDARYCOLOR3UIPROC PFN_glSecondaryColor3ui;
typedef PFNGLSECONDARYCOLOR3UIVPROC PFN_glSecondaryColor3uiv;
typedef PFNGLSECONDARYCOLOR3USPROC PFN_glSecondaryColor3us;
typedef PFNGLSECONDARYCOLOR3USVPROC PFN_glSecondaryColor3usv;
typedef PFNGLSECONDARYCOLORPOINTERPROC PFN_glSecondaryColorPointer;
typedef PFNGLWINDOWPOS2DPROC PFN_glWindowPos2d;
typedef PFNGLWINDOWPOS2DVPROC PFN_glWindowPos2dv;
typedef PFNGLWINDOWPOS2FPROC PFN_glWindowPos2f;
typedef PFNGLWINDOWPOS2FVPROC PFN_glWindowPos2fv;
typedef PFNGLWINDOWPOS2IPROC PFN_glWindowPos2i;
typedef PFNGLWINDOWPOS2IVPROC PFN_glWindowPos2iv;
typedef PFNGLWINDOWPOS2SPROC PFN_glWindowPos2s;
typedef PFNGLWINDOWPOS2SVPROC PFN_glWindowPos2sv;
typedef PFNGLWINDOWPOS3DPROC PFN_glWindowPos3d;
typedef PFNGLWINDOWPOS3DVPROC PFN_glWindowPos3dv;
typedef PFNGLWINDOWPOS3FPROC PFN_glWindowPos3f;
typedef PFNGLWINDOWPOS3FVPROC PFN_glWindowPos3fv;
typedef PFNGLWINDOWPOS3IPROC PFN_glWindowPos3i;
typedef PFNGLWINDOWPOS3IVPROC PFN_glWindowPos3iv;
typedef PFNGLWINDOWPOS3SPROC PFN_glWindowPos3s;
typedef PFNGLWINDOWPOS3SVPROC PFN_glWindowPos3sv;
typedef PFNGLBLENDCOLORPROC PFN_glBlendColor;
typedef PFNGLBLENDEQUATIONPROC PFN_glBlendEquation;
typedef PFNGLGENQUERIESPROC PFN_glGenQueries;
typedef PFNGLDELETEQUERIESPROC PFN_glDeleteQueries;
typedef PFNGLISQUERYPROC PFN_glIsQuery;
typedef PFNGLBEGINQUERYPROC PFN_glBeginQuery;
typedef PFNGLENDQUERYPROC PFN_glEndQuery;
typedef PFNGLGETQUERYIVPROC PFN_glGetQueryiv;
typedef PFNGLGETQUERYOBJECTIVPROC PFN_glGetQueryObjectiv;
typedef PFNGLGETQUERYOBJECTUIVPROC PFN_glGetQueryObjectuiv;
typedef PFNGLBINDBUFFERPROC PFN_glBindBuffer;
typedef PFNGLDELETEBUFFERSPROC PFN_glDeleteBuffers;
typedef PFNGLGENBUFFERSPROC PFN_glGenBuffers;
typedef PFNGLISBUFFERPROC PFN_glIsBuffer;
typedef PFNGLBUFFERDATAPROC PFN_glBufferData;
typedef PFNGLBUFFERSUBDATAPROC PFN_glBufferSubData;
typedef PFNGLGETBUFFERSUBDATAPROC PFN_glGetBufferSubData;
typedef PFNGLMAPBUFFERPROC PFN_glMapBuffer;
typedef PFNGLUNMAPBUFFERPROC PFN_glUnmapBuffer;
typedef PFNGLGETBUFFERPARAMETERIVPROC PFN_glGetBufferParameteriv;
typedef PFNGLGETBUFFERPOINTERVPROC PFN_glGetBufferPointerv;
typedef PFNGLBLENDEQUATIONSEPARATEPROC PFN_glBlendEquationSeparate;
typedef PFNGLDRAWBUFFERSPROC PFN_glDrawBuffers;
typedef PFNGLSTENCILOPSEPARATEPROC PFN_glStencilOpSeparate;
typedef PFNGLSTENCILFUNCSEPARATEPROC PFN_glStencilFuncSeparate;
typedef PFNGLSTENCILMASKSEPARATEPROC PFN_glStencilMaskSeparate;
typedef PFNGLATTACHSHADERPROC PFN_glAttachShader;
typedef PFNGLBINDATTRIBLOCATIONPROC PFN_glBindAttribLocation;
typedef PFNGLCOMPILESHADERPROC PFN_glCompileShader;
typedef PFNGLCREATEPROGRAMPROC PFN_glCreateProgram;
typedef PFNGLCREATESHADERPROC PFN_glCreateShader;
typedef PFNGLDELETEPROGRAMPROC PFN_glDeleteProgram;
typedef PFNGLDELETESHADERPROC PFN_glDeleteShader;
typedef PFNGLDETACHSHADERPROC PFN_glDetachShader;
typedef PFNGLDISABLEVERTEXATTRIBARRAYPROC PFN_glDisableVertexAttribArray;
typedef PFNGLENABLEVERTEXATTRIBARRAYPROC PFN_glEnableVertexAttribArray;
typedef PFNGLGETACTIVEATTRIBPROC PFN_glGetActiveAttrib;
typedef PFNGLGETACTIVEUNIFORMPROC PFN_glGetActiveUniform;
typedef PFNGLGETATTACHEDSHADERSPROC PFN_glGetAttachedShaders;
typedef PFNGLGETATTRIBLOCATIONPROC PFN_glGetAttribLocation;
typedef PFNGLGETPROGRAMIVPROC PFN_glGetProgramiv;
typedef PFNGLGETPROGRAMINFOLOGPROC PFN_glGetProgramInfoLog;
typedef PFNGLGETSHADERIVPROC PFN_glGetShaderiv;
typedef PFNGLGETSHADERINFOLOGPROC PFN_glGetShaderInfoLog;
typedef PFNGLGETSHADERSOURCEPROC PFN_glGetShaderSource;
typedef PFNGLGETUNIFORMLOCATIONPROC PFN_glGetUniformLocation;
typedef PFNGLGETUNIFORMFVPROC PFN_glGetUniformfv;
typedef PFNGLGETUNIFORMIVPROC PFN_glGetUniformiv;
typedef PFNGLGETVERTEXATTRIBDVPROC PFN_glGetVertexAttribdv;
typedef PFNGLGETVERTEXATTRIBFVPROC PFN_glGetVertexAttribfv;
typedef PFNGLGETVERTEXATTRIBIVPROC PFN_glGetVertexAttribiv;
typedef PFNGLGETVERTEXATTRIBPOINTERVPROC PFN_glGetVertexAttribPointerv;
typedef PFNGLISPROGRAMPROC PFN_glIsProgram;
typedef PFNGLISSHADERPROC PFN_glIsShader;
typedef PFNGLLINKPROGRAMPROC PFN_glLinkProgram;
typedef PFNGLSHADERSOURCEPROC PFN_glShaderSource;
typedef PFNGLUSEPROGRAMPROC PFN_glUseProgram;
typedef PFNGLUNIFORM1FPROC PFN_glUniform1f;
typedef PFNGLUNIFORM2FPROC PFN_glUniform2f;
typedef PFNGLUNIFORM3FPROC PFN_glUniform3f;
typedef PFNGLUNIFORM4FPROC PFN_glUniform4f;
typedef PFNGLUNIFORM1IPROC PFN_glUniform1i;
typedef PFNGLUNIFORM2IPROC PFN_glUniform2i;
typedef PFNGLUNIFORM3IPROC PFN_glUniform3i;
typedef PFNGLUNIFORM4IPROC PFN_glUniform4i;
typedef PFNGLUNIFORM1FVPROC PFN_glUniform1fv;
typedef PFNGLUNIFORM2FVPROC PFN_glUniform2fv;
typedef PFNGLUNIFORM3FVPROC PFN_glUniform3fv;
typedef PFNGLUNIFORM4FVPROC PFN_glUniform4fv;
typedef PFNGLUNIFORM1IVPROC PFN_glUniform1iv;
typedef PFNGLUNIFORM2IVPROC PFN_glUniform2iv;
typedef PFNGLUNIFORM3IVPROC PFN_glUniform3iv;
typedef PFNGLUNIFORM4IVPROC PFN_glUniform4iv;
typedef PFNGLUNIFORMMATRIX2FVPROC PFN_glUniformMatrix2fv;
typedef PFNGLUNIFORMMATRIX3FVPROC PFN_glUniformMatrix3fv;
typedef PFNGLUNIFORMMATRIX4FVPROC PFN_glUniformMatrix4fv;
typedef PFNGLVALIDATEPROGRAMPROC PFN_glValidateProgram;
typedef PFNGLVERTEXATTRIB1DPROC PFN_glVertexAttrib1d;
typedef PFNGLVERTEXATTRIB1DVPROC PFN_glVertexAttrib1dv;
typedef PFNGLVERTEXATTRIB1FPROC PFN_glVertexAttrib1f;
typedef PFNGLVERTEXATTRIB1FVPROC PFN_glVertexAttrib1fv;
typedef PFNGLVERTEXATTRIB1SPROC PFN_glVertexAttrib1s;
typedef PFNGLVERTEXATTRIB1SVPROC PFN_glVertexAttrib1sv;
typedef PFNGLVERTEXATTRIB2DPROC PFN_glVertexAttrib2d;
typedef PFNGLVERTEXATTRIB2DVPROC PFN_glVertexAttrib2dv;
typedef PFNGLVERTEXATTRIB2FPROC PFN_glVertexAttrib2f;
typedef PFNGLVERTEXATTRIB2FVPROC PFN_glVertexAttrib2fv;
typedef PFNGLVERTEXATTRIB2SPROC PFN_glVertexAttrib2s;
typedef PFNGLVERTEXATTRIB2SVPROC PFN_glVertexAttrib2sv;
typedef PFNGLVERTEXATTRIB3DPROC PFN_glVertexAttrib3d;
typedef PFNGLVERTEXATTRIB3DVPROC PFN_glVertexAttrib3dv;
typedef PFNGLVERTEXATTRIB3FPROC PFN_glVertexAttrib3f;
typedef PFNGLVERTEXATTRIB3FVPROC PFN_glVertexAttrib3fv;
typedef PFNGLVERTEXATTRIB3SPROC PFN_glVertexAttrib3s;
typedef PFNGLVERTEXATTRIB3SVPROC PFN_glVertexAttrib3sv;
typedef PFNGLVERTEXATTRIB4NBVPROC PFN_glVertexAttrib4Nbv;
typedef PFNGLVERTEXATTRIB4NIVPROC PFN_glVertexAttrib4Niv;
typedef PFNGLVERTEXATTRIB4NSVPROC PFN_glVertexAttrib4Nsv;
typedef PFNGLVERTEXATTRIB4NUBPROC PFN_glVertexAttrib4Nub;
typedef PFNGLVERTEXATTRIB4NUBVPROC PFN_glVertexAttrib4Nubv;
typedef PFNGLVERTEXATTRIB4NUIVPROC PFN_glVertexAttrib4Nuiv;
typedef PFNGLVERTEXATTRIB4NUSVPROC PFN_glVertexAttrib4Nusv;
typedef PFNGLVERTEXATTRIB4BVPROC PFN_glVertexAttrib4bv;
typedef PFNGLVERTEXATTRIB4DPROC PFN_glVertexAttrib4d;
typedef PFNGLVERTEXATTRIB4DVPROC PFN_glVertexAttrib4dv;
typedef PFNGLVERTEXATTRIB4FPROC PFN_glVertexAttrib4f;
typedef PFNGLVERTEXATTRIB4FVPROC PFN_glVertexAttrib4fv;
typedef PFNGLVERTEXATTRIB4IVPROC PFN_glVertexAttrib4iv;
typedef PFNGLVERTEXATTRIB4SPROC PFN_glVertexAttrib4s;
typedef PFNGLVERTEXATTRIB4SVPROC PFN_glVertexAttrib4sv;
typedef PFNGLVERTEXATTRIB4UBVPROC PFN_glVertexAttrib4ubv;
typedef PFNGLVERTEXATTRIB4UIVPROC PFN_glVertexAttrib4uiv;
typedef PFNGLVERTEXATTRIB4USVPROC PFN_glVertexAttrib4usv;
typedef PFNGLVERTEXATTRIBPOINTERPROC PFN_glVertexAttribPointer;
typedef PFNGLUNIFORMMATRIX2X3FVPROC PFN_glUniformMatrix2x3fv;
typedef PFNGLUNIFORMMATRIX3X2FVPROC PFN_glUniformMatrix3x2fv;
typedef PFNGLUNIFORMMATRIX2X4FVPROC PFN_glUniformMatrix2x4fv;
typedef PFNGLUNIFORMMATRIX4X2FVPROC PFN_glUniformMatrix4x2fv;
typedef PFNGLUNIFORMMATRIX3X4FVPROC PFN_glUniformMatrix3x4fv;
typedef PFNGLUNIFORMMATRIX4X3FVPROC PFN_glUniformMatrix4x3fv;
typedef PFNGLCOLORMASKIPROC PFN_glColorMaski;
typedef PFNGLGETBOOLEANI_VPROC PFN_glGetBooleani_v;
typedef PFNGLGETINTEGERI_VPROC PFN_glGetIntegeri_v;
typedef PFNGLENABLEIPROC PFN_glEnablei;
typedef PFNGLDISABLEIPROC PFN_glDisablei;
typedef PFNGLISENABLEDIPROC PFN_glIsEnabledi;
typedef PFNGLBEGINTRANSFORMFEEDBACKPROC PFN_glBeginTransformFeedback;
typedef PFNGLENDTRANSFORMFEEDBACKPROC PFN_glEndTransformFeedback;
typedef PFNGLBINDBUFFERRANGEPROC PFN_glBindBufferRange;
typedef PFNGLBINDBUFFERBASEPROC PFN_glBindBufferBase;
typedef PFNGLTRANSFORMFEEDBACKVARYINGSPROC PFN_glTransformFeedbackVaryings;
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGPROC PFN_glGetTransformFeedbackVarying;
typedef PFNGLCLAMPCOLORPROC PFN_glClampColor;
typedef PFNGLBEGINCONDITIONALRENDERPROC PFN_glBeginConditionalRender;
typedef PFNGLENDCONDITIONALRENDERPROC PFN_glEndConditionalRender;
typedef PFNGLVERTEXATTRIBIPOINTERPROC PFN_glVertexAttribIPointer;
typedef PFNGLGETVERTEXATTRIBIIVPROC PFN_glGetVertexAttribIiv;
typedef PFNGLGETVERTEXATTRIBIUIVPROC PFN_glGetVertexAttribIuiv;
typedef PFNGLVERTEXATTRIBI1IPROC PFN_glVertexAttribI1i;
typedef PFNGLVERTEXATTRIBI2IPROC PFN_glVertexAttribI2i;
typedef PFNGLVERTEXATTRIBI3IPROC PFN_glVertexAttribI3i;
typedef PFNGLVERTEXATTRIBI4IPROC PFN_glVertexAttribI4i;
typedef PFNGLVERTEXATTRIBI1UIPROC PFN_glVertexAttribI1ui;
typedef PFNGLVERTEXATTRIBI2UIPROC PFN_glVertexAttribI2ui;
typedef PFNGLVERTEXATTRIBI3UIPROC PFN_glVertexAttribI3ui;
typedef PFNGLVERTEXATTRIBI4UIPROC PFN_glVertexAttribI4ui;
typedef PFNGLVERTEXATTRIBI1IVPROC PFN_glVertexAttribI1iv;
typedef PFNGLVERTEXATTRIBI2IVPROC PFN_glVertexAttribI2iv;
typedef PFNGLVERTEXATTRIBI3IVPROC PFN_glVertexAttribI3iv;
typedef PFNGLVERTEXATTRIBI4IVPROC PFN_glVertexAttribI4iv;
typedef PFNGLVERTEXATTRIBI1UIVPROC PFN_glVertexAttribI1uiv;
typedef PFNGLVERTEXATTRIBI2UIVPROC PFN_glVertexAttribI2uiv;
typedef PFNGLVERTEXATTRIBI3UIVPROC PFN_glVertexAttribI3uiv;
typedef PFNGLVERTEXATTRIBI4UIVPROC PFN_glVertexAttribI4uiv;
typedef PFNGLVERTEXATTRIBI4BVPROC PFN_glVertexAttribI4bv;
typedef PFNGLVERTEXATTRIBI4SVPROC PFN_glVertexAttribI4sv;
typedef PFNGLVERTEXATTRIBI4UBVPROC PFN_glVertexAttribI4ubv;
typedef PFNGLVERTEXATTRIBI4USVPROC PFN_glVertexAttribI4usv;
typedef PFNGLGETUNIFORMUIVPROC PFN_glGetUniformuiv;
typedef PFNGLBINDFRAGDATALOCATIONPROC PFN_glBindFragDataLocation;
typedef PFNGLGETFRAGDATALOCATIONPROC PFN_glGetFragDataLocation;
typedef PFNGLUNIFORM1UIPROC PFN_glUniform1ui;
typedef PFNGLUNIFORM2UIPROC PFN_glUniform2ui;
typedef PFNGLUNIFORM3UIPROC PFN_glUniform3ui;
typedef PFNGLUNIFORM4UIPROC PFN_glUniform4ui;
typedef PFNGLUNIFORM1UIVPROC PFN_glUniform1uiv;
typedef PFNGLUNIFORM2UIVPROC PFN_glUniform2uiv;
typedef PFNGLUNIFORM3UIVPROC PFN_glUniform3uiv;
typedef PFNGLUNIFORM4UIVPROC PFN_glUniform4uiv;
typedef PFNGLTEXPARAMETERIIVPROC PFN_glTexParameterIiv;
typedef PFNGLTEXPARAMETERIUIVPROC PFN_glTexParameterIuiv;
typedef PFNGLGETTEXPARAMETERIIVPROC PFN_glGetTexParameterIiv;
typedef PFNGLGETTEXPARAMETERIUIVPROC PFN_glGetTexParameterIuiv;
typedef PFNGLCLEARBUFFERIVPROC PFN_glClearBufferiv;
typedef PFNGLCLEARBUFFERUIVPROC PFN_glClearBufferuiv;
typedef PFNGLCLEARBUFFERFVPROC PFN_glClearBufferfv;
typedef PFNGLCLEARBUFFERFIPROC PFN_glClearBufferfi;
typedef PFNGLGETSTRINGIPROC PFN_glGetStringi;
typedef PFNGLISRENDERBUFFERPROC PFN_glIsRenderbuffer;
typedef PFNGLBINDRENDERBUFFERPROC PFN_glBindRenderbuffer;
typedef PFNGLDELETERENDERBUFFERSPROC PFN_glDeleteRenderbuffers;
typedef PFNGLGENRENDERBUFFERSPROC PFN_glGenRenderbuffers;
typedef PFNGLRENDERBUFFERSTORAGEPROC PFN_glRenderbufferStorage;
typedef PFNGLGETRENDERBUFFERPARAMETERIVPROC PFN_glGetRenderbufferParameteriv;
typedef PFNGLISFRAMEBUFFERPROC PFN_glIsFramebuffer;
typedef PFNGLBINDFRAMEBUFFERPROC PFN_glBindFramebuffer;
typedef PFNGLDELETEFRAMEBUFFERSPROC PFN_glDeleteFramebuffers;
typedef PFNGLGENFRAMEBUFFERSPROC PFN_glGenFramebuffers;
typedef PFNGLCHECKFRAMEBUFFERSTATUSPROC PFN_glCheckFramebufferStatus;
typedef PFNGLFRAMEBUFFERTEXTURE1DPROC PFN_glFramebufferTexture1D;
typedef PFNGLFRAMEBUFFERTEXTURE2DPROC PFN_glFramebufferTexture2D;
typedef PFNGLFRAMEBUFFERTEXTURE3DPROC PFN_glFramebufferTexture3D;
typedef PFNGLFRAMEBUFFERRENDERBUFFERPROC PFN_glFramebufferRenderbuffer;
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
    PFN_glGetFramebufferAttachmentParameteriv;
typedef PFNGLGENERATEMIPMAPPROC PFN_glGenerateMipmap;
typedef PFNGLBLITFRAMEBUFFERPROC PFN_glBlitFramebuffer;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
    PFN_glRenderbufferStorageMultisample;
typedef PFNGLFRAMEBUFFERTEXTURELAYERPROC PFN_glFramebufferTextureLayer;
typedef PFNGLMAPBUFFERRANGEPROC PFN_glMapBufferRange;
typedef PFNGLFLUSHMAPPEDBUFFERRANGEPROC PFN_glFlushMappedBufferRange;
typedef PFNGLBINDVERTEXARRAYPROC PFN_glBindVertexArray;
typedef PFNGLDELETEVERTEXARRAYSPROC PFN_glDeleteVertexArrays;
typedef PFNGLGENVERTEXARRAYSPROC PFN_glGenVertexArrays;
typedef PFNGLISVERTEXARRAYPROC PFN_glIsVertexArray;
typedef PFNGLDRAWARRAYSINSTANCEDPROC PFN_glDrawArraysInstanced;
typedef PFNGLDRAWELEMENTSINSTANCEDPROC PFN_glDrawElementsInstanced;
typedef PFNGLTEXBUFFERPROC PFN_glTexBuffer;
typedef PFNGLPRIMITIVERESTARTINDEXPROC PFN_glPrimitiveRestartIndex;
typedef PFNGLCOPYBUFFERSUBDATAPROC PFN_glCopyBufferSubData;
typedef PFNGLGETUNIFORMINDICESPROC PFN_glGetUniformIndices;
typedef PFNGLGETACTIVEUNIFORMSIVPROC PFN_glGetActiveUniformsiv;
typedef PFNGLGETACTIVEUNIFORMNAMEPROC PFN_glGetActiveUniformName;
typedef PFNGLGETUNIFORMBLOCKINDEXPROC PFN_glGetUniformBlockIndex;
typedef PFNGLGETACTIVEUNIFORMBLOCKIVPROC PFN_glGetActiveUniformBlockiv;
typedef PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC PFN_glGetActiveUniformBlockName;
typedef PFNGLUNIFORMBLOCKBINDINGPROC PFN_glUniformBlockBinding;
typedef PFNGLDRAWELEMENTSBASEVERTEXPROC PFN_glDrawElementsBaseVertex;
typedef PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC PFN_glDrawRangeElementsBaseVertex;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
    PFN_glDrawElementsInstancedBaseVertex;
typedef PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC PFN_glMultiDrawElementsBaseVertex;
typedef PFNGLPROVOKINGVERTEXPROC PFN_glProvokingVertex;
typedef PFNGLFENCESYNCPROC PFN_glFenceSync;
typedef PFNGLISSYNCPROC PFN_glIsSync;
typedef PFNGLDELETESYNCPROC PFN_glDeleteSync;
typedef PFNGLCLIENTWAITSYNCPROC PFN_glClientWaitSync;
typedef PFNGLWAITSYNCPROC PFN_glWaitSync;
typedef PFNGLGETINTEGER64VPROC PFN_glGetInteger64v;
typedef PFNGLGETSYNCIVPROC PFN_glGetSynciv;
typedef PFNGLGETINTEGER64I_VPROC PFN_glGetInteger64i_v;
typedef PFNGLGETBUFFERPARAMETERI64VPROC PFN_glGetBufferParameteri64v;
typedef PFNGLFRAMEBUFFERTEXTUREPROC PFN_glFramebufferTexture;
typedef PFNGLTEXIMAGE2DMULTISAMPLEPROC PFN_glTexImage2DMultisample;
typedef PFNGLTEXIMAGE3DMULTISAMPLEPROC PFN_glTexImage3DMultisample;
typedef PFNGLGETMULTISAMPLEFVPROC PFN_glGetMultisamplefv;
typedef PFNGLSAMPLEMASKIPROC PFN_glSampleMaski;
typedef PFNGLBINDFRAGDATALOCATIONINDEXEDPROC PFN_glBindFragDataLocationIndexed;
typedef PFNGLGETFRAGDATAINDEXPROC PFN_glGetFragDataIndex;
typedef PFNGLGENSAMPLERSPROC PFN_glGenSamplers;
typedef PFNGLDELETESAMPLERSPROC PFN_glDeleteSamplers;
typedef PFNGLISSAMPLERPROC PFN_glIsSampler;
typedef PFNGLBINDSAMPLERPROC PFN_glBindSampler;
typedef PFNGLSAMPLERPARAMETERIPROC PFN_glSamplerParameteri;
typedef PFNGLSAMPLERPARAMETERIVPROC PFN_glSamplerParameteriv;
typedef PFNGLSAMPLERPARAMETERFPROC PFN_glSamplerParameterf;
typedef PFNGLSAMPLERPARAMETERFVPROC PFN_glSamplerParameterfv;
typedef PFNGLSAMPLERPARAMETERIIVPROC PFN_glSamplerParameterIiv;
typedef PFNGLSAMPLERPARAMETERIUIVPROC PFN_glSamplerParameterIuiv;
typedef PFNGLGETSAMPLERPARAMETERIVPROC PFN_glGetSamplerParameteriv;
typedef PFNGLGETSAMPLERPARAMETERIIVPROC PFN_glGetSamplerParameterIiv;
typedef PFNGLGETSAMPLERPARAMETERFVPROC PFN_glGetSamplerParameterfv;
typedef PFNGLGETSAMPLERPARAMETERIUIVPROC PFN_glGetSamplerParameterIuiv;
typedef PFNGLQUERYCOUNTERPROC PFN_glQueryCounter;
typedef PFNGLGETQUERYOBJECTI64VPROC PFN_glGetQueryObjecti64v;
typedef PFNGLGETQUERYOBJECTUI64VPROC PFN_glGetQueryObjectui64v;
typedef PFNGLVERTEXATTRIBDIVISORPROC PFN_glVertexAttribDivisor;
typedef PFNGLVERTEXATTRIBP1UIPROC PFN_glVertexAttribP1ui;
typedef PFNGLVERTEXATTRIBP1UIVPROC PFN_glVertexAttribP1uiv;
typedef PFNGLVERTEXATTRIBP2UIPROC PFN_glVertexAttribP2ui;
typedef PFNGLVERTEXATTRIBP2UIVPROC PFN_glVertexAttribP2uiv;
typedef PFNGLVERTEXATTRIBP3UIPROC PFN_glVertexAttribP3ui;
typedef PFNGLVERTEXATTRIBP3UIVPROC PFN_glVertexAttribP3uiv;
typedef PFNGLVERTEXATTRIBP4UIPROC PFN_glVertexAttribP4ui;
typedef PFNGLVERTEXATTRIBP4UIVPROC PFN_glVertexAttribP4uiv;
typedef PFNGLVERTEXP2UIPROC PFN_glVertexP2ui;
typedef PFNGLVERTEXP2UIVPROC PFN_glVertexP2uiv;
typedef PFNGLVERTEXP3UIPROC PFN_glVertexP3ui;
typedef PFNGLVERTEXP3UIVPROC PFN_glVertexP3uiv;
typedef PFNGLVERTEXP4UIPROC PFN_glVertexP4ui;
typedef PFNGLVERTEXP4UIVPROC PFN_glVertexP4uiv;
typedef PFNGLTEXCOORDP1UIPROC PFN_glTexCoordP1ui;
typedef PFNGLTEXCOORDP1UIVPROC PFN_glTexCoordP1uiv;
typedef PFNGLTEXCOORDP2UIPROC PFN_glTexCoordP2ui;
typedef PFNGLTEXCOORDP2UIVPROC PFN_glTexCoordP2uiv;
typedef PFNGLTEXCOORDP3UIPROC PFN_glTexCoordP3ui;
typedef PFNGLTEXCOORDP3UIVPROC PFN_glTexCoordP3uiv;
typedef PFNGLTEXCOORDP4UIPROC PFN_glTexCoordP4ui;
typedef PFNGLTEXCOORDP4UIVPROC PFN_glTexCoordP4uiv;
typedef PFNGLMULTITEXCOORDP1UIPROC PFN_glMultiTexCoordP1ui;
typedef PFNGLMULTITEXCOORDP1UIVPROC PFN_glMultiTexCoordP1uiv;
typedef PFNGLMULTITEXCOORDP2UIPROC PFN_glMultiTexCoordP2ui;
typedef PFNGLMULTITEXCOORDP2UIVPROC PFN_glMultiTexCoordP2uiv;
typedef PFNGLMULTITEXCOORDP3UIPROC PFN_glMultiTexCoordP3ui;
typedef PFNGLMULTITEXCOORDP3UIVPROC PFN_glMultiTexCoordP3uiv;
typedef PFNGLMULTITEXCOORDP4UIPROC PFN_glMultiTexCoordP4ui;
typedef PFNGLMULTITEXCOORDP4UIVPROC PFN_glMultiTexCoordP4uiv;
typedef PFNGLNORMALP3UIPROC PFN_glNormalP3ui;
typedef PFNGLNORMALP3UIVPROC PFN_glNormalP3uiv;
typedef PFNGLCOLORP3UIPROC PFN_glColorP3ui;
typedef PFNGLCOLORP3UIVPROC PFN_glColorP3uiv;
typedef PFNGLCOLORP4UIPROC PFN_glColorP4ui;
typedef PFNGLCOLORP4UIVPROC PFN_glColorP4uiv;
typedef PFNGLSECONDARYCOLORP3UIPROC PFN_glSecondaryColorP3ui;
typedef PFNGLSECONDARYCOLORP3UIVPROC PFN_glSecondaryColorP3uiv;
typedef PFNGLMINSAMPLESHADINGPROC PFN_glMinSampleShading;
typedef PFNGLBLENDEQUATIONIPROC PFN_glBlendEquationi;
typedef PFNGLBLENDEQUATIONSEPARATEIPROC PFN_glBlendEquationSeparatei;
typedef PFNGLBLENDFUNCIPROC PFN_glBlendFunci;
typedef PFNGLBLENDFUNCSEPARATEIPROC PFN_glBlendFuncSeparatei;
typedef PFNGLDRAWARRAYSINDIRECTPROC PFN_glDrawArraysIndirect;
typedef PFNGLDRAWELEMENTSINDIRECTPROC PFN_glDrawElementsIndirect;
typedef PFNGLUNIFORM1DPROC PFN_glUniform1d;
typedef PFNGLUNIFORM2DPROC PFN_glUniform2d;
typedef PFNGLUNIFORM3DPROC PFN_glUniform3d;
typedef PFNGLUNIFORM4DPROC PFN_glUniform4d;
typedef PFNGLUNIFORM1DVPROC PFN_glUniform1dv;
typedef PFNGLUNIFORM2DVPROC PFN_glUniform2dv;
typedef PFNGLUNIFORM3DVPROC PFN_glUniform3dv;
typedef PFNGLUNIFORM4DVPROC PFN_glUniform4dv;
typedef PFNGLUNIFORMMATRIX2DVPROC PFN_glUniformMatrix2dv;
typedef PFNGLUNIFORMMATRIX3DVPROC PFN_glUniformMatrix3dv;
typedef PFNGLUNIFORMMATRIX4DVPROC PFN_glUniformMatrix4dv;
typedef PFNGLUNIFORMMATRIX2X3DVPROC PFN_glUniformMatrix2x3dv;
typedef PFNGLUNIFORMMATRIX2X4DVPROC PFN_glUniformMatrix2x4dv;
typedef PFNGLUNIFORMMATRIX3X2DVPROC PFN_glUniformMatrix3x2dv;
typedef PFNGLUNIFORMMATRIX3X4DVPROC PFN_glUniformMatrix3x4dv;
typedef PFNGLUNIFORMMATRIX4X2DVPROC PFN_glUniformMatrix4x2dv;
typedef PFNGLUNIFORMMATRIX4X3DVPROC PFN_glUniformMatrix4x3dv;
typedef PFNGLGETUNIFORMDVPROC PFN_glGetUniformdv;
typedef PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
    PFN_glGetSubroutineUniformLocation;
typedef PFNGLGETSUBROUTINEINDEXPROC PFN_glGetSubroutineIndex;
typedef PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
    PFN_glGetActiveSubroutineUniformiv;
typedef PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
    PFN_glGetActiveSubroutineUniformName;
typedef PFNGLGETACTIVESUBROUTINENAMEPROC PFN_glGetActiveSubroutineName;
typedef PFNGLUNIFORMSUBROUTINESUIVPROC PFN_glUniformSubroutinesuiv;
typedef PFNGLGETUNIFORMSUBROUTINEUIVPROC PFN_glGetUniformSubroutineuiv;
typedef PFNGLGETPROGRAMSTAGEIVPROC PFN_glGetProgramStageiv;
typedef PFNGLPATCHPARAMETERIPROC PFN_glPatchParameteri;
typedef PFNGLPATCHPARAMETERFVPROC PFN_glPatchParameterfv;
typedef PFNGLBINDTRANSFORMFEEDBACKPROC PFN_glBindTransformFeedback;
typedef PFNGLDELETETRANSFORMFEEDBACKSPROC PFN_glDeleteTransformFeedbacks;
typedef PFNGLGENTRANSFORMFEEDBACKSPROC PFN_glGenTransformFeedbacks;
typedef PFNGLISTRANSFORMFEEDBACKPROC PFN_glIsTransformFeedback;
typedef PFNGLPAUSETRANSFORMFEEDBACKPROC PFN_glPauseTransformFeedback;
typedef PFNGLRESUMETRANSFORMFEEDBACKPROC PFN_glResumeTransformFeedback;
typedef PFNGLDRAWTRANSFORMFEEDBACKPROC PFN_glDrawTransformFeedback;
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC PFN_glDrawTransformFeedbackStream;
typedef PFNGLBEGINQUERYINDEXEDPROC PFN_glBeginQueryIndexed;
typedef PFNGLENDQUERYINDEXEDPROC PFN_glEndQueryIndexed;
typedef PFNGLGETQUERYINDEXEDIVPROC PFN_glGetQueryIndexediv;
typedef PFNGLRELEASESHADERCOMPILERPROC PFN_glReleaseShaderCompiler;
typedef PFNGLSHADERBINARYPROC PFN_glShaderBinary;
typedef PFNGLGETSHADERPRECISIONFORMATPROC PFN_glGetShaderPrecisionFormat;
typedef PFNGLDEPTHRANGEFPROC PFN_glDepthRangef;
typedef PFNGLCLEARDEPTHFPROC PFN_glClearDepthf;
typedef PFNGLGETPROGRAMBINARYPROC PFN_glGetProgramBinary;
typedef PFNGLPROGRAMBINARYPROC PFN_glProgramBinary;
typedef PFNGLPROGRAMPARAMETERIPROC PFN_glProgramParameteri;
typedef PFNGLUSEPROGRAMSTAGESPROC PFN_glUseProgramStages;
typedef PFNGLACTIVESHADERPROGRAMPROC PFN_glActiveShaderProgram;
typedef PFNGLCREATESHADERPROGRAMVPROC PFN_glCreateShaderProgramv;
typedef PFNGLBINDPROGRAMPIPELINEPROC PFN_glBindProgramPipeline;
typedef PFNGLDELETEPROGRAMPIPELINESPROC PFN_glDeleteProgramPipelines;
typedef PFNGLGENPROGRAMPIPELINESPROC PFN_glGenProgramPipelines;
typedef PFNGLISPROGRAMPIPELINEPROC PFN_glIsProgramPipeline;
typedef PFNGLGETPROGRAMPIPELINEIVPROC PFN_glGetProgramPipelineiv;
typedef PFNGLPROGRAMUNIFORM1IPROC PFN_glProgramUniform1i;
typedef PFNGLPROGRAMUNIFORM1IVPROC PFN_glProgramUniform1iv;
typedef PFNGLPROGRAMUNIFORM1FPROC PFN_glProgramUniform1f;
typedef PFNGLPROGRAMUNIFORM1FVPROC PFN_glProgramUniform1fv;
typedef PFNGLPROGRAMUNIFORM1DPROC PFN_glProgramUniform1d;
typedef PFNGLPROGRAMUNIFORM1DVPROC PFN_glProgramUniform1dv;
typedef PFNGLPROGRAMUNIFORM1UIPROC PFN_glProgramUniform1ui;
typedef PFNGLPROGRAMUNIFORM1UIVPROC PFN_glProgramUniform1uiv;
typedef PFNGLPROGRAMUNIFORM2IPROC PFN_glProgramUniform2i;
typedef PFNGLPROGRAMUNIFORM2IVPROC PFN_glProgramUniform2iv;
typedef PFNGLPROGRAMUNIFORM2FPROC PFN_glProgramUniform2f;
typedef PFNGLPROGRAMUNIFORM2FVPROC PFN_glProgramUniform2fv;
typedef PFNGLPROGRAMUNIFORM2DPROC PFN_glProgramUniform2d;
typedef PFNGLPROGRAMUNIFORM2DVPROC PFN_glProgramUniform2dv;
typedef PFNGLPROGRAMUNIFORM2UIPROC PFN_glProgramUniform2ui;
typedef PFNGLPROGRAMUNIFORM2UIVPROC PFN_glProgramUniform2uiv;
typedef PFNGLPROGRAMUNIFORM3IPROC PFN_glProgramUniform3i;
typedef PFNGLPROGRAMUNIFORM3IVPROC PFN_glProgramUniform3iv;
typedef PFNGLPROGRAMUNIFORM3FPROC PFN_glProgramUniform3f;
typedef PFNGLPROGRAMUNIFORM3FVPROC PFN_glProgramUniform3fv;
typedef PFNGLPROGRAMUNIFORM3DPROC PFN_glProgramUniform3d;
typedef PFNGLPROGRAMUNIFORM3DVPROC PFN_glProgramUniform3dv;
typedef PFNGLPROGRAMUNIFORM3UIPROC PFN_glProgramUniform3ui;
typedef PFNGLPROGRAMUNIFORM3UIVPROC PFN_glProgramUniform3uiv;
typedef PFNGLPROGRAMUNIFORM4IPROC PFN_glProgramUniform4i;
typedef PFNGLPROGRAMUNIFORM4IVPROC PFN_glProgramUniform4iv;
typedef PFNGLPROGRAMUNIFORM4FPROC PFN_glProgramUniform4f;
typedef PFNGLPROGRAMUNIFORM4FVPROC PFN_glProgramUniform4fv;
typedef PFNGLPROGRAMUNIFORM4DPROC PFN_glProgramUniform4d;
typedef PFNGLPROGRAMUNIFORM4DVPROC PFN_glProgramUniform4dv;
typedef PFNGLPROGRAMUNIFORM4UIPROC PFN_glProgramUniform4ui;
typedef PFNGLPROGRAMUNIFORM4UIVPROC PFN_glProgramUniform4uiv;
typedef PFNGLPROGRAMUNIFORMMATRIX2FVPROC PFN_glProgramUniformMatrix2fv;
typedef PFNGLPROGRAMUNIFORMMATRIX3FVPROC PFN_glProgramUniformMatrix3fv;
typedef PFNGLPROGRAMUNIFORMMATRIX4FVPROC PFN_glProgramUniformMatrix4fv;
typedef PFNGLPROGRAMUNIFORMMATRIX2DVPROC PFN_glProgramUniformMatrix2dv;
typedef PFNGLPROGRAMUNIFORMMATRIX3DVPROC PFN_glProgramUniformMatrix3dv;
typedef PFNGLPROGRAMUNIFORMMATRIX4DVPROC PFN_glProgramUniformMatrix4dv;
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC PFN_glProgramUniformMatrix2x3fv;
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC PFN_glProgramUniformMatrix3x2fv;
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC PFN_glProgramUniformMatrix2x4fv;
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC PFN_glProgramUniformMatrix4x2fv;
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC PFN_glProgramUniformMatrix3x4fv;
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC PFN_glProgramUniformMatrix4x3fv;
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC PFN_glProgramUniformMatrix2x3dv;
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC PFN_glProgramUniformMatrix3x2dv;
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC PFN_glProgramUniformMatrix2x4dv;
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC PFN_glProgramUniformMatrix4x2dv;
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC PFN_glProgramUniformMatrix3x4dv;
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC PFN_glProgramUniformMatrix4x3dv;
typedef PFNGLVALIDATEPROGRAMPIPELINEPROC PFN_glValidateProgramPipeline;
typedef PFNGLGETPROGRAMPIPELINEINFOLOGPROC PFN_glGetProgramPipelineInfoLog;
typedef PFNGLVERTEXATTRIBL1DPROC PFN_glVertexAttribL1d;
typedef PFNGLVERTEXATTRIBL2DPROC PFN_glVertexAttribL2d;
typedef PFNGLVERTEXATTRIBL3DPROC PFN_glVertexAttribL3d;
typedef PFNGLVERTEXATTRIBL4DPROC PFN_glVertexAttribL4d;
typedef PFNGLVERTEXATTRIBL1DVPROC PFN_glVertexAttribL1dv;
typedef PFNGLVERTEXATTRIBL2DVPROC PFN_glVertexAttribL2dv;
typedef PFNGLVERTEXATTRIBL3DVPROC PFN_glVertexAttribL3dv;
typedef PFNGLVERTEXATTRIBL4DVPROC PFN_glVertexAttribL4dv;
typedef PFNGLVERTEXATTRIBLPOINTERPROC PFN_glVertexAttribLPointer;
typedef PFNGLGETVERTEXATTRIBLDVPROC PFN_glGetVertexAttribLdv;
typedef PFNGLVIEWPORTARRAYVPROC PFN_glViewportArrayv;
typedef PFNGLVIEWPORTINDEXEDFPROC PFN_glViewportIndexedf;
typedef PFNGLVIEWPORTINDEXEDFVPROC PFN_glViewportIndexedfv;
typedef PFNGLSCISSORARRAYVPROC PFN_glScissorArrayv;
typedef PFNGLSCISSORINDEXEDPROC PFN_glScissorIndexed;
typedef PFNGLSCISSORINDEXEDVPROC PFN_glScissorIndexedv;
typedef PFNGLDEPTHRANGEARRAYVPROC PFN_glDepthRangeArrayv;
typedef PFNGLDEPTHRANGEINDEXEDPROC PFN_glDepthRangeIndexed;
typedef PFNGLGETFLOATI_VPROC PFN_glGetFloati_v;
typedef PFNGLGETDOUBLEI_VPROC PFN_glGetDoublei_v;
typedef PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
    PFN_glDrawArraysInstancedBaseInstance;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
    PFN_glDrawElementsInstancedBaseInstance;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
    PFN_glDrawElementsInstancedBaseVertexBaseInstance;
typedef PFNGLGETINTERNALFORMATIVPROC PFN_glGetInternalformativ;
typedef PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
    PFN_glGetActiveAtomicCounterBufferiv;
typedef PFNGLBINDIMAGETEXTUREPROC PFN_glBindImageTexture;
typedef PFNGLMEMORYBARRIERPROC PFN_glMemoryBarrier;
typedef PFNGLTEXSTORAGE1DPROC PFN_glTexStorage1D;
typedef PFNGLTEXSTORAGE2DPROC PFN_glTexStorage2D;
typedef PFNGLTEXSTORAGE3DPROC PFN_glTexStorage3D;
typedef PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
    PFN_glDrawTransformFeedbackInstanced;
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
    PFN_glDrawTransformFeedbackStreamInstanced;
typedef PFNGLCLEARBUFFERDATAPROC PFN_glClearBufferData;
typedef PFNGLCLEARBUFFERSUBDATAPROC PFN_glClearBufferSubData;
typedef PFNGLDISPATCHCOMPUTEPROC PFN_glDispatchCompute;
typedef PFNGLDISPATCHCOMPUTEINDIRECTPROC PFN_glDispatchComputeIndirect;
typedef PFNGLCOPYIMAGESUBDATAPROC PFN_glCopyImageSubData;
typedef PFNGLFRAMEBUFFERPARAMETERIPROC PFN_glFramebufferParameteri;
typedef PFNGLGETFRAMEBUFFERPARAMETERIVPROC PFN_glGetFramebufferParameteriv;
typedef PFNGLGETINTERNALFORMATI64VPROC PFN_glGetInternalformati64v;
typedef PFNGLINVALIDATETEXSUBIMAGEPROC PFN_glInvalidateTexSubImage;
typedef PFNGLINVALIDATETEXIMAGEPROC PFN_glInvalidateTexImage;
typedef PFNGLINVALIDATEBUFFERSUBDATAPROC PFN_glInvalidateBufferSubData;
typedef PFNGLINVALIDATEBUFFERDATAPROC PFN_glInvalidateBufferData;
typedef PFNGLINVALIDATEFRAMEBUFFERPROC PFN_glInvalidateFramebuffer;
typedef PFNGLINVALIDATESUBFRAMEBUFFERPROC PFN_glInvalidateSubFramebuffer;
typedef PFNGLMULTIDRAWARRAYSINDIRECTPROC PFN_glMultiDrawArraysIndirect;
typedef PFNGLMULTIDRAWELEMENTSINDIRECTPROC PFN_glMultiDrawElementsIndirect;
typedef PFNGLGETPROGRAMINTERFACEIVPROC PFN_glGetProgramInterfaceiv;
typedef PFNGLGETPROGRAMRESOURCEINDEXPROC PFN_glGetProgramResourceIndex;
typedef PFNGLGETPROGRAMRESOURCENAMEPROC PFN_glGetProgramResourceName;
typedef PFNGLGETPROGRAMRESOURCEIVPROC PFN_glGetProgramResourceiv;
typedef PFNGLGETPROGRAMRESOURCELOCATIONPROC PFN_glGetProgramResourceLocation;
typedef PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
    PFN_glGetProgramResourceLocationIndex;
typedef PFNGLSHADERSTORAGEBLOCKBINDINGPROC PFN_glShaderStorageBlockBinding;
typedef PFNGLTEXBUFFERRANGEPROC PFN_glTexBufferRange;
typedef PFNGLTEXSTORAGE2DMULTISAMPLEPROC PFN_glTexStorage2DMultisample;
typedef PFNGLTEXSTORAGE3DMULTISAMPLEPROC PFN_glTexStorage3DMultisample;
typedef PFNGLTEXTUREVIEWPROC PFN_glTextureView;
typedef PFNGLBINDVERTEXBUFFERPROC PFN_glBindVertexBuffer;
typedef PFNGLVERTEXATTRIBFORMATPROC PFN_glVertexAttribFormat;
typedef PFNGLVERTEXATTRIBIFORMATPROC PFN_glVertexAttribIFormat;
typedef PFNGLVERTEXATTRIBLFORMATPROC PFN_glVertexAttribLFormat;
typedef PFNGLVERTEXATTRIBBINDINGPROC PFN_glVertexAttribBinding;
typedef PFNGLVERTEXBINDINGDIVISORPROC PFN_glVertexBindingDivisor;
typedef PFNGLDEBUGMESSAGECONTROLPROC PFN_glDebugMessageControl;
typedef PFNGLDEBUGMESSAGEINSERTPROC PFN_glDebugMessageInsert;
typedef PFNGLDEBUGMESSAGECALLBACKPROC PFN_glDebugMessageCallback;
typedef PFNGLGETDEBUGMESSAGELOGPROC PFN_glGetDebugMessageLog;
typedef PFNGLPUSHDEBUGGROUPPROC PFN_glPushDebugGroup;
typedef PFNGLPOPDEBUGGROUPPROC PFN_glPopDebugGroup;
typedef PFNGLOBJECTLABELPROC PFN_glObjectLabel;
typedef PFNGLGETOBJECTLABELPROC PFN_glGetObjectLabel;
typedef PFNGLOBJECTPTRLABELPROC PFN_glObjectPtrLabel;
typedef PFNGLGETOBJECTPTRLABELPROC PFN_glGetObjectPtrLabel;
typedef PFNGLBUFFERSTORAGEPROC PFN_glBufferStorage;
typedef PFNGLCLEARTEXIMAGEPROC PFN_glClearTexImage;
typedef PFNGLCLEARTEXSUBIMAGEPROC PFN_glClearTexSubImage;
typedef PFNGLBINDBUFFERSBASEPROC PFN_glBindBuffersBase;
typedef PFNGLBINDBUFFERSRANGEPROC PFN_glBindBuffersRange;
typedef PFNGLBINDTEXTURESPROC PFN_glBindTextures;
typedef PFNGLBINDSAMPLERSPROC PFN_glBindSamplers;
typedef PFNGLBINDIMAGETEXTURESPROC PFN_glBindImageTextures;
typedef PFNGLBINDVERTEXBUFFERSPROC PFN_glBindVertexBuffers;
typedef PFNGLCLIPCONTROLPROC PFN_glClipControl;
typedef PFNGLCREATETRANSFORMFEEDBACKSPROC PFN_glCreateTransformFeedbacks;
typedef PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC PFN_glTransformFeedbackBufferBase;
typedef PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
    PFN_glTransformFeedbackBufferRange;
typedef PFNGLGETTRANSFORMFEEDBACKIVPROC PFN_glGetTransformFeedbackiv;
typedef PFNGLGETTRANSFORMFEEDBACKI_VPROC PFN_glGetTransformFeedbacki_v;
typedef PFNGLGETTRANSFORMFEEDBACKI64_VPROC PFN_glGetTransformFeedbacki64_v;
typedef PFNGLCREATEBUFFERSPROC PFN_glCreateBuffers;
typedef PFNGLNAMEDBUFFERSTORAGEPROC PFN_glNamedBufferStorage;
typedef PFNGLNAMEDBUFFERDATAPROC PFN_glNamedBufferData;
typedef PFNGLNAMEDBUFFERSUBDATAPROC PFN_glNamedBufferSubData;
typedef PFNGLCOPYNAMEDBUFFERSUBDATAPROC PFN_glCopyNamedBufferSubData;
typedef PFNGLCLEARNAMEDBUFFERDATAPROC PFN_glClearNamedBufferData;
typedef PFNGLCLEARNAMEDBUFFERSUBDATAPROC PFN_glClearNamedBufferSubData;
typedef PFNGLMAPNAMEDBUFFERPROC PFN_glMapNamedBuffer;
typedef PFNGLMAPNAMEDBUFFERRANGEPROC PFN_glMapNamedBufferRange;
typedef PFNGLUNMAPNAMEDBUFFERPROC PFN_glUnmapNamedBuffer;
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC PFN_glFlushMappedNamedBufferRange;
typedef PFNGLGETNAMEDBUFFERPARAMETERIVPROC PFN_glGetNamedBufferParameteriv;
typedef PFNGLGETNAMEDBUFFERPARAMETERI64VPROC PFN_glGetNamedBufferParameteri64v;
typedef PFNGLGETNAMEDBUFFERPOINTERVPROC PFN_glGetNamedBufferPointerv;
typedef PFNGLGETNAMEDBUFFERSUBDATAPROC PFN_glGetNamedBufferSubData;
typedef PFNGLCREATEFRAMEBUFFERSPROC PFN_glCreateFramebuffers;
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
    PFN_glNamedFramebufferRenderbuffer;
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC PFN_glNamedFramebufferParameteri;
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREPROC PFN_glNamedFramebufferTexture;
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
    PFN_glNamedFramebufferTextureLayer;
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC PFN_glNamedFramebufferDrawBuffer;
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC PFN_glNamedFramebufferDrawBuffers;
typedef PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC PFN_glNamedFramebufferReadBuffer;
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
    PFN_glInvalidateNamedFramebufferData;
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
    PFN_glInvalidateNamedFramebufferSubData;
typedef PFNGLCLEARNAMEDFRAMEBUFFERIVPROC PFN_glClearNamedFramebufferiv;
typedef PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC PFN_glClearNamedFramebufferuiv;
typedef PFNGLCLEARNAMEDFRAMEBUFFERFVPROC PFN_glClearNamedFramebufferfv;
typedef PFNGLCLEARNAMEDFRAMEBUFFERFIPROC PFN_glClearNamedFramebufferfi;
typedef PFNGLBLITNAMEDFRAMEBUFFERPROC PFN_glBlitNamedFramebuffer;
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC PFN_glCheckNamedFramebufferStatus;
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
    PFN_glGetNamedFramebufferParameteriv;
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
    PFN_glGetNamedFramebufferAttachmentParameteriv;
typedef PFNGLCREATERENDERBUFFERSPROC PFN_glCreateRenderbuffers;
typedef PFNGLNAMEDRENDERBUFFERSTORAGEPROC PFN_glNamedRenderbufferStorage;
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
    PFN_glNamedRenderbufferStorageMultisample;
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
    PFN_glGetNamedRenderbufferParameteriv;
typedef PFNGLCREATETEXTURESPROC PFN_glCreateTextures;
typedef PFNGLTEXTUREBUFFERPROC PFN_glTextureBuffer;
typedef PFNGLTEXTUREBUFFERRANGEPROC PFN_glTextureBufferRange;
typedef PFNGLTEXTURESTORAGE1DPROC PFN_glTextureStorage1D;
typedef PFNGLTEXTURESTORAGE2DPROC PFN_glTextureStorage2D;
typedef PFNGLTEXTURESTORAGE3DPROC PFN_glTextureStorage3D;
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC PFN_glTextureStorage2DMultisample;
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC PFN_glTextureStorage3DMultisample;
typedef PFNGLTEXTURESUBIMAGE1DPROC PFN_glTextureSubImage1D;
typedef PFNGLTEXTURESUBIMAGE2DPROC PFN_glTextureSubImage2D;
typedef PFNGLTEXTURESUBIMAGE3DPROC PFN_glTextureSubImage3D;
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC PFN_glCompressedTextureSubImage1D;
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC PFN_glCompressedTextureSubImage2D;
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC PFN_glCompressedTextureSubImage3D;
typedef PFNGLCOPYTEXTURESUBIMAGE1DPROC PFN_glCopyTextureSubImage1D;
typedef PFNGLCOPYTEXTURESUBIMAGE2DPROC PFN_glCopyTextureSubImage2D;
typedef PFNGLCOPYTEXTURESUBIMAGE3DPROC PFN_glCopyTextureSubImage3D;
typedef PFNGLTEXTUREPARAMETERFPROC PFN_glTextureParameterf;
typedef PFNGLTEXTUREPARAMETERFVPROC PFN_glTextureParameterfv;
typedef PFNGLTEXTUREPARAMETERIPROC PFN_glTextureParameteri;
typedef PFNGLTEXTUREPARAMETERIIVPROC PFN_glTextureParameterIiv;
typedef PFNGLTEXTUREPARAMETERIUIVPROC PFN_glTextureParameterIuiv;
typedef PFNGLTEXTUREPARAMETERIVPROC PFN_glTextureParameteriv;
typedef PFNGLGENERATETEXTUREMIPMAPPROC PFN_glGenerateTextureMipmap;
typedef PFNGLBINDTEXTUREUNITPROC PFN_glBindTextureUnit;
typedef PFNGLGETTEXTUREIMAGEPROC PFN_glGetTextureImage;
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC PFN_glGetCompressedTextureImage;
typedef PFNGLGETTEXTURELEVELPARAMETERFVPROC PFN_glGetTextureLevelParameterfv;
typedef PFNGLGETTEXTURELEVELPARAMETERIVPROC PFN_glGetTextureLevelParameteriv;
typedef PFNGLGETTEXTUREPARAMETERFVPROC PFN_glGetTextureParameterfv;
typedef PFNGLGETTEXTUREPARAMETERIIVPROC PFN_glGetTextureParameterIiv;
typedef PFNGLGETTEXTUREPARAMETERIUIVPROC PFN_glGetTextureParameterIuiv;
typedef PFNGLGETTEXTUREPARAMETERIVPROC PFN_glGetTextureParameteriv;
typedef PFNGLCREATEVERTEXARRAYSPROC PFN_glCreateVertexArrays;
typedef PFNGLDISABLEVERTEXARRAYATTRIBPROC PFN_glDisableVertexArrayAttrib;
typedef PFNGLENABLEVERTEXARRAYATTRIBPROC PFN_glEnableVertexArrayAttrib;
typedef PFNGLVERTEXARRAYELEMENTBUFFERPROC PFN_glVertexArrayElementBuffer;
typedef PFNGLVERTEXARRAYVERTEXBUFFERPROC PFN_glVertexArrayVertexBuffer;
typedef PFNGLVERTEXARRAYVERTEXBUFFERSPROC PFN_glVertexArrayVertexBuffers;
typedef PFNGLVERTEXARRAYATTRIBBINDINGPROC PFN_glVertexArrayAttribBinding;
typedef PFNGLVERTEXARRAYATTRIBFORMATPROC PFN_glVertexArrayAttribFormat;
typedef PFNGLVERTEXARRAYATTRIBIFORMATPROC PFN_glVertexArrayAttribIFormat;
typedef PFNGLVERTEXARRAYATTRIBLFORMATPROC PFN_glVertexArrayAttribLFormat;
typedef PFNGLVERTEXARRAYBINDINGDIVISORPROC PFN_glVertexArrayBindingDivisor;
typedef PFNGLGETVERTEXARRAYIVPROC PFN_glGetVertexArrayiv;
typedef PFNGLGETVERTEXARRAYINDEXEDIVPROC PFN_glGetVertexArrayIndexediv;
typedef PFNGLGETVERTEXARRAYINDEXED64IVPROC PFN_glGetVertexArrayIndexed64iv;
typedef PFNGLCREATESAMPLERSPROC PFN_glCreateSamplers;
typedef PFNGLCREATEPROGRAMPIPELINESPROC PFN_glCreateProgramPipelines;
typedef PFNGLCREATEQUERIESPROC PFN_glCreateQueries;
typedef PFNGLGETQUERYBUFFEROBJECTI64VPROC PFN_glGetQueryBufferObjecti64v;
typedef PFNGLGETQUERYBUFFEROBJECTIVPROC PFN_glGetQueryBufferObjectiv;
typedef PFNGLGETQUERYBUFFEROBJECTUI64VPROC PFN_glGetQueryBufferObjectui64v;
typedef PFNGLGETQUERYBUFFEROBJECTUIVPROC PFN_glGetQueryBufferObjectuiv;
typedef PFNGLMEMORYBARRIERBYREGIONPROC PFN_glMemoryBarrierByRegion;
typedef PFNGLGETTEXTURESUBIMAGEPROC PFN_glGetTextureSubImage;
typedef PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
    PFN_glGetCompressedTextureSubImage;
typedef PFNGLGETGRAPHICSRESETSTATUSPROC PFN_glGetGraphicsResetStatus;
typedef PFNGLGETNCOMPRESSEDTEXIMAGEPROC PFN_glGetnCompressedTexImage;
typedef PFNGLGETNTEXIMAGEPROC PFN_glGetnTexImage;
typedef PFNGLGETNUNIFORMDVPROC PFN_glGetnUniformdv;
typedef PFNGLGETNUNIFORMFVPROC PFN_glGetnUniformfv;
typedef PFNGLGETNUNIFORMIVPROC PFN_glGetnUniformiv;
typedef PFNGLGETNUNIFORMUIVPROC PFN_glGetnUniformuiv;
typedef PFNGLREADNPIXELSPROC PFN_glReadnPixels;
typedef PFNGLGETNMAPDVPROC PFN_glGetnMapdv;
typedef PFNGLGETNMAPFVPROC PFN_glGetnMapfv;
typedef PFNGLGETNMAPIVPROC PFN_glGetnMapiv;
typedef PFNGLGETNPIXELMAPFVPROC PFN_glGetnPixelMapfv;
typedef PFNGLGETNPIXELMAPUIVPROC PFN_glGetnPixelMapuiv;
typedef PFNGLGETNPIXELMAPUSVPROC PFN_glGetnPixelMapusv;
typedef PFNGLGETNPOLYGONSTIPPLEPROC PFN_glGetnPolygonStipple;
typedef PFNGLGETNCOLORTABLEPROC PFN_glGetnColorTable;
typedef PFNGLGETNCONVOLUTIONFILTERPROC PFN_glGetnConvolutionFilter;
typedef PFNGLGETNSEPARABLEFILTERPROC PFN_glGetnSeparableFilter;
typedef PFNGLGETNHISTOGRAMPROC PFN_glGetnHistogram;
typedef PFNGLGETNMINMAXPROC PFN_glGetnMinmax;
typedef PFNGLTEXTUREBARRIERPROC PFN_glTextureBarrier;
typedef PFNGLSPECIALIZESHADERPROC PFN_glSpecializeShader;
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC
    PFN_glMultiDrawArraysIndirectCount;
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC
    PFN_glMultiDrawElementsIndirectCount;
typedef PFNGLPOLYGONOFFSETCLAMPPROC PFN_glPolygonOffsetClamp;
typedef PFNGLPRIMITIVEBOUNDINGBOXARBPROC PFN_glPrimitiveBoundingBoxARB;
typedef PFNGLGETTEXTUREHANDLEARBPROC PFN_glGetTextureHandleARB;
typedef PFNGLGETTEXTURESAMPLERHANDLEARBPROC PFN_glGetTextureSamplerHandleARB;
typedef PFNGLMAKETEXTUREHANDLERESIDENTARBPROC
    PFN_glMakeTextureHandleResidentARB;
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
    PFN_glMakeTextureHandleNonResidentARB;
typedef PFNGLGETIMAGEHANDLEARBPROC PFN_glGetImageHandleARB;
typedef PFNGLMAKEIMAGEHANDLERESIDENTARBPROC PFN_glMakeImageHandleResidentARB;
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
    PFN_glMakeImageHandleNonResidentARB;
typedef PFNGLUNIFORMHANDLEUI64ARBPROC PFN_glUniformHandleui64ARB;
typedef PFNGLUNIFORMHANDLEUI64VARBPROC PFN_glUniformHandleui64vARB;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC PFN_glProgramUniformHandleui64ARB;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
    PFN_glProgramUniformHandleui64vARB;
typedef PFNGLISTEXTUREHANDLERESIDENTARBPROC PFN_glIsTextureHandleResidentARB;
typedef PFNGLISIMAGEHANDLERESIDENTARBPROC PFN_glIsImageHandleResidentARB;
typedef PFNGLVERTEXATTRIBL1UI64ARBPROC PFN_glVertexAttribL1ui64ARB;
typedef PFNGLVERTEXATTRIBL1UI64VARBPROC PFN_glVertexAttribL1ui64vARB;
typedef PFNGLGETVERTEXATTRIBLUI64VARBPROC PFN_glGetVertexAttribLui64vARB;
typedef PFNGLCREATESYNCFROMCLEVENTARBPROC PFN_glCreateSyncFromCLeventARB;
typedef PFNGLCLAMPCOLORARBPROC PFN_glClampColorARB;
typedef PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC PFN_glDispatchComputeGroupSizeARB;
typedef PFNGLDEBUGMESSAGECONTROLARBPROC PFN_glDebugMessageControlARB;
typedef PFNGLDEBUGMESSAGEINSERTARBPROC PFN_glDebugMessageInsertARB;
typedef PFNGLDEBUGMESSAGECALLBACKARBPROC PFN_glDebugMessageCallbackARB;
typedef PFNGLGETDEBUGMESSAGELOGARBPROC PFN_glGetDebugMessageLogARB;
typedef PFNGLDRAWBUFFERSARBPROC PFN_glDrawBuffersARB;
typedef PFNGLBLENDEQUATIONIARBPROC PFN_glBlendEquationiARB;
typedef PFNGLBLENDEQUATIONSEPARATEIARBPROC PFN_glBlendEquationSeparateiARB;
typedef PFNGLBLENDFUNCIARBPROC PFN_glBlendFunciARB;
typedef PFNGLBLENDFUNCSEPARATEIARBPROC PFN_glBlendFuncSeparateiARB;
typedef PFNGLDRAWARRAYSINSTANCEDARBPROC PFN_glDrawArraysInstancedARB;
typedef PFNGLDRAWELEMENTSINSTANCEDARBPROC PFN_glDrawElementsInstancedARB;
typedef PFNGLPROGRAMSTRINGARBPROC PFN_glProgramStringARB;
typedef PFNGLBINDPROGRAMARBPROC PFN_glBindProgramARB;
typedef PFNGLDELETEPROGRAMSARBPROC PFN_glDeleteProgramsARB;
typedef PFNGLGENPROGRAMSARBPROC PFN_glGenProgramsARB;
typedef PFNGLPROGRAMENVPARAMETER4DARBPROC PFN_glProgramEnvParameter4dARB;
typedef PFNGLPROGRAMENVPARAMETER4DVARBPROC PFN_glProgramEnvParameter4dvARB;
typedef PFNGLPROGRAMENVPARAMETER4FARBPROC PFN_glProgramEnvParameter4fARB;
typedef PFNGLPROGRAMENVPARAMETER4FVARBPROC PFN_glProgramEnvParameter4fvARB;
typedef PFNGLPROGRAMLOCALPARAMETER4DARBPROC PFN_glProgramLocalParameter4dARB;
typedef PFNGLPROGRAMLOCALPARAMETER4DVARBPROC PFN_glProgramLocalParameter4dvARB;
typedef PFNGLPROGRAMLOCALPARAMETER4FARBPROC PFN_glProgramLocalParameter4fARB;
typedef PFNGLPROGRAMLOCALPARAMETER4FVARBPROC PFN_glProgramLocalParameter4fvARB;
typedef PFNGLGETPROGRAMENVPARAMETERDVARBPROC PFN_glGetProgramEnvParameterdvARB;
typedef PFNGLGETPROGRAMENVPARAMETERFVARBPROC PFN_glGetProgramEnvParameterfvARB;
typedef PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
    PFN_glGetProgramLocalParameterdvARB;
typedef PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
    PFN_glGetProgramLocalParameterfvARB;
typedef PFNGLGETPROGRAMIVARBPROC PFN_glGetProgramivARB;
typedef PFNGLGETPROGRAMSTRINGARBPROC PFN_glGetProgramStringARB;
typedef PFNGLISPROGRAMARBPROC PFN_glIsProgramARB;
typedef PFNGLPROGRAMPARAMETERIARBPROC PFN_glProgramParameteriARB;
typedef PFNGLFRAMEBUFFERTEXTUREARBPROC PFN_glFramebufferTextureARB;
typedef PFNGLFRAMEBUFFERTEXTURELAYERARBPROC PFN_glFramebufferTextureLayerARB;
typedef PFNGLFRAMEBUFFERTEXTUREFACEARBPROC PFN_glFramebufferTextureFaceARB;
typedef PFNGLSPECIALIZESHADERARBPROC PFN_glSpecializeShaderARB;
typedef PFNGLUNIFORM1I64ARBPROC PFN_glUniform1i64ARB;
typedef PFNGLUNIFORM2I64ARBPROC PFN_glUniform2i64ARB;
typedef PFNGLUNIFORM3I64ARBPROC PFN_glUniform3i64ARB;
typedef PFNGLUNIFORM4I64ARBPROC PFN_glUniform4i64ARB;
typedef PFNGLUNIFORM1I64VARBPROC PFN_glUniform1i64vARB;
typedef PFNGLUNIFORM2I64VARBPROC PFN_glUniform2i64vARB;
typedef PFNGLUNIFORM3I64VARBPROC PFN_glUniform3i64vARB;
typedef PFNGLUNIFORM4I64VARBPROC PFN_glUniform4i64vARB;
typedef PFNGLUNIFORM1UI64ARBPROC PFN_glUniform1ui64ARB;
typedef PFNGLUNIFORM2UI64ARBPROC PFN_glUniform2ui64ARB;
typedef PFNGLUNIFORM3UI64ARBPROC PFN_glUniform3ui64ARB;
typedef PFNGLUNIFORM4UI64ARBPROC PFN_glUniform4ui64ARB;
typedef PFNGLUNIFORM1UI64VARBPROC PFN_glUniform1ui64vARB;
typedef PFNGLUNIFORM2UI64VARBPROC PFN_glUniform2ui64vARB;
typedef PFNGLUNIFORM3UI64VARBPROC PFN_glUniform3ui64vARB;
typedef PFNGLUNIFORM4UI64VARBPROC PFN_glUniform4ui64vARB;
typedef PFNGLGETUNIFORMI64VARBPROC PFN_glGetUniformi64vARB;
typedef PFNGLGETUNIFORMUI64VARBPROC PFN_glGetUniformui64vARB;
typedef PFNGLGETNUNIFORMI64VARBPROC PFN_glGetnUniformi64vARB;
typedef PFNGLGETNUNIFORMUI64VARBPROC PFN_glGetnUniformui64vARB;
typedef PFNGLPROGRAMUNIFORM1I64ARBPROC PFN_glProgramUniform1i64ARB;
typedef PFNGLPROGRAMUNIFORM2I64ARBPROC PFN_glProgramUniform2i64ARB;
typedef PFNGLPROGRAMUNIFORM3I64ARBPROC PFN_glProgramUniform3i64ARB;
typedef PFNGLPROGRAMUNIFORM4I64ARBPROC PFN_glProgramUniform4i64ARB;
typedef PFNGLPROGRAMUNIFORM1I64VARBPROC PFN_glProgramUniform1i64vARB;
typedef PFNGLPROGRAMUNIFORM2I64VARBPROC PFN_glProgramUniform2i64vARB;
typedef PFNGLPROGRAMUNIFORM3I64VARBPROC PFN_glProgramUniform3i64vARB;
typedef PFNGLPROGRAMUNIFORM4I64VARBPROC PFN_glProgramUniform4i64vARB;
typedef PFNGLPROGRAMUNIFORM1UI64ARBPROC PFN_glProgramUniform1ui64ARB;
typedef PFNGLPROGRAMUNIFORM2UI64ARBPROC PFN_glProgramUniform2ui64ARB;
typedef PFNGLPROGRAMUNIFORM3UI64ARBPROC PFN_glProgramUniform3ui64ARB;
typedef PFNGLPROGRAMUNIFORM4UI64ARBPROC PFN_glProgramUniform4ui64ARB;
typedef PFNGLPROGRAMUNIFORM1UI64VARBPROC PFN_glProgramUniform1ui64vARB;
typedef PFNGLPROGRAMUNIFORM2UI64VARBPROC PFN_glProgramUniform2ui64vARB;
typedef PFNGLPROGRAMUNIFORM3UI64VARBPROC PFN_glProgramUniform3ui64vARB;
typedef PFNGLPROGRAMUNIFORM4UI64VARBPROC PFN_glProgramUniform4ui64vARB;
typedef PFNGLCOLORTABLEPROC PFN_glColorTable;
typedef PFNGLCOLORTABLEPARAMETERFVPROC PFN_glColorTableParameterfv;
typedef PFNGLCOLORTABLEPARAMETERIVPROC PFN_glColorTableParameteriv;
typedef PFNGLCOPYCOLORTABLEPROC PFN_glCopyColorTable;
typedef PFNGLGETCOLORTABLEPROC PFN_glGetColorTable;
typedef PFNGLGETCOLORTABLEPARAMETERFVPROC PFN_glGetColorTableParameterfv;
typedef PFNGLGETCOLORTABLEPARAMETERIVPROC PFN_glGetColorTableParameteriv;
typedef PFNGLCOLORSUBTABLEPROC PFN_glColorSubTable;
typedef PFNGLCOPYCOLORSUBTABLEPROC PFN_glCopyColorSubTable;
typedef PFNGLCONVOLUTIONFILTER1DPROC PFN_glConvolutionFilter1D;
typedef PFNGLCONVOLUTIONFILTER2DPROC PFN_glConvolutionFilter2D;
typedef PFNGLCONVOLUTIONPARAMETERFPROC PFN_glConvolutionParameterf;
typedef PFNGLCONVOLUTIONPARAMETERFVPROC PFN_glConvolutionParameterfv;
typedef PFNGLCONVOLUTIONPARAMETERIPROC PFN_glConvolutionParameteri;
typedef PFNGLCONVOLUTIONPARAMETERIVPROC PFN_glConvolutionParameteriv;
typedef PFNGLCOPYCONVOLUTIONFILTER1DPROC PFN_glCopyConvolutionFilter1D;
typedef PFNGLCOPYCONVOLUTIONFILTER2DPROC PFN_glCopyConvolutionFilter2D;
typedef PFNGLGETCONVOLUTIONFILTERPROC PFN_glGetConvolutionFilter;
typedef PFNGLGETCONVOLUTIONPARAMETERFVPROC PFN_glGetConvolutionParameterfv;
typedef PFNGLGETCONVOLUTIONPARAMETERIVPROC PFN_glGetConvolutionParameteriv;
typedef PFNGLGETSEPARABLEFILTERPROC PFN_glGetSeparableFilter;
typedef PFNGLSEPARABLEFILTER2DPROC PFN_glSeparableFilter2D;
typedef PFNGLGETHISTOGRAMPROC PFN_glGetHistogram;
typedef PFNGLGETHISTOGRAMPARAMETERFVPROC PFN_glGetHistogramParameterfv;
typedef PFNGLGETHISTOGRAMPARAMETERIVPROC PFN_glGetHistogramParameteriv;
typedef PFNGLGETMINMAXPROC PFN_glGetMinmax;
typedef PFNGLGETMINMAXPARAMETERFVPROC PFN_glGetMinmaxParameterfv;
typedef PFNGLGETMINMAXPARAMETERIVPROC PFN_glGetMinmaxParameteriv;
typedef PFNGLHISTOGRAMPROC PFN_glHistogram;
typedef PFNGLMINMAXPROC PFN_glMinmax;
typedef PFNGLRESETHISTOGRAMPROC PFN_glResetHistogram;
typedef PFNGLRESETMINMAXPROC PFN_glResetMinmax;
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
    PFN_glMultiDrawArraysIndirectCountARB;
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
    PFN_glMultiDrawElementsIndirectCountARB;
typedef PFNGLVERTEXATTRIBDIVISORARBPROC PFN_glVertexAttribDivisorARB;
typedef PFNGLCURRENTPALETTEMATRIXARBPROC PFN_glCurrentPaletteMatrixARB;
typedef PFNGLMATRIXINDEXUBVARBPROC PFN_glMatrixIndexubvARB;
typedef PFNGLMATRIXINDEXUSVARBPROC PFN_glMatrixIndexusvARB;
typedef PFNGLMATRIXINDEXUIVARBPROC PFN_glMatrixIndexuivARB;
typedef PFNGLMATRIXINDEXPOINTERARBPROC PFN_glMatrixIndexPointerARB;
typedef PFNGLSAMPLECOVERAGEARBPROC PFN_glSampleCoverageARB;
typedef PFNGLACTIVETEXTUREARBPROC PFN_glActiveTextureARB;
typedef PFNGLCLIENTACTIVETEXTUREARBPROC PFN_glClientActiveTextureARB;
typedef PFNGLMULTITEXCOORD1DARBPROC PFN_glMultiTexCoord1dARB;
typedef PFNGLMULTITEXCOORD1DVARBPROC PFN_glMultiTexCoord1dvARB;
typedef PFNGLMULTITEXCOORD1FARBPROC PFN_glMultiTexCoord1fARB;
typedef PFNGLMULTITEXCOORD1FVARBPROC PFN_glMultiTexCoord1fvARB;
typedef PFNGLMULTITEXCOORD1IARBPROC PFN_glMultiTexCoord1iARB;
typedef PFNGLMULTITEXCOORD1IVARBPROC PFN_glMultiTexCoord1ivARB;
typedef PFNGLMULTITEXCOORD1SARBPROC PFN_glMultiTexCoord1sARB;
typedef PFNGLMULTITEXCOORD1SVARBPROC PFN_glMultiTexCoord1svARB;
typedef PFNGLMULTITEXCOORD2DARBPROC PFN_glMultiTexCoord2dARB;
typedef PFNGLMULTITEXCOORD2DVARBPROC PFN_glMultiTexCoord2dvARB;
typedef PFNGLMULTITEXCOORD2FARBPROC PFN_glMultiTexCoord2fARB;
typedef PFNGLMULTITEXCOORD2FVARBPROC PFN_glMultiTexCoord2fvARB;
typedef PFNGLMULTITEXCOORD2IARBPROC PFN_glMultiTexCoord2iARB;
typedef PFNGLMULTITEXCOORD2IVARBPROC PFN_glMultiTexCoord2ivARB;
typedef PFNGLMULTITEXCOORD2SARBPROC PFN_glMultiTexCoord2sARB;
typedef PFNGLMULTITEXCOORD2SVARBPROC PFN_glMultiTexCoord2svARB;
typedef PFNGLMULTITEXCOORD3DARBPROC PFN_glMultiTexCoord3dARB;
typedef PFNGLMULTITEXCOORD3DVARBPROC PFN_glMultiTexCoord3dvARB;
typedef PFNGLMULTITEXCOORD3FARBPROC PFN_glMultiTexCoord3fARB;
typedef PFNGLMULTITEXCOORD3FVARBPROC PFN_glMultiTexCoord3fvARB;
typedef PFNGLMULTITEXCOORD3IARBPROC PFN_glMultiTexCoord3iARB;
typedef PFNGLMULTITEXCOORD3IVARBPROC PFN_glMultiTexCoord3ivARB;
typedef PFNGLMULTITEXCOORD3SARBPROC PFN_glMultiTexCoord3sARB;
typedef PFNGLMULTITEXCOORD3SVARBPROC PFN_glMultiTexCoord3svARB;
typedef PFNGLMULTITEXCOORD4DARBPROC PFN_glMultiTexCoord4dARB;
typedef PFNGLMULTITEXCOORD4DVARBPROC PFN_glMultiTexCoord4dvARB;
typedef PFNGLMULTITEXCOORD4FARBPROC PFN_glMultiTexCoord4fARB;
typedef PFNGLMULTITEXCOORD4FVARBPROC PFN_glMultiTexCoord4fvARB;
typedef PFNGLMULTITEXCOORD4IARBPROC PFN_glMultiTexCoord4iARB;
typedef PFNGLMULTITEXCOORD4IVARBPROC PFN_glMultiTexCoord4ivARB;
typedef PFNGLMULTITEXCOORD4SARBPROC PFN_glMultiTexCoord4sARB;
typedef PFNGLMULTITEXCOORD4SVARBPROC PFN_glMultiTexCoord4svARB;
typedef PFNGLGENQUERIESARBPROC PFN_glGenQueriesARB;
typedef PFNGLDELETEQUERIESARBPROC PFN_glDeleteQueriesARB;
typedef PFNGLISQUERYARBPROC PFN_glIsQueryARB;
typedef PFNGLBEGINQUERYARBPROC PFN_glBeginQueryARB;
typedef PFNGLENDQUERYARBPROC PFN_glEndQueryARB;
typedef PFNGLGETQUERYIVARBPROC PFN_glGetQueryivARB;
typedef PFNGLGETQUERYOBJECTIVARBPROC PFN_glGetQueryObjectivARB;
typedef PFNGLGETQUERYOBJECTUIVARBPROC PFN_glGetQueryObjectuivARB;
typedef PFNGLMAXSHADERCOMPILERTHREADSARBPROC PFN_glMaxShaderCompilerThreadsARB;
typedef PFNGLPOINTPARAMETERFARBPROC PFN_glPointParameterfARB;
typedef PFNGLPOINTPARAMETERFVARBPROC PFN_glPointParameterfvARB;
typedef PFNGLGETGRAPHICSRESETSTATUSARBPROC PFN_glGetGraphicsResetStatusARB;
typedef PFNGLGETNTEXIMAGEARBPROC PFN_glGetnTexImageARB;
typedef PFNGLREADNPIXELSARBPROC PFN_glReadnPixelsARB;
typedef PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC PFN_glGetnCompressedTexImageARB;
typedef PFNGLGETNUNIFORMFVARBPROC PFN_glGetnUniformfvARB;
typedef PFNGLGETNUNIFORMIVARBPROC PFN_glGetnUniformivARB;
typedef PFNGLGETNUNIFORMUIVARBPROC PFN_glGetnUniformuivARB;
typedef PFNGLGETNUNIFORMDVARBPROC PFN_glGetnUniformdvARB;
typedef PFNGLGETNMAPDVARBPROC PFN_glGetnMapdvARB;
typedef PFNGLGETNMAPFVARBPROC PFN_glGetnMapfvARB;
typedef PFNGLGETNMAPIVARBPROC PFN_glGetnMapivARB;
typedef PFNGLGETNPIXELMAPFVARBPROC PFN_glGetnPixelMapfvARB;
typedef PFNGLGETNPIXELMAPUIVARBPROC PFN_glGetnPixelMapuivARB;
typedef PFNGLGETNPIXELMAPUSVARBPROC PFN_glGetnPixelMapusvARB;
typedef PFNGLGETNPOLYGONSTIPPLEARBPROC PFN_glGetnPolygonStippleARB;
typedef PFNGLGETNCOLORTABLEARBPROC PFN_glGetnColorTableARB;
typedef PFNGLGETNCONVOLUTIONFILTERARBPROC PFN_glGetnConvolutionFilterARB;
typedef PFNGLGETNSEPARABLEFILTERARBPROC PFN_glGetnSeparableFilterARB;
typedef PFNGLGETNHISTOGRAMARBPROC PFN_glGetnHistogramARB;
typedef PFNGLGETNMINMAXARBPROC PFN_glGetnMinmaxARB;
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
    PFN_glFramebufferSampleLocationsfvARB;
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
    PFN_glNamedFramebufferSampleLocationsfvARB;
typedef PFNGLEVALUATEDEPTHVALUESARBPROC PFN_glEvaluateDepthValuesARB;
typedef PFNGLMINSAMPLESHADINGARBPROC PFN_glMinSampleShadingARB;
typedef PFNGLDELETEOBJECTARBPROC PFN_glDeleteObjectARB;
typedef PFNGLGETHANDLEARBPROC PFN_glGetHandleARB;
typedef PFNGLDETACHOBJECTARBPROC PFN_glDetachObjectARB;
typedef PFNGLCREATESHADEROBJECTARBPROC PFN_glCreateShaderObjectARB;
typedef PFNGLSHADERSOURCEARBPROC PFN_glShaderSourceARB;
typedef PFNGLCOMPILESHADERARBPROC PFN_glCompileShaderARB;
typedef PFNGLCREATEPROGRAMOBJECTARBPROC PFN_glCreateProgramObjectARB;
typedef PFNGLATTACHOBJECTARBPROC PFN_glAttachObjectARB;
typedef PFNGLLINKPROGRAMARBPROC PFN_glLinkProgramARB;
typedef PFNGLUSEPROGRAMOBJECTARBPROC PFN_glUseProgramObjectARB;
typedef PFNGLVALIDATEPROGRAMARBPROC PFN_glValidateProgramARB;
typedef PFNGLUNIFORM1FARBPROC PFN_glUniform1fARB;
typedef PFNGLUNIFORM2FARBPROC PFN_glUniform2fARB;
typedef PFNGLUNIFORM3FARBPROC PFN_glUniform3fARB;
typedef PFNGLUNIFORM4FARBPROC PFN_glUniform4fARB;
typedef PFNGLUNIFORM1IARBPROC PFN_glUniform1iARB;
typedef PFNGLUNIFORM2IARBPROC PFN_glUniform2iARB;
typedef PFNGLUNIFORM3IARBPROC PFN_glUniform3iARB;
typedef PFNGLUNIFORM4IARBPROC PFN_glUniform4iARB;
typedef PFNGLUNIFORM1FVARBPROC PFN_glUniform1fvARB;
typedef PFNGLUNIFORM2FVARBPROC PFN_glUniform2fvARB;
typedef PFNGLUNIFORM3FVARBPROC PFN_glUniform3fvARB;
typedef PFNGLUNIFORM4FVARBPROC PFN_glUniform4fvARB;
typedef PFNGLUNIFORM1IVARBPROC PFN_glUniform1ivARB;
typedef PFNGLUNIFORM2IVARBPROC PFN_glUniform2ivARB;
typedef PFNGLUNIFORM3IVARBPROC PFN_glUniform3ivARB;
typedef PFNGLUNIFORM4IVARBPROC PFN_glUniform4ivARB;
typedef PFNGLUNIFORMMATRIX2FVARBPROC PFN_glUniformMatrix2fvARB;
typedef PFNGLUNIFORMMATRIX3FVARBPROC PFN_glUniformMatrix3fvARB;
typedef PFNGLUNIFORMMATRIX4FVARBPROC PFN_glUniformMatrix4fvARB;
typedef PFNGLGETOBJECTPARAMETERFVARBPROC PFN_glGetObjectParameterfvARB;
typedef PFNGLGETOBJECTPARAMETERIVARBPROC PFN_glGetObjectParameterivARB;
typedef PFNGLGETINFOLOGARBPROC PFN_glGetInfoLogARB;
typedef PFNGLGETATTACHEDOBJECTSARBPROC PFN_glGetAttachedObjectsARB;
typedef PFNGLGETUNIFORMLOCATIONARBPROC PFN_glGetUniformLocationARB;
typedef PFNGLGETACTIVEUNIFORMARBPROC PFN_glGetActiveUniformARB;
typedef PFNGLGETUNIFORMFVARBPROC PFN_glGetUniformfvARB;
typedef PFNGLGETUNIFORMIVARBPROC PFN_glGetUniformivARB;
typedef PFNGLGETSHADERSOURCEARBPROC PFN_glGetShaderSourceARB;
typedef PFNGLNAMEDSTRINGARBPROC PFN_glNamedStringARB;
typedef PFNGLDELETENAMEDSTRINGARBPROC PFN_glDeleteNamedStringARB;
typedef PFNGLCOMPILESHADERINCLUDEARBPROC PFN_glCompileShaderIncludeARB;
typedef PFNGLISNAMEDSTRINGARBPROC PFN_glIsNamedStringARB;
typedef PFNGLGETNAMEDSTRINGARBPROC PFN_glGetNamedStringARB;
typedef PFNGLGETNAMEDSTRINGIVARBPROC PFN_glGetNamedStringivARB;
typedef PFNGLBUFFERPAGECOMMITMENTARBPROC PFN_glBufferPageCommitmentARB;
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC
    PFN_glNamedBufferPageCommitmentEXT;
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC
    PFN_glNamedBufferPageCommitmentARB;
typedef PFNGLTEXPAGECOMMITMENTARBPROC PFN_glTexPageCommitmentARB;
typedef PFNGLTEXBUFFERARBPROC PFN_glTexBufferARB;
typedef PFNGLCOMPRESSEDTEXIMAGE3DARBPROC PFN_glCompressedTexImage3DARB;
typedef PFNGLCOMPRESSEDTEXIMAGE2DARBPROC PFN_glCompressedTexImage2DARB;
typedef PFNGLCOMPRESSEDTEXIMAGE1DARBPROC PFN_glCompressedTexImage1DARB;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC PFN_glCompressedTexSubImage3DARB;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC PFN_glCompressedTexSubImage2DARB;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC PFN_glCompressedTexSubImage1DARB;
typedef PFNGLGETCOMPRESSEDTEXIMAGEARBPROC PFN_glGetCompressedTexImageARB;
typedef PFNGLLOADTRANSPOSEMATRIXFARBPROC PFN_glLoadTransposeMatrixfARB;
typedef PFNGLLOADTRANSPOSEMATRIXDARBPROC PFN_glLoadTransposeMatrixdARB;
typedef PFNGLMULTTRANSPOSEMATRIXFARBPROC PFN_glMultTransposeMatrixfARB;
typedef PFNGLMULTTRANSPOSEMATRIXDARBPROC PFN_glMultTransposeMatrixdARB;
typedef PFNGLWEIGHTBVARBPROC PFN_glWeightbvARB;
typedef PFNGLWEIGHTSVARBPROC PFN_glWeightsvARB;
typedef PFNGLWEIGHTIVARBPROC PFN_glWeightivARB;
typedef PFNGLWEIGHTFVARBPROC PFN_glWeightfvARB;
typedef PFNGLWEIGHTDVARBPROC PFN_glWeightdvARB;
typedef PFNGLWEIGHTUBVARBPROC PFN_glWeightubvARB;
typedef PFNGLWEIGHTUSVARBPROC PFN_glWeightusvARB;
typedef PFNGLWEIGHTUIVARBPROC PFN_glWeightuivARB;
typedef PFNGLWEIGHTPOINTERARBPROC PFN_glWeightPointerARB;
typedef PFNGLVERTEXBLENDARBPROC PFN_glVertexBlendARB;
typedef PFNGLBINDBUFFERARBPROC PFN_glBindBufferARB;
typedef PFNGLDELETEBUFFERSARBPROC PFN_glDeleteBuffersARB;
typedef PFNGLGENBUFFERSARBPROC PFN_glGenBuffersARB;
typedef PFNGLISBUFFERARBPROC PFN_glIsBufferARB;
typedef PFNGLBUFFERDATAARBPROC PFN_glBufferDataARB;
typedef PFNGLBUFFERSUBDATAARBPROC PFN_glBufferSubDataARB;
typedef PFNGLGETBUFFERSUBDATAARBPROC PFN_glGetBufferSubDataARB;
typedef PFNGLMAPBUFFERARBPROC PFN_glMapBufferARB;
typedef PFNGLUNMAPBUFFERARBPROC PFN_glUnmapBufferARB;
typedef PFNGLGETBUFFERPARAMETERIVARBPROC PFN_glGetBufferParameterivARB;
typedef PFNGLGETBUFFERPOINTERVARBPROC PFN_glGetBufferPointervARB;
typedef PFNGLVERTEXATTRIB1DARBPROC PFN_glVertexAttrib1dARB;
typedef PFNGLVERTEXATTRIB1DVARBPROC PFN_glVertexAttrib1dvARB;
typedef PFNGLVERTEXATTRIB1FARBPROC PFN_glVertexAttrib1fARB;
typedef PFNGLVERTEXATTRIB1FVARBPROC PFN_glVertexAttrib1fvARB;
typedef PFNGLVERTEXATTRIB1SARBPROC PFN_glVertexAttrib1sARB;
typedef PFNGLVERTEXATTRIB1SVARBPROC PFN_glVertexAttrib1svARB;
typedef PFNGLVERTEXATTRIB2DARBPROC PFN_glVertexAttrib2dARB;
typedef PFNGLVERTEXATTRIB2DVARBPROC PFN_glVertexAttrib2dvARB;
typedef PFNGLVERTEXATTRIB2FARBPROC PFN_glVertexAttrib2fARB;
typedef PFNGLVERTEXATTRIB2FVARBPROC PFN_glVertexAttrib2fvARB;
typedef PFNGLVERTEXATTRIB2SARBPROC PFN_glVertexAttrib2sARB;
typedef PFNGLVERTEXATTRIB2SVARBPROC PFN_glVertexAttrib2svARB;
typedef PFNGLVERTEXATTRIB3DARBPROC PFN_glVertexAttrib3dARB;
typedef PFNGLVERTEXATTRIB3DVARBPROC PFN_glVertexAttrib3dvARB;
typedef PFNGLVERTEXATTRIB3FARBPROC PFN_glVertexAttrib3fARB;
typedef PFNGLVERTEXATTRIB3FVARBPROC PFN_glVertexAttrib3fvARB;
typedef PFNGLVERTEXATTRIB3SARBPROC PFN_glVertexAttrib3sARB;
typedef PFNGLVERTEXATTRIB3SVARBPROC PFN_glVertexAttrib3svARB;
typedef PFNGLVERTEXATTRIB4NBVARBPROC PFN_glVertexAttrib4NbvARB;
typedef PFNGLVERTEXATTRIB4NIVARBPROC PFN_glVertexAttrib4NivARB;
typedef PFNGLVERTEXATTRIB4NSVARBPROC PFN_glVertexAttrib4NsvARB;
typedef PFNGLVERTEXATTRIB4NUBARBPROC PFN_glVertexAttrib4NubARB;
typedef PFNGLVERTEXATTRIB4NUBVARBPROC PFN_glVertexAttrib4NubvARB;
typedef PFNGLVERTEXATTRIB4NUIVARBPROC PFN_glVertexAttrib4NuivARB;
typedef PFNGLVERTEXATTRIB4NUSVARBPROC PFN_glVertexAttrib4NusvARB;
typedef PFNGLVERTEXATTRIB4BVARBPROC PFN_glVertexAttrib4bvARB;
typedef PFNGLVERTEXATTRIB4DARBPROC PFN_glVertexAttrib4dARB;
typedef PFNGLVERTEXATTRIB4DVARBPROC PFN_glVertexAttrib4dvARB;
typedef PFNGLVERTEXATTRIB4FARBPROC PFN_glVertexAttrib4fARB;
typedef PFNGLVERTEXATTRIB4FVARBPROC PFN_glVertexAttrib4fvARB;
typedef PFNGLVERTEXATTRIB4IVARBPROC PFN_glVertexAttrib4ivARB;
typedef PFNGLVERTEXATTRIB4SARBPROC PFN_glVertexAttrib4sARB;
typedef PFNGLVERTEXATTRIB4SVARBPROC PFN_glVertexAttrib4svARB;
typedef PFNGLVERTEXATTRIB4UBVARBPROC PFN_glVertexAttrib4ubvARB;
typedef PFNGLVERTEXATTRIB4UIVARBPROC PFN_glVertexAttrib4uivARB;
typedef PFNGLVERTEXATTRIB4USVARBPROC PFN_glVertexAttrib4usvARB;
typedef PFNGLVERTEXATTRIBPOINTERARBPROC PFN_glVertexAttribPointerARB;
typedef PFNGLENABLEVERTEXATTRIBARRAYARBPROC PFN_glEnableVertexAttribArrayARB;
typedef PFNGLDISABLEVERTEXATTRIBARRAYARBPROC PFN_glDisableVertexAttribArrayARB;
typedef PFNGLGETVERTEXATTRIBDVARBPROC PFN_glGetVertexAttribdvARB;
typedef PFNGLGETVERTEXATTRIBFVARBPROC PFN_glGetVertexAttribfvARB;
typedef PFNGLGETVERTEXATTRIBIVARBPROC PFN_glGetVertexAttribivARB;
typedef PFNGLGETVERTEXATTRIBPOINTERVARBPROC PFN_glGetVertexAttribPointervARB;
typedef PFNGLBINDATTRIBLOCATIONARBPROC PFN_glBindAttribLocationARB;
typedef PFNGLGETACTIVEATTRIBARBPROC PFN_glGetActiveAttribARB;
typedef PFNGLGETATTRIBLOCATIONARBPROC PFN_glGetAttribLocationARB;
typedef PFNGLDEPTHRANGEARRAYDVNVPROC PFN_glDepthRangeArraydvNV;
typedef PFNGLDEPTHRANGEINDEXEDDNVPROC PFN_glDepthRangeIndexeddNV;
typedef PFNGLWINDOWPOS2DARBPROC PFN_glWindowPos2dARB;
typedef PFNGLWINDOWPOS2DVARBPROC PFN_glWindowPos2dvARB;
typedef PFNGLWINDOWPOS2FARBPROC PFN_glWindowPos2fARB;
typedef PFNGLWINDOWPOS2FVARBPROC PFN_glWindowPos2fvARB;
typedef PFNGLWINDOWPOS2IARBPROC PFN_glWindowPos2iARB;
typedef PFNGLWINDOWPOS2IVARBPROC PFN_glWindowPos2ivARB;
typedef PFNGLWINDOWPOS2SARBPROC PFN_glWindowPos2sARB;
typedef PFNGLWINDOWPOS2SVARBPROC PFN_glWindowPos2svARB;
typedef PFNGLWINDOWPOS3DARBPROC PFN_glWindowPos3dARB;
typedef PFNGLWINDOWPOS3DVARBPROC PFN_glWindowPos3dvARB;
typedef PFNGLWINDOWPOS3FARBPROC PFN_glWindowPos3fARB;
typedef PFNGLWINDOWPOS3FVARBPROC PFN_glWindowPos3fvARB;
typedef PFNGLWINDOWPOS3IARBPROC PFN_glWindowPos3iARB;
typedef PFNGLWINDOWPOS3IVARBPROC PFN_glWindowPos3ivARB;
typedef PFNGLWINDOWPOS3SARBPROC PFN_glWindowPos3sARB;
typedef PFNGLWINDOWPOS3SVARBPROC PFN_glWindowPos3svARB;
typedef PFNGLBLENDBARRIERKHRPROC PFN_glBlendBarrierKHR;
typedef PFNGLMAXSHADERCOMPILERTHREADSKHRPROC PFN_glMaxShaderCompilerThreadsKHR;
typedef PFNGLMULTITEXCOORD1BOESPROC PFN_glMultiTexCoord1bOES;
typedef PFNGLMULTITEXCOORD1BVOESPROC PFN_glMultiTexCoord1bvOES;
typedef PFNGLMULTITEXCOORD2BOESPROC PFN_glMultiTexCoord2bOES;
typedef PFNGLMULTITEXCOORD2BVOESPROC PFN_glMultiTexCoord2bvOES;
typedef PFNGLMULTITEXCOORD3BOESPROC PFN_glMultiTexCoord3bOES;
typedef PFNGLMULTITEXCOORD3BVOESPROC PFN_glMultiTexCoord3bvOES;
typedef PFNGLMULTITEXCOORD4BOESPROC PFN_glMultiTexCoord4bOES;
typedef PFNGLMULTITEXCOORD4BVOESPROC PFN_glMultiTexCoord4bvOES;
typedef PFNGLTEXCOORD1BOESPROC PFN_glTexCoord1bOES;
typedef PFNGLTEXCOORD1BVOESPROC PFN_glTexCoord1bvOES;
typedef PFNGLTEXCOORD2BOESPROC PFN_glTexCoord2bOES;
typedef PFNGLTEXCOORD2BVOESPROC PFN_glTexCoord2bvOES;
typedef PFNGLTEXCOORD3BOESPROC PFN_glTexCoord3bOES;
typedef PFNGLTEXCOORD3BVOESPROC PFN_glTexCoord3bvOES;
typedef PFNGLTEXCOORD4BOESPROC PFN_glTexCoord4bOES;
typedef PFNGLTEXCOORD4BVOESPROC PFN_glTexCoord4bvOES;
typedef PFNGLVERTEX2BOESPROC PFN_glVertex2bOES;
typedef PFNGLVERTEX2BVOESPROC PFN_glVertex2bvOES;
typedef PFNGLVERTEX3BOESPROC PFN_glVertex3bOES;
typedef PFNGLVERTEX3BVOESPROC PFN_glVertex3bvOES;
typedef PFNGLVERTEX4BOESPROC PFN_glVertex4bOES;
typedef PFNGLVERTEX4BVOESPROC PFN_glVertex4bvOES;
typedef PFNGLALPHAFUNCXOESPROC PFN_glAlphaFuncxOES;
typedef PFNGLCLEARCOLORXOESPROC PFN_glClearColorxOES;
typedef PFNGLCLEARDEPTHXOESPROC PFN_glClearDepthxOES;
typedef PFNGLCLIPPLANEXOESPROC PFN_glClipPlanexOES;
typedef PFNGLCOLOR4XOESPROC PFN_glColor4xOES;
typedef PFNGLDEPTHRANGEXOESPROC PFN_glDepthRangexOES;
typedef PFNGLFOGXOESPROC PFN_glFogxOES;
typedef PFNGLFOGXVOESPROC PFN_glFogxvOES;
typedef PFNGLFRUSTUMXOESPROC PFN_glFrustumxOES;
typedef PFNGLGETCLIPPLANEXOESPROC PFN_glGetClipPlanexOES;
typedef PFNGLGETFIXEDVOESPROC PFN_glGetFixedvOES;
typedef PFNGLGETTEXENVXVOESPROC PFN_glGetTexEnvxvOES;
typedef PFNGLGETTEXPARAMETERXVOESPROC PFN_glGetTexParameterxvOES;
typedef PFNGLLIGHTMODELXOESPROC PFN_glLightModelxOES;
typedef PFNGLLIGHTMODELXVOESPROC PFN_glLightModelxvOES;
typedef PFNGLLIGHTXOESPROC PFN_glLightxOES;
typedef PFNGLLIGHTXVOESPROC PFN_glLightxvOES;
typedef PFNGLLINEWIDTHXOESPROC PFN_glLineWidthxOES;
typedef PFNGLLOADMATRIXXOESPROC PFN_glLoadMatrixxOES;
typedef PFNGLMATERIALXOESPROC PFN_glMaterialxOES;
typedef PFNGLMATERIALXVOESPROC PFN_glMaterialxvOES;
typedef PFNGLMULTMATRIXXOESPROC PFN_glMultMatrixxOES;
typedef PFNGLMULTITEXCOORD4XOESPROC PFN_glMultiTexCoord4xOES;
typedef PFNGLNORMAL3XOESPROC PFN_glNormal3xOES;
typedef PFNGLORTHOXOESPROC PFN_glOrthoxOES;
typedef PFNGLPOINTPARAMETERXVOESPROC PFN_glPointParameterxvOES;
typedef PFNGLPOINTSIZEXOESPROC PFN_glPointSizexOES;
typedef PFNGLPOLYGONOFFSETXOESPROC PFN_glPolygonOffsetxOES;
typedef PFNGLROTATEXOESPROC PFN_glRotatexOES;
typedef PFNGLSCALEXOESPROC PFN_glScalexOES;
typedef PFNGLTEXENVXOESPROC PFN_glTexEnvxOES;
typedef PFNGLTEXENVXVOESPROC PFN_glTexEnvxvOES;
typedef PFNGLTEXPARAMETERXOESPROC PFN_glTexParameterxOES;
typedef PFNGLTEXPARAMETERXVOESPROC PFN_glTexParameterxvOES;
typedef PFNGLTRANSLATEXOESPROC PFN_glTranslatexOES;
typedef PFNGLACCUMXOESPROC PFN_glAccumxOES;
typedef PFNGLBITMAPXOESPROC PFN_glBitmapxOES;
typedef PFNGLBLENDCOLORXOESPROC PFN_glBlendColorxOES;
typedef PFNGLCLEARACCUMXOESPROC PFN_glClearAccumxOES;
typedef PFNGLCOLOR3XOESPROC PFN_glColor3xOES;
typedef PFNGLCOLOR3XVOESPROC PFN_glColor3xvOES;
typedef PFNGLCOLOR4XVOESPROC PFN_glColor4xvOES;
typedef PFNGLCONVOLUTIONPARAMETERXOESPROC PFN_glConvolutionParameterxOES;
typedef PFNGLCONVOLUTIONPARAMETERXVOESPROC PFN_glConvolutionParameterxvOES;
typedef PFNGLEVALCOORD1XOESPROC PFN_glEvalCoord1xOES;
typedef PFNGLEVALCOORD1XVOESPROC PFN_glEvalCoord1xvOES;
typedef PFNGLEVALCOORD2XOESPROC PFN_glEvalCoord2xOES;
typedef PFNGLEVALCOORD2XVOESPROC PFN_glEvalCoord2xvOES;
typedef PFNGLFEEDBACKBUFFERXOESPROC PFN_glFeedbackBufferxOES;
typedef PFNGLGETCONVOLUTIONPARAMETERXVOESPROC
    PFN_glGetConvolutionParameterxvOES;
typedef PFNGLGETHISTOGRAMPARAMETERXVOESPROC PFN_glGetHistogramParameterxvOES;
typedef PFNGLGETLIGHTXOESPROC PFN_glGetLightxOES;
typedef PFNGLGETMAPXVOESPROC PFN_glGetMapxvOES;
typedef PFNGLGETMATERIALXOESPROC PFN_glGetMaterialxOES;
typedef PFNGLGETPIXELMAPXVPROC PFN_glGetPixelMapxv;
typedef PFNGLGETTEXGENXVOESPROC PFN_glGetTexGenxvOES;
typedef PFNGLGETTEXLEVELPARAMETERXVOESPROC PFN_glGetTexLevelParameterxvOES;
typedef PFNGLINDEXXOESPROC PFN_glIndexxOES;
typedef PFNGLINDEXXVOESPROC PFN_glIndexxvOES;
typedef PFNGLLOADTRANSPOSEMATRIXXOESPROC PFN_glLoadTransposeMatrixxOES;
typedef PFNGLMAP1XOESPROC PFN_glMap1xOES;
typedef PFNGLMAP2XOESPROC PFN_glMap2xOES;
typedef PFNGLMAPGRID1XOESPROC PFN_glMapGrid1xOES;
typedef PFNGLMAPGRID2XOESPROC PFN_glMapGrid2xOES;
typedef PFNGLMULTTRANSPOSEMATRIXXOESPROC PFN_glMultTransposeMatrixxOES;
typedef PFNGLMULTITEXCOORD1XOESPROC PFN_glMultiTexCoord1xOES;
typedef PFNGLMULTITEXCOORD1XVOESPROC PFN_glMultiTexCoord1xvOES;
typedef PFNGLMULTITEXCOORD2XOESPROC PFN_glMultiTexCoord2xOES;
typedef PFNGLMULTITEXCOORD2XVOESPROC PFN_glMultiTexCoord2xvOES;
typedef PFNGLMULTITEXCOORD3XOESPROC PFN_glMultiTexCoord3xOES;
typedef PFNGLMULTITEXCOORD3XVOESPROC PFN_glMultiTexCoord3xvOES;
typedef PFNGLMULTITEXCOORD4XVOESPROC PFN_glMultiTexCoord4xvOES;
typedef PFNGLNORMAL3XVOESPROC PFN_glNormal3xvOES;
typedef PFNGLPASSTHROUGHXOESPROC PFN_glPassThroughxOES;
typedef PFNGLPIXELMAPXPROC PFN_glPixelMapx;
typedef PFNGLPIXELSTOREXPROC PFN_glPixelStorex;
typedef PFNGLPIXELTRANSFERXOESPROC PFN_glPixelTransferxOES;
typedef PFNGLPIXELZOOMXOESPROC PFN_glPixelZoomxOES;
typedef PFNGLPRIORITIZETEXTURESXOESPROC PFN_glPrioritizeTexturesxOES;
typedef PFNGLRASTERPOS2XOESPROC PFN_glRasterPos2xOES;
typedef PFNGLRASTERPOS2XVOESPROC PFN_glRasterPos2xvOES;
typedef PFNGLRASTERPOS3XOESPROC PFN_glRasterPos3xOES;
typedef PFNGLRASTERPOS3XVOESPROC PFN_glRasterPos3xvOES;
typedef PFNGLRASTERPOS4XOESPROC PFN_glRasterPos4xOES;
typedef PFNGLRASTERPOS4XVOESPROC PFN_glRasterPos4xvOES;
typedef PFNGLRECTXOESPROC PFN_glRectxOES;
typedef PFNGLRECTXVOESPROC PFN_glRectxvOES;
typedef PFNGLTEXCOORD1XOESPROC PFN_glTexCoord1xOES;
typedef PFNGLTEXCOORD1XVOESPROC PFN_glTexCoord1xvOES;
typedef PFNGLTEXCOORD2XOESPROC PFN_glTexCoord2xOES;
typedef PFNGLTEXCOORD2XVOESPROC PFN_glTexCoord2xvOES;
typedef PFNGLTEXCOORD3XOESPROC PFN_glTexCoord3xOES;
typedef PFNGLTEXCOORD3XVOESPROC PFN_glTexCoord3xvOES;
typedef PFNGLTEXCOORD4XOESPROC PFN_glTexCoord4xOES;
typedef PFNGLTEXCOORD4XVOESPROC PFN_glTexCoord4xvOES;
typedef PFNGLTEXGENXOESPROC PFN_glTexGenxOES;
typedef PFNGLTEXGENXVOESPROC PFN_glTexGenxvOES;
typedef PFNGLVERTEX2XOESPROC PFN_glVertex2xOES;
typedef PFNGLVERTEX2XVOESPROC PFN_glVertex2xvOES;
typedef PFNGLVERTEX3XOESPROC PFN_glVertex3xOES;
typedef PFNGLVERTEX3XVOESPROC PFN_glVertex3xvOES;
typedef PFNGLVERTEX4XOESPROC PFN_glVertex4xOES;
typedef PFNGLVERTEX4XVOESPROC PFN_glVertex4xvOES;
typedef PFNGLQUERYMATRIXXOESPROC PFN_glQueryMatrixxOES;
typedef PFNGLCLEARDEPTHFOESPROC PFN_glClearDepthfOES;
typedef PFNGLCLIPPLANEFOESPROC PFN_glClipPlanefOES;
typedef PFNGLDEPTHRANGEFOESPROC PFN_glDepthRangefOES;
typedef PFNGLFRUSTUMFOESPROC PFN_glFrustumfOES;
typedef PFNGLGETCLIPPLANEFOESPROC PFN_glGetClipPlanefOES;
typedef PFNGLORTHOFOESPROC PFN_glOrthofOES;
typedef PFNGLTBUFFERMASK3DFXPROC PFN_glTbufferMask3DFX;
typedef PFNGLDEBUGMESSAGEENABLEAMDPROC PFN_glDebugMessageEnableAMD;
typedef PFNGLDEBUGMESSAGEINSERTAMDPROC PFN_glDebugMessageInsertAMD;
typedef PFNGLDEBUGMESSAGECALLBACKAMDPROC PFN_glDebugMessageCallbackAMD;
typedef PFNGLGETDEBUGMESSAGELOGAMDPROC PFN_glGetDebugMessageLogAMD;
typedef PFNGLBLENDFUNCINDEXEDAMDPROC PFN_glBlendFuncIndexedAMD;
typedef PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC PFN_glBlendFuncSeparateIndexedAMD;
typedef PFNGLBLENDEQUATIONINDEXEDAMDPROC PFN_glBlendEquationIndexedAMD;
typedef PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
    PFN_glBlendEquationSeparateIndexedAMD;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC
    PFN_glRenderbufferStorageMultisampleAdvancedAMD;
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC
    PFN_glNamedRenderbufferStorageMultisampleAdvancedAMD;
typedef PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC
    PFN_glFramebufferSamplePositionsfvAMD;
typedef PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC
    PFN_glNamedFramebufferSamplePositionsfvAMD;
typedef PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC
    PFN_glGetFramebufferParameterfvAMD;
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC
    PFN_glGetNamedFramebufferParameterfvAMD;
typedef PFNGLUNIFORM1I64NVPROC PFN_glUniform1i64NV;
typedef PFNGLUNIFORM2I64NVPROC PFN_glUniform2i64NV;
typedef PFNGLUNIFORM3I64NVPROC PFN_glUniform3i64NV;
typedef PFNGLUNIFORM4I64NVPROC PFN_glUniform4i64NV;
typedef PFNGLUNIFORM1I64VNVPROC PFN_glUniform1i64vNV;
typedef PFNGLUNIFORM2I64VNVPROC PFN_glUniform2i64vNV;
typedef PFNGLUNIFORM3I64VNVPROC PFN_glUniform3i64vNV;
typedef PFNGLUNIFORM4I64VNVPROC PFN_glUniform4i64vNV;
typedef PFNGLUNIFORM1UI64NVPROC PFN_glUniform1ui64NV;
typedef PFNGLUNIFORM2UI64NVPROC PFN_glUniform2ui64NV;
typedef PFNGLUNIFORM3UI64NVPROC PFN_glUniform3ui64NV;
typedef PFNGLUNIFORM4UI64NVPROC PFN_glUniform4ui64NV;
typedef PFNGLUNIFORM1UI64VNVPROC PFN_glUniform1ui64vNV;
typedef PFNGLUNIFORM2UI64VNVPROC PFN_glUniform2ui64vNV;
typedef PFNGLUNIFORM3UI64VNVPROC PFN_glUniform3ui64vNV;
typedef PFNGLUNIFORM4UI64VNVPROC PFN_glUniform4ui64vNV;
typedef PFNGLGETUNIFORMI64VNVPROC PFN_glGetUniformi64vNV;
typedef PFNGLGETUNIFORMUI64VNVPROC PFN_glGetUniformui64vNV;
typedef PFNGLPROGRAMUNIFORM1I64NVPROC PFN_glProgramUniform1i64NV;
typedef PFNGLPROGRAMUNIFORM2I64NVPROC PFN_glProgramUniform2i64NV;
typedef PFNGLPROGRAMUNIFORM3I64NVPROC PFN_glProgramUniform3i64NV;
typedef PFNGLPROGRAMUNIFORM4I64NVPROC PFN_glProgramUniform4i64NV;
typedef PFNGLPROGRAMUNIFORM1I64VNVPROC PFN_glProgramUniform1i64vNV;
typedef PFNGLPROGRAMUNIFORM2I64VNVPROC PFN_glProgramUniform2i64vNV;
typedef PFNGLPROGRAMUNIFORM3I64VNVPROC PFN_glProgramUniform3i64vNV;
typedef PFNGLPROGRAMUNIFORM4I64VNVPROC PFN_glProgramUniform4i64vNV;
typedef PFNGLPROGRAMUNIFORM1UI64NVPROC PFN_glProgramUniform1ui64NV;
typedef PFNGLPROGRAMUNIFORM2UI64NVPROC PFN_glProgramUniform2ui64NV;
typedef PFNGLPROGRAMUNIFORM3UI64NVPROC PFN_glProgramUniform3ui64NV;
typedef PFNGLPROGRAMUNIFORM4UI64NVPROC PFN_glProgramUniform4ui64NV;
typedef PFNGLPROGRAMUNIFORM1UI64VNVPROC PFN_glProgramUniform1ui64vNV;
typedef PFNGLPROGRAMUNIFORM2UI64VNVPROC PFN_glProgramUniform2ui64vNV;
typedef PFNGLPROGRAMUNIFORM3UI64VNVPROC PFN_glProgramUniform3ui64vNV;
typedef PFNGLPROGRAMUNIFORM4UI64VNVPROC PFN_glProgramUniform4ui64vNV;
typedef PFNGLVERTEXATTRIBPARAMETERIAMDPROC PFN_glVertexAttribParameteriAMD;
typedef PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC PFN_glMultiDrawArraysIndirectAMD;
typedef PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
    PFN_glMultiDrawElementsIndirectAMD;
typedef PFNGLGENNAMESAMDPROC PFN_glGenNamesAMD;
typedef PFNGLDELETENAMESAMDPROC PFN_glDeleteNamesAMD;
typedef PFNGLISNAMEAMDPROC PFN_glIsNameAMD;
typedef PFNGLQUERYOBJECTPARAMETERUIAMDPROC PFN_glQueryObjectParameteruiAMD;
typedef PFNGLGETPERFMONITORGROUPSAMDPROC PFN_glGetPerfMonitorGroupsAMD;
typedef PFNGLGETPERFMONITORCOUNTERSAMDPROC PFN_glGetPerfMonitorCountersAMD;
typedef PFNGLGETPERFMONITORGROUPSTRINGAMDPROC
    PFN_glGetPerfMonitorGroupStringAMD;
typedef PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
    PFN_glGetPerfMonitorCounterStringAMD;
typedef PFNGLGETPERFMONITORCOUNTERINFOAMDPROC
    PFN_glGetPerfMonitorCounterInfoAMD;
typedef PFNGLGENPERFMONITORSAMDPROC PFN_glGenPerfMonitorsAMD;
typedef PFNGLDELETEPERFMONITORSAMDPROC PFN_glDeletePerfMonitorsAMD;
typedef PFNGLSELECTPERFMONITORCOUNTERSAMDPROC
    PFN_glSelectPerfMonitorCountersAMD;
typedef PFNGLBEGINPERFMONITORAMDPROC PFN_glBeginPerfMonitorAMD;
typedef PFNGLENDPERFMONITORAMDPROC PFN_glEndPerfMonitorAMD;
typedef PFNGLGETPERFMONITORCOUNTERDATAAMDPROC
    PFN_glGetPerfMonitorCounterDataAMD;
typedef PFNGLSETMULTISAMPLEFVAMDPROC PFN_glSetMultisamplefvAMD;
typedef PFNGLTEXSTORAGESPARSEAMDPROC PFN_glTexStorageSparseAMD;
typedef PFNGLTEXTURESTORAGESPARSEAMDPROC PFN_glTextureStorageSparseAMD;
typedef PFNGLSTENCILOPVALUEAMDPROC PFN_glStencilOpValueAMD;
typedef PFNGLTESSELLATIONFACTORAMDPROC PFN_glTessellationFactorAMD;
typedef PFNGLTESSELLATIONMODEAMDPROC PFN_glTessellationModeAMD;
typedef PFNGLELEMENTPOINTERAPPLEPROC PFN_glElementPointerAPPLE;
typedef PFNGLDRAWELEMENTARRAYAPPLEPROC PFN_glDrawElementArrayAPPLE;
typedef PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC PFN_glDrawRangeElementArrayAPPLE;
typedef PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC PFN_glMultiDrawElementArrayAPPLE;
typedef PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
    PFN_glMultiDrawRangeElementArrayAPPLE;
typedef PFNGLGENFENCESAPPLEPROC PFN_glGenFencesAPPLE;
typedef PFNGLDELETEFENCESAPPLEPROC PFN_glDeleteFencesAPPLE;
typedef PFNGLSETFENCEAPPLEPROC PFN_glSetFenceAPPLE;
typedef PFNGLISFENCEAPPLEPROC PFN_glIsFenceAPPLE;
typedef PFNGLTESTFENCEAPPLEPROC PFN_glTestFenceAPPLE;
typedef PFNGLFINISHFENCEAPPLEPROC PFN_glFinishFenceAPPLE;
typedef PFNGLTESTOBJECTAPPLEPROC PFN_glTestObjectAPPLE;
typedef PFNGLFINISHOBJECTAPPLEPROC PFN_glFinishObjectAPPLE;
typedef PFNGLBUFFERPARAMETERIAPPLEPROC PFN_glBufferParameteriAPPLE;
typedef PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC PFN_glFlushMappedBufferRangeAPPLE;
typedef PFNGLOBJECTPURGEABLEAPPLEPROC PFN_glObjectPurgeableAPPLE;
typedef PFNGLOBJECTUNPURGEABLEAPPLEPROC PFN_glObjectUnpurgeableAPPLE;
typedef PFNGLGETOBJECTPARAMETERIVAPPLEPROC PFN_glGetObjectParameterivAPPLE;
typedef PFNGLTEXTURERANGEAPPLEPROC PFN_glTextureRangeAPPLE;
typedef PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
    PFN_glGetTexParameterPointervAPPLE;
typedef PFNGLBINDVERTEXARRAYAPPLEPROC PFN_glBindVertexArrayAPPLE;
typedef PFNGLDELETEVERTEXARRAYSAPPLEPROC PFN_glDeleteVertexArraysAPPLE;
typedef PFNGLGENVERTEXARRAYSAPPLEPROC PFN_glGenVertexArraysAPPLE;
typedef PFNGLISVERTEXARRAYAPPLEPROC PFN_glIsVertexArrayAPPLE;
typedef PFNGLVERTEXARRAYRANGEAPPLEPROC PFN_glVertexArrayRangeAPPLE;
typedef PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC PFN_glFlushVertexArrayRangeAPPLE;
typedef PFNGLVERTEXARRAYPARAMETERIAPPLEPROC PFN_glVertexArrayParameteriAPPLE;
typedef PFNGLENABLEVERTEXATTRIBAPPLEPROC PFN_glEnableVertexAttribAPPLE;
typedef PFNGLDISABLEVERTEXATTRIBAPPLEPROC PFN_glDisableVertexAttribAPPLE;
typedef PFNGLISVERTEXATTRIBENABLEDAPPLEPROC PFN_glIsVertexAttribEnabledAPPLE;
typedef PFNGLMAPVERTEXATTRIB1DAPPLEPROC PFN_glMapVertexAttrib1dAPPLE;
typedef PFNGLMAPVERTEXATTRIB1FAPPLEPROC PFN_glMapVertexAttrib1fAPPLE;
typedef PFNGLMAPVERTEXATTRIB2DAPPLEPROC PFN_glMapVertexAttrib2dAPPLE;
typedef PFNGLMAPVERTEXATTRIB2FAPPLEPROC PFN_glMapVertexAttrib2fAPPLE;
typedef PFNGLDRAWBUFFERSATIPROC PFN_glDrawBuffersATI;
typedef PFNGLELEMENTPOINTERATIPROC PFN_glElementPointerATI;
typedef PFNGLDRAWELEMENTARRAYATIPROC PFN_glDrawElementArrayATI;
typedef PFNGLDRAWRANGEELEMENTARRAYATIPROC PFN_glDrawRangeElementArrayATI;
typedef PFNGLTEXBUMPPARAMETERIVATIPROC PFN_glTexBumpParameterivATI;
typedef PFNGLTEXBUMPPARAMETERFVATIPROC PFN_glTexBumpParameterfvATI;
typedef PFNGLGETTEXBUMPPARAMETERIVATIPROC PFN_glGetTexBumpParameterivATI;
typedef PFNGLGETTEXBUMPPARAMETERFVATIPROC PFN_glGetTexBumpParameterfvATI;
typedef PFNGLGENFRAGMENTSHADERSATIPROC PFN_glGenFragmentShadersATI;
typedef PFNGLBINDFRAGMENTSHADERATIPROC PFN_glBindFragmentShaderATI;
typedef PFNGLDELETEFRAGMENTSHADERATIPROC PFN_glDeleteFragmentShaderATI;
typedef PFNGLBEGINFRAGMENTSHADERATIPROC PFN_glBeginFragmentShaderATI;
typedef PFNGLENDFRAGMENTSHADERATIPROC PFN_glEndFragmentShaderATI;
typedef PFNGLPASSTEXCOORDATIPROC PFN_glPassTexCoordATI;
typedef PFNGLSAMPLEMAPATIPROC PFN_glSampleMapATI;
typedef PFNGLCOLORFRAGMENTOP1ATIPROC PFN_glColorFragmentOp1ATI;
typedef PFNGLCOLORFRAGMENTOP2ATIPROC PFN_glColorFragmentOp2ATI;
typedef PFNGLCOLORFRAGMENTOP3ATIPROC PFN_glColorFragmentOp3ATI;
typedef PFNGLALPHAFRAGMENTOP1ATIPROC PFN_glAlphaFragmentOp1ATI;
typedef PFNGLALPHAFRAGMENTOP2ATIPROC PFN_glAlphaFragmentOp2ATI;
typedef PFNGLALPHAFRAGMENTOP3ATIPROC PFN_glAlphaFragmentOp3ATI;
typedef PFNGLSETFRAGMENTSHADERCONSTANTATIPROC
    PFN_glSetFragmentShaderConstantATI;
typedef PFNGLMAPOBJECTBUFFERATIPROC PFN_glMapObjectBufferATI;
typedef PFNGLUNMAPOBJECTBUFFERATIPROC PFN_glUnmapObjectBufferATI;
typedef PFNGLPNTRIANGLESIATIPROC PFN_glPNTrianglesiATI;
typedef PFNGLPNTRIANGLESFATIPROC PFN_glPNTrianglesfATI;
typedef PFNGLSTENCILOPSEPARATEATIPROC PFN_glStencilOpSeparateATI;
typedef PFNGLSTENCILFUNCSEPARATEATIPROC PFN_glStencilFuncSeparateATI;
typedef PFNGLNEWOBJECTBUFFERATIPROC PFN_glNewObjectBufferATI;
typedef PFNGLISOBJECTBUFFERATIPROC PFN_glIsObjectBufferATI;
typedef PFNGLUPDATEOBJECTBUFFERATIPROC PFN_glUpdateObjectBufferATI;
typedef PFNGLGETOBJECTBUFFERFVATIPROC PFN_glGetObjectBufferfvATI;
typedef PFNGLGETOBJECTBUFFERIVATIPROC PFN_glGetObjectBufferivATI;
typedef PFNGLFREEOBJECTBUFFERATIPROC PFN_glFreeObjectBufferATI;
typedef PFNGLARRAYOBJECTATIPROC PFN_glArrayObjectATI;
typedef PFNGLGETARRAYOBJECTFVATIPROC PFN_glGetArrayObjectfvATI;
typedef PFNGLGETARRAYOBJECTIVATIPROC PFN_glGetArrayObjectivATI;
typedef PFNGLVARIANTARRAYOBJECTATIPROC PFN_glVariantArrayObjectATI;
typedef PFNGLGETVARIANTARRAYOBJECTFVATIPROC PFN_glGetVariantArrayObjectfvATI;
typedef PFNGLGETVARIANTARRAYOBJECTIVATIPROC PFN_glGetVariantArrayObjectivATI;
typedef PFNGLVERTEXATTRIBARRAYOBJECTATIPROC PFN_glVertexAttribArrayObjectATI;
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
    PFN_glGetVertexAttribArrayObjectfvATI;
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
    PFN_glGetVertexAttribArrayObjectivATI;
typedef PFNGLVERTEXSTREAM1SATIPROC PFN_glVertexStream1sATI;
typedef PFNGLVERTEXSTREAM1SVATIPROC PFN_glVertexStream1svATI;
typedef PFNGLVERTEXSTREAM1IATIPROC PFN_glVertexStream1iATI;
typedef PFNGLVERTEXSTREAM1IVATIPROC PFN_glVertexStream1ivATI;
typedef PFNGLVERTEXSTREAM1FATIPROC PFN_glVertexStream1fATI;
typedef PFNGLVERTEXSTREAM1FVATIPROC PFN_glVertexStream1fvATI;
typedef PFNGLVERTEXSTREAM1DATIPROC PFN_glVertexStream1dATI;
typedef PFNGLVERTEXSTREAM1DVATIPROC PFN_glVertexStream1dvATI;
typedef PFNGLVERTEXSTREAM2SATIPROC PFN_glVertexStream2sATI;
typedef PFNGLVERTEXSTREAM2SVATIPROC PFN_glVertexStream2svATI;
typedef PFNGLVERTEXSTREAM2IATIPROC PFN_glVertexStream2iATI;
typedef PFNGLVERTEXSTREAM2IVATIPROC PFN_glVertexStream2ivATI;
typedef PFNGLVERTEXSTREAM2FATIPROC PFN_glVertexStream2fATI;
typedef PFNGLVERTEXSTREAM2FVATIPROC PFN_glVertexStream2fvATI;
typedef PFNGLVERTEXSTREAM2DATIPROC PFN_glVertexStream2dATI;
typedef PFNGLVERTEXSTREAM2DVATIPROC PFN_glVertexStream2dvATI;
typedef PFNGLVERTEXSTREAM3SATIPROC PFN_glVertexStream3sATI;
typedef PFNGLVERTEXSTREAM3SVATIPROC PFN_glVertexStream3svATI;
typedef PFNGLVERTEXSTREAM3IATIPROC PFN_glVertexStream3iATI;
typedef PFNGLVERTEXSTREAM3IVATIPROC PFN_glVertexStream3ivATI;
typedef PFNGLVERTEXSTREAM3FATIPROC PFN_glVertexStream3fATI;
typedef PFNGLVERTEXSTREAM3FVATIPROC PFN_glVertexStream3fvATI;
typedef PFNGLVERTEXSTREAM3DATIPROC PFN_glVertexStream3dATI;
typedef PFNGLVERTEXSTREAM3DVATIPROC PFN_glVertexStream3dvATI;
typedef PFNGLVERTEXSTREAM4SATIPROC PFN_glVertexStream4sATI;
typedef PFNGLVERTEXSTREAM4SVATIPROC PFN_glVertexStream4svATI;
typedef PFNGLVERTEXSTREAM4IATIPROC PFN_glVertexStream4iATI;
typedef PFNGLVERTEXSTREAM4IVATIPROC PFN_glVertexStream4ivATI;
typedef PFNGLVERTEXSTREAM4FATIPROC PFN_glVertexStream4fATI;
typedef PFNGLVERTEXSTREAM4FVATIPROC PFN_glVertexStream4fvATI;
typedef PFNGLVERTEXSTREAM4DATIPROC PFN_glVertexStream4dATI;
typedef PFNGLVERTEXSTREAM4DVATIPROC PFN_glVertexStream4dvATI;
typedef PFNGLNORMALSTREAM3BATIPROC PFN_glNormalStream3bATI;
typedef PFNGLNORMALSTREAM3BVATIPROC PFN_glNormalStream3bvATI;
typedef PFNGLNORMALSTREAM3SATIPROC PFN_glNormalStream3sATI;
typedef PFNGLNORMALSTREAM3SVATIPROC PFN_glNormalStream3svATI;
typedef PFNGLNORMALSTREAM3IATIPROC PFN_glNormalStream3iATI;
typedef PFNGLNORMALSTREAM3IVATIPROC PFN_glNormalStream3ivATI;
typedef PFNGLNORMALSTREAM3FATIPROC PFN_glNormalStream3fATI;
typedef PFNGLNORMALSTREAM3FVATIPROC PFN_glNormalStream3fvATI;
typedef PFNGLNORMALSTREAM3DATIPROC PFN_glNormalStream3dATI;
typedef PFNGLNORMALSTREAM3DVATIPROC PFN_glNormalStream3dvATI;
typedef PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC PFN_glClientActiveVertexStreamATI;
typedef PFNGLVERTEXBLENDENVIATIPROC PFN_glVertexBlendEnviATI;
typedef PFNGLVERTEXBLENDENVFATIPROC PFN_glVertexBlendEnvfATI;
typedef PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC PFN_glEGLImageTargetTexStorageEXT;
typedef PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC
    PFN_glEGLImageTargetTextureStorageEXT;
typedef PFNGLUNIFORMBUFFEREXTPROC PFN_glUniformBufferEXT;
typedef PFNGLGETUNIFORMBUFFERSIZEEXTPROC PFN_glGetUniformBufferSizeEXT;
typedef PFNGLGETUNIFORMOFFSETEXTPROC PFN_glGetUniformOffsetEXT;
typedef PFNGLBLENDCOLOREXTPROC PFN_glBlendColorEXT;
typedef PFNGLBLENDEQUATIONSEPARATEEXTPROC PFN_glBlendEquationSeparateEXT;
typedef PFNGLBLENDFUNCSEPARATEEXTPROC PFN_glBlendFuncSeparateEXT;
typedef PFNGLBLENDEQUATIONEXTPROC PFN_glBlendEquationEXT;
typedef PFNGLCOLORSUBTABLEEXTPROC PFN_glColorSubTableEXT;
typedef PFNGLCOPYCOLORSUBTABLEEXTPROC PFN_glCopyColorSubTableEXT;
typedef PFNGLLOCKARRAYSEXTPROC PFN_glLockArraysEXT;
typedef PFNGLUNLOCKARRAYSEXTPROC PFN_glUnlockArraysEXT;
typedef PFNGLCONVOLUTIONFILTER1DEXTPROC PFN_glConvolutionFilter1DEXT;
typedef PFNGLCONVOLUTIONFILTER2DEXTPROC PFN_glConvolutionFilter2DEXT;
typedef PFNGLCONVOLUTIONPARAMETERFEXTPROC PFN_glConvolutionParameterfEXT;
typedef PFNGLCONVOLUTIONPARAMETERFVEXTPROC PFN_glConvolutionParameterfvEXT;
typedef PFNGLCONVOLUTIONPARAMETERIEXTPROC PFN_glConvolutionParameteriEXT;
typedef PFNGLCONVOLUTIONPARAMETERIVEXTPROC PFN_glConvolutionParameterivEXT;
typedef PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC PFN_glCopyConvolutionFilter1DEXT;
typedef PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC PFN_glCopyConvolutionFilter2DEXT;
typedef PFNGLGETCONVOLUTIONFILTEREXTPROC PFN_glGetConvolutionFilterEXT;
typedef PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
    PFN_glGetConvolutionParameterfvEXT;
typedef PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
    PFN_glGetConvolutionParameterivEXT;
typedef PFNGLGETSEPARABLEFILTEREXTPROC PFN_glGetSeparableFilterEXT;
typedef PFNGLSEPARABLEFILTER2DEXTPROC PFN_glSeparableFilter2DEXT;
typedef PFNGLTANGENT3BEXTPROC PFN_glTangent3bEXT;
typedef PFNGLTANGENT3BVEXTPROC PFN_glTangent3bvEXT;
typedef PFNGLTANGENT3DEXTPROC PFN_glTangent3dEXT;
typedef PFNGLTANGENT3DVEXTPROC PFN_glTangent3dvEXT;
typedef PFNGLTANGENT3FEXTPROC PFN_glTangent3fEXT;
typedef PFNGLTANGENT3FVEXTPROC PFN_glTangent3fvEXT;
typedef PFNGLTANGENT3IEXTPROC PFN_glTangent3iEXT;
typedef PFNGLTANGENT3IVEXTPROC PFN_glTangent3ivEXT;
typedef PFNGLTANGENT3SEXTPROC PFN_glTangent3sEXT;
typedef PFNGLTANGENT3SVEXTPROC PFN_glTangent3svEXT;
typedef PFNGLBINORMAL3BEXTPROC PFN_glBinormal3bEXT;
typedef PFNGLBINORMAL3BVEXTPROC PFN_glBinormal3bvEXT;
typedef PFNGLBINORMAL3DEXTPROC PFN_glBinormal3dEXT;
typedef PFNGLBINORMAL3DVEXTPROC PFN_glBinormal3dvEXT;
typedef PFNGLBINORMAL3FEXTPROC PFN_glBinormal3fEXT;
typedef PFNGLBINORMAL3FVEXTPROC PFN_glBinormal3fvEXT;
typedef PFNGLBINORMAL3IEXTPROC PFN_glBinormal3iEXT;
typedef PFNGLBINORMAL3IVEXTPROC PFN_glBinormal3ivEXT;
typedef PFNGLBINORMAL3SEXTPROC PFN_glBinormal3sEXT;
typedef PFNGLBINORMAL3SVEXTPROC PFN_glBinormal3svEXT;
typedef PFNGLTANGENTPOINTEREXTPROC PFN_glTangentPointerEXT;
typedef PFNGLBINORMALPOINTEREXTPROC PFN_glBinormalPointerEXT;
typedef PFNGLCOPYTEXIMAGE1DEXTPROC PFN_glCopyTexImage1DEXT;
typedef PFNGLCOPYTEXIMAGE2DEXTPROC PFN_glCopyTexImage2DEXT;
typedef PFNGLCOPYTEXSUBIMAGE1DEXTPROC PFN_glCopyTexSubImage1DEXT;
typedef PFNGLCOPYTEXSUBIMAGE2DEXTPROC PFN_glCopyTexSubImage2DEXT;
typedef PFNGLCOPYTEXSUBIMAGE3DEXTPROC PFN_glCopyTexSubImage3DEXT;
typedef PFNGLCULLPARAMETERDVEXTPROC PFN_glCullParameterdvEXT;
typedef PFNGLCULLPARAMETERFVEXTPROC PFN_glCullParameterfvEXT;
typedef PFNGLLABELOBJECTEXTPROC PFN_glLabelObjectEXT;
typedef PFNGLGETOBJECTLABELEXTPROC PFN_glGetObjectLabelEXT;
typedef PFNGLINSERTEVENTMARKEREXTPROC PFN_glInsertEventMarkerEXT;
typedef PFNGLPUSHGROUPMARKEREXTPROC PFN_glPushGroupMarkerEXT;
typedef PFNGLPOPGROUPMARKEREXTPROC PFN_glPopGroupMarkerEXT;
typedef PFNGLDEPTHBOUNDSEXTPROC PFN_glDepthBoundsEXT;
typedef PFNGLMATRIXLOADFEXTPROC PFN_glMatrixLoadfEXT;
typedef PFNGLMATRIXLOADDEXTPROC PFN_glMatrixLoaddEXT;
typedef PFNGLMATRIXMULTFEXTPROC PFN_glMatrixMultfEXT;
typedef PFNGLMATRIXMULTDEXTPROC PFN_glMatrixMultdEXT;
typedef PFNGLMATRIXLOADIDENTITYEXTPROC PFN_glMatrixLoadIdentityEXT;
typedef PFNGLMATRIXROTATEFEXTPROC PFN_glMatrixRotatefEXT;
typedef PFNGLMATRIXROTATEDEXTPROC PFN_glMatrixRotatedEXT;
typedef PFNGLMATRIXSCALEFEXTPROC PFN_glMatrixScalefEXT;
typedef PFNGLMATRIXSCALEDEXTPROC PFN_glMatrixScaledEXT;
typedef PFNGLMATRIXTRANSLATEFEXTPROC PFN_glMatrixTranslatefEXT;
typedef PFNGLMATRIXTRANSLATEDEXTPROC PFN_glMatrixTranslatedEXT;
typedef PFNGLMATRIXFRUSTUMEXTPROC PFN_glMatrixFrustumEXT;
typedef PFNGLMATRIXORTHOEXTPROC PFN_glMatrixOrthoEXT;
typedef PFNGLMATRIXPOPEXTPROC PFN_glMatrixPopEXT;
typedef PFNGLMATRIXPUSHEXTPROC PFN_glMatrixPushEXT;
typedef PFNGLCLIENTATTRIBDEFAULTEXTPROC PFN_glClientAttribDefaultEXT;
typedef PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC PFN_glPushClientAttribDefaultEXT;
typedef PFNGLTEXTUREPARAMETERFEXTPROC PFN_glTextureParameterfEXT;
typedef PFNGLTEXTUREPARAMETERFVEXTPROC PFN_glTextureParameterfvEXT;
typedef PFNGLTEXTUREPARAMETERIEXTPROC PFN_glTextureParameteriEXT;
typedef PFNGLTEXTUREPARAMETERIVEXTPROC PFN_glTextureParameterivEXT;
typedef PFNGLTEXTUREIMAGE1DEXTPROC PFN_glTextureImage1DEXT;
typedef PFNGLTEXTUREIMAGE2DEXTPROC PFN_glTextureImage2DEXT;
typedef PFNGLTEXTURESUBIMAGE1DEXTPROC PFN_glTextureSubImage1DEXT;
typedef PFNGLTEXTURESUBIMAGE2DEXTPROC PFN_glTextureSubImage2DEXT;
typedef PFNGLCOPYTEXTUREIMAGE1DEXTPROC PFN_glCopyTextureImage1DEXT;
typedef PFNGLCOPYTEXTUREIMAGE2DEXTPROC PFN_glCopyTextureImage2DEXT;
typedef PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC PFN_glCopyTextureSubImage1DEXT;
typedef PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC PFN_glCopyTextureSubImage2DEXT;
typedef PFNGLGETTEXTUREIMAGEEXTPROC PFN_glGetTextureImageEXT;
typedef PFNGLGETTEXTUREPARAMETERFVEXTPROC PFN_glGetTextureParameterfvEXT;
typedef PFNGLGETTEXTUREPARAMETERIVEXTPROC PFN_glGetTextureParameterivEXT;
typedef PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
    PFN_glGetTextureLevelParameterfvEXT;
typedef PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
    PFN_glGetTextureLevelParameterivEXT;
typedef PFNGLTEXTUREIMAGE3DEXTPROC PFN_glTextureImage3DEXT;
typedef PFNGLTEXTURESUBIMAGE3DEXTPROC PFN_glTextureSubImage3DEXT;
typedef PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC PFN_glCopyTextureSubImage3DEXT;
typedef PFNGLBINDMULTITEXTUREEXTPROC PFN_glBindMultiTextureEXT;
typedef PFNGLMULTITEXCOORDPOINTEREXTPROC PFN_glMultiTexCoordPointerEXT;
typedef PFNGLMULTITEXENVFEXTPROC PFN_glMultiTexEnvfEXT;
typedef PFNGLMULTITEXENVFVEXTPROC PFN_glMultiTexEnvfvEXT;
typedef PFNGLMULTITEXENVIEXTPROC PFN_glMultiTexEnviEXT;
typedef PFNGLMULTITEXENVIVEXTPROC PFN_glMultiTexEnvivEXT;
typedef PFNGLMULTITEXGENDEXTPROC PFN_glMultiTexGendEXT;
typedef PFNGLMULTITEXGENDVEXTPROC PFN_glMultiTexGendvEXT;
typedef PFNGLMULTITEXGENFEXTPROC PFN_glMultiTexGenfEXT;
typedef PFNGLMULTITEXGENFVEXTPROC PFN_glMultiTexGenfvEXT;
typedef PFNGLMULTITEXGENIEXTPROC PFN_glMultiTexGeniEXT;
typedef PFNGLMULTITEXGENIVEXTPROC PFN_glMultiTexGenivEXT;
typedef PFNGLGETMULTITEXENVFVEXTPROC PFN_glGetMultiTexEnvfvEXT;
typedef PFNGLGETMULTITEXENVIVEXTPROC PFN_glGetMultiTexEnvivEXT;
typedef PFNGLGETMULTITEXGENDVEXTPROC PFN_glGetMultiTexGendvEXT;
typedef PFNGLGETMULTITEXGENFVEXTPROC PFN_glGetMultiTexGenfvEXT;
typedef PFNGLGETMULTITEXGENIVEXTPROC PFN_glGetMultiTexGenivEXT;
typedef PFNGLMULTITEXPARAMETERIEXTPROC PFN_glMultiTexParameteriEXT;
typedef PFNGLMULTITEXPARAMETERIVEXTPROC PFN_glMultiTexParameterivEXT;
typedef PFNGLMULTITEXPARAMETERFEXTPROC PFN_glMultiTexParameterfEXT;
typedef PFNGLMULTITEXPARAMETERFVEXTPROC PFN_glMultiTexParameterfvEXT;
typedef PFNGLMULTITEXIMAGE1DEXTPROC PFN_glMultiTexImage1DEXT;
typedef PFNGLMULTITEXIMAGE2DEXTPROC PFN_glMultiTexImage2DEXT;
typedef PFNGLMULTITEXSUBIMAGE1DEXTPROC PFN_glMultiTexSubImage1DEXT;
typedef PFNGLMULTITEXSUBIMAGE2DEXTPROC PFN_glMultiTexSubImage2DEXT;
typedef PFNGLCOPYMULTITEXIMAGE1DEXTPROC PFN_glCopyMultiTexImage1DEXT;
typedef PFNGLCOPYMULTITEXIMAGE2DEXTPROC PFN_glCopyMultiTexImage2DEXT;
typedef PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC PFN_glCopyMultiTexSubImage1DEXT;
typedef PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC PFN_glCopyMultiTexSubImage2DEXT;
typedef PFNGLGETMULTITEXIMAGEEXTPROC PFN_glGetMultiTexImageEXT;
typedef PFNGLGETMULTITEXPARAMETERFVEXTPROC PFN_glGetMultiTexParameterfvEXT;
typedef PFNGLGETMULTITEXPARAMETERIVEXTPROC PFN_glGetMultiTexParameterivEXT;
typedef PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
    PFN_glGetMultiTexLevelParameterfvEXT;
typedef PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
    PFN_glGetMultiTexLevelParameterivEXT;
typedef PFNGLMULTITEXIMAGE3DEXTPROC PFN_glMultiTexImage3DEXT;
typedef PFNGLMULTITEXSUBIMAGE3DEXTPROC PFN_glMultiTexSubImage3DEXT;
typedef PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC PFN_glCopyMultiTexSubImage3DEXT;
typedef PFNGLENABLECLIENTSTATEINDEXEDEXTPROC PFN_glEnableClientStateIndexedEXT;
typedef PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
    PFN_glDisableClientStateIndexedEXT;
typedef PFNGLGETFLOATINDEXEDVEXTPROC PFN_glGetFloatIndexedvEXT;
typedef PFNGLGETDOUBLEINDEXEDVEXTPROC PFN_glGetDoubleIndexedvEXT;
typedef PFNGLGETPOINTERINDEXEDVEXTPROC PFN_glGetPointerIndexedvEXT;
typedef PFNGLENABLEINDEXEDEXTPROC PFN_glEnableIndexedEXT;
typedef PFNGLDISABLEINDEXEDEXTPROC PFN_glDisableIndexedEXT;
typedef PFNGLISENABLEDINDEXEDEXTPROC PFN_glIsEnabledIndexedEXT;
typedef PFNGLGETINTEGERINDEXEDVEXTPROC PFN_glGetIntegerIndexedvEXT;
typedef PFNGLGETBOOLEANINDEXEDVEXTPROC PFN_glGetBooleanIndexedvEXT;
typedef PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC PFN_glCompressedTextureImage3DEXT;
typedef PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC PFN_glCompressedTextureImage2DEXT;
typedef PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC PFN_glCompressedTextureImage1DEXT;
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
    PFN_glCompressedTextureSubImage3DEXT;
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
    PFN_glCompressedTextureSubImage2DEXT;
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
    PFN_glCompressedTextureSubImage1DEXT;
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
    PFN_glGetCompressedTextureImageEXT;
typedef PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
    PFN_glCompressedMultiTexImage3DEXT;
typedef PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
    PFN_glCompressedMultiTexImage2DEXT;
typedef PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
    PFN_glCompressedMultiTexImage1DEXT;
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
    PFN_glCompressedMultiTexSubImage3DEXT;
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
    PFN_glCompressedMultiTexSubImage2DEXT;
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
    PFN_glCompressedMultiTexSubImage1DEXT;
typedef PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
    PFN_glGetCompressedMultiTexImageEXT;
typedef PFNGLMATRIXLOADTRANSPOSEFEXTPROC PFN_glMatrixLoadTransposefEXT;
typedef PFNGLMATRIXLOADTRANSPOSEDEXTPROC PFN_glMatrixLoadTransposedEXT;
typedef PFNGLMATRIXMULTTRANSPOSEFEXTPROC PFN_glMatrixMultTransposefEXT;
typedef PFNGLMATRIXMULTTRANSPOSEDEXTPROC PFN_glMatrixMultTransposedEXT;
typedef PFNGLNAMEDBUFFERDATAEXTPROC PFN_glNamedBufferDataEXT;
typedef PFNGLNAMEDBUFFERSUBDATAEXTPROC PFN_glNamedBufferSubDataEXT;
typedef PFNGLMAPNAMEDBUFFEREXTPROC PFN_glMapNamedBufferEXT;
typedef PFNGLUNMAPNAMEDBUFFEREXTPROC PFN_glUnmapNamedBufferEXT;
typedef PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
    PFN_glGetNamedBufferParameterivEXT;
typedef PFNGLGETNAMEDBUFFERPOINTERVEXTPROC PFN_glGetNamedBufferPointervEXT;
typedef PFNGLGETNAMEDBUFFERSUBDATAEXTPROC PFN_glGetNamedBufferSubDataEXT;
typedef PFNGLPROGRAMUNIFORM1FEXTPROC PFN_glProgramUniform1fEXT;
typedef PFNGLPROGRAMUNIFORM2FEXTPROC PFN_glProgramUniform2fEXT;
typedef PFNGLPROGRAMUNIFORM3FEXTPROC PFN_glProgramUniform3fEXT;
typedef PFNGLPROGRAMUNIFORM4FEXTPROC PFN_glProgramUniform4fEXT;
typedef PFNGLPROGRAMUNIFORM1IEXTPROC PFN_glProgramUniform1iEXT;
typedef PFNGLPROGRAMUNIFORM2IEXTPROC PFN_glProgramUniform2iEXT;
typedef PFNGLPROGRAMUNIFORM3IEXTPROC PFN_glProgramUniform3iEXT;
typedef PFNGLPROGRAMUNIFORM4IEXTPROC PFN_glProgramUniform4iEXT;
typedef PFNGLPROGRAMUNIFORM1FVEXTPROC PFN_glProgramUniform1fvEXT;
typedef PFNGLPROGRAMUNIFORM2FVEXTPROC PFN_glProgramUniform2fvEXT;
typedef PFNGLPROGRAMUNIFORM3FVEXTPROC PFN_glProgramUniform3fvEXT;
typedef PFNGLPROGRAMUNIFORM4FVEXTPROC PFN_glProgramUniform4fvEXT;
typedef PFNGLPROGRAMUNIFORM1IVEXTPROC PFN_glProgramUniform1ivEXT;
typedef PFNGLPROGRAMUNIFORM2IVEXTPROC PFN_glProgramUniform2ivEXT;
typedef PFNGLPROGRAMUNIFORM3IVEXTPROC PFN_glProgramUniform3ivEXT;
typedef PFNGLPROGRAMUNIFORM4IVEXTPROC PFN_glProgramUniform4ivEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC PFN_glProgramUniformMatrix2fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC PFN_glProgramUniformMatrix3fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC PFN_glProgramUniformMatrix4fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
    PFN_glProgramUniformMatrix2x3fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
    PFN_glProgramUniformMatrix3x2fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
    PFN_glProgramUniformMatrix2x4fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
    PFN_glProgramUniformMatrix4x2fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
    PFN_glProgramUniformMatrix3x4fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
    PFN_glProgramUniformMatrix4x3fvEXT;
typedef PFNGLTEXTUREBUFFEREXTPROC PFN_glTextureBufferEXT;
typedef PFNGLMULTITEXBUFFEREXTPROC PFN_glMultiTexBufferEXT;
typedef PFNGLTEXTUREPARAMETERIIVEXTPROC PFN_glTextureParameterIivEXT;
typedef PFNGLTEXTUREPARAMETERIUIVEXTPROC PFN_glTextureParameterIuivEXT;
typedef PFNGLGETTEXTUREPARAMETERIIVEXTPROC PFN_glGetTextureParameterIivEXT;
typedef PFNGLGETTEXTUREPARAMETERIUIVEXTPROC PFN_glGetTextureParameterIuivEXT;
typedef PFNGLMULTITEXPARAMETERIIVEXTPROC PFN_glMultiTexParameterIivEXT;
typedef PFNGLMULTITEXPARAMETERIUIVEXTPROC PFN_glMultiTexParameterIuivEXT;
typedef PFNGLGETMULTITEXPARAMETERIIVEXTPROC PFN_glGetMultiTexParameterIivEXT;
typedef PFNGLGETMULTITEXPARAMETERIUIVEXTPROC PFN_glGetMultiTexParameterIuivEXT;
typedef PFNGLPROGRAMUNIFORM1UIEXTPROC PFN_glProgramUniform1uiEXT;
typedef PFNGLPROGRAMUNIFORM2UIEXTPROC PFN_glProgramUniform2uiEXT;
typedef PFNGLPROGRAMUNIFORM3UIEXTPROC PFN_glProgramUniform3uiEXT;
typedef PFNGLPROGRAMUNIFORM4UIEXTPROC PFN_glProgramUniform4uiEXT;
typedef PFNGLPROGRAMUNIFORM1UIVEXTPROC PFN_glProgramUniform1uivEXT;
typedef PFNGLPROGRAMUNIFORM2UIVEXTPROC PFN_glProgramUniform2uivEXT;
typedef PFNGLPROGRAMUNIFORM3UIVEXTPROC PFN_glProgramUniform3uivEXT;
typedef PFNGLPROGRAMUNIFORM4UIVEXTPROC PFN_glProgramUniform4uivEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
    PFN_glNamedProgramLocalParameters4fvEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
    PFN_glNamedProgramLocalParameterI4iEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
    PFN_glNamedProgramLocalParameterI4ivEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
    PFN_glNamedProgramLocalParametersI4ivEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
    PFN_glNamedProgramLocalParameterI4uiEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
    PFN_glNamedProgramLocalParameterI4uivEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
    PFN_glNamedProgramLocalParametersI4uivEXT;
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
    PFN_glGetNamedProgramLocalParameterIivEXT;
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
    PFN_glGetNamedProgramLocalParameterIuivEXT;
typedef PFNGLENABLECLIENTSTATEIEXTPROC PFN_glEnableClientStateiEXT;
typedef PFNGLDISABLECLIENTSTATEIEXTPROC PFN_glDisableClientStateiEXT;
typedef PFNGLGETFLOATI_VEXTPROC PFN_glGetFloati_vEXT;
typedef PFNGLGETDOUBLEI_VEXTPROC PFN_glGetDoublei_vEXT;
typedef PFNGLGETPOINTERI_VEXTPROC PFN_glGetPointeri_vEXT;
typedef PFNGLNAMEDPROGRAMSTRINGEXTPROC PFN_glNamedProgramStringEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
    PFN_glNamedProgramLocalParameter4dEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
    PFN_glNamedProgramLocalParameter4dvEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
    PFN_glNamedProgramLocalParameter4fEXT;
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
    PFN_glNamedProgramLocalParameter4fvEXT;
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
    PFN_glGetNamedProgramLocalParameterdvEXT;
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
    PFN_glGetNamedProgramLocalParameterfvEXT;
typedef PFNGLGETNAMEDPROGRAMIVEXTPROC PFN_glGetNamedProgramivEXT;
typedef PFNGLGETNAMEDPROGRAMSTRINGEXTPROC PFN_glGetNamedProgramStringEXT;
typedef PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC PFN_glNamedRenderbufferStorageEXT;
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
    PFN_glGetNamedRenderbufferParameterivEXT;
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
    PFN_glNamedRenderbufferStorageMultisampleEXT;
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
    PFN_glNamedRenderbufferStorageMultisampleCoverageEXT;
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
    PFN_glCheckNamedFramebufferStatusEXT;
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
    PFN_glNamedFramebufferTexture1DEXT;
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
    PFN_glNamedFramebufferTexture2DEXT;
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
    PFN_glNamedFramebufferTexture3DEXT;
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
    PFN_glNamedFramebufferRenderbufferEXT;
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
    PFN_glGetNamedFramebufferAttachmentParameterivEXT;
typedef PFNGLGENERATETEXTUREMIPMAPEXTPROC PFN_glGenerateTextureMipmapEXT;
typedef PFNGLGENERATEMULTITEXMIPMAPEXTPROC PFN_glGenerateMultiTexMipmapEXT;
typedef PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC PFN_glFramebufferDrawBufferEXT;
typedef PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC PFN_glFramebufferDrawBuffersEXT;
typedef PFNGLFRAMEBUFFERREADBUFFEREXTPROC PFN_glFramebufferReadBufferEXT;
typedef PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
    PFN_glGetFramebufferParameterivEXT;
typedef PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC PFN_glNamedCopyBufferSubDataEXT;
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC PFN_glNamedFramebufferTextureEXT;
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
    PFN_glNamedFramebufferTextureLayerEXT;
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
    PFN_glNamedFramebufferTextureFaceEXT;
typedef PFNGLTEXTURERENDERBUFFEREXTPROC PFN_glTextureRenderbufferEXT;
typedef PFNGLMULTITEXRENDERBUFFEREXTPROC PFN_glMultiTexRenderbufferEXT;
typedef PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC PFN_glVertexArrayVertexOffsetEXT;
typedef PFNGLVERTEXARRAYCOLOROFFSETEXTPROC PFN_glVertexArrayColorOffsetEXT;
typedef PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
    PFN_glVertexArrayEdgeFlagOffsetEXT;
typedef PFNGLVERTEXARRAYINDEXOFFSETEXTPROC PFN_glVertexArrayIndexOffsetEXT;
typedef PFNGLVERTEXARRAYNORMALOFFSETEXTPROC PFN_glVertexArrayNormalOffsetEXT;
typedef PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
    PFN_glVertexArrayTexCoordOffsetEXT;
typedef PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
    PFN_glVertexArrayMultiTexCoordOffsetEXT;
typedef PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
    PFN_glVertexArrayFogCoordOffsetEXT;
typedef PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
    PFN_glVertexArraySecondaryColorOffsetEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
    PFN_glVertexArrayVertexAttribOffsetEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
    PFN_glVertexArrayVertexAttribIOffsetEXT;
typedef PFNGLENABLEVERTEXARRAYEXTPROC PFN_glEnableVertexArrayEXT;
typedef PFNGLDISABLEVERTEXARRAYEXTPROC PFN_glDisableVertexArrayEXT;
typedef PFNGLENABLEVERTEXARRAYATTRIBEXTPROC PFN_glEnableVertexArrayAttribEXT;
typedef PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC PFN_glDisableVertexArrayAttribEXT;
typedef PFNGLGETVERTEXARRAYINTEGERVEXTPROC PFN_glGetVertexArrayIntegervEXT;
typedef PFNGLGETVERTEXARRAYPOINTERVEXTPROC PFN_glGetVertexArrayPointervEXT;
typedef PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC PFN_glGetVertexArrayIntegeri_vEXT;
typedef PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC PFN_glGetVertexArrayPointeri_vEXT;
typedef PFNGLMAPNAMEDBUFFERRANGEEXTPROC PFN_glMapNamedBufferRangeEXT;
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
    PFN_glFlushMappedNamedBufferRangeEXT;
typedef PFNGLNAMEDBUFFERSTORAGEEXTPROC PFN_glNamedBufferStorageEXT;
typedef PFNGLCLEARNAMEDBUFFERDATAEXTPROC PFN_glClearNamedBufferDataEXT;
typedef PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC PFN_glClearNamedBufferSubDataEXT;
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
    PFN_glNamedFramebufferParameteriEXT;
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
    PFN_glGetNamedFramebufferParameterivEXT;
typedef PFNGLPROGRAMUNIFORM1DEXTPROC PFN_glProgramUniform1dEXT;
typedef PFNGLPROGRAMUNIFORM2DEXTPROC PFN_glProgramUniform2dEXT;
typedef PFNGLPROGRAMUNIFORM3DEXTPROC PFN_glProgramUniform3dEXT;
typedef PFNGLPROGRAMUNIFORM4DEXTPROC PFN_glProgramUniform4dEXT;
typedef PFNGLPROGRAMUNIFORM1DVEXTPROC PFN_glProgramUniform1dvEXT;
typedef PFNGLPROGRAMUNIFORM2DVEXTPROC PFN_glProgramUniform2dvEXT;
typedef PFNGLPROGRAMUNIFORM3DVEXTPROC PFN_glProgramUniform3dvEXT;
typedef PFNGLPROGRAMUNIFORM4DVEXTPROC PFN_glProgramUniform4dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC PFN_glProgramUniformMatrix2dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC PFN_glProgramUniformMatrix3dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC PFN_glProgramUniformMatrix4dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
    PFN_glProgramUniformMatrix2x3dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
    PFN_glProgramUniformMatrix2x4dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
    PFN_glProgramUniformMatrix3x2dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
    PFN_glProgramUniformMatrix3x4dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
    PFN_glProgramUniformMatrix4x2dvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
    PFN_glProgramUniformMatrix4x3dvEXT;
typedef PFNGLTEXTUREBUFFERRANGEEXTPROC PFN_glTextureBufferRangeEXT;
typedef PFNGLTEXTURESTORAGE1DEXTPROC PFN_glTextureStorage1DEXT;
typedef PFNGLTEXTURESTORAGE2DEXTPROC PFN_glTextureStorage2DEXT;
typedef PFNGLTEXTURESTORAGE3DEXTPROC PFN_glTextureStorage3DEXT;
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
    PFN_glTextureStorage2DMultisampleEXT;
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
    PFN_glTextureStorage3DMultisampleEXT;
typedef PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
    PFN_glVertexArrayBindVertexBufferEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
    PFN_glVertexArrayVertexAttribFormatEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
    PFN_glVertexArrayVertexAttribIFormatEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
    PFN_glVertexArrayVertexAttribLFormatEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
    PFN_glVertexArrayVertexAttribBindingEXT;
typedef PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
    PFN_glVertexArrayVertexBindingDivisorEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
    PFN_glVertexArrayVertexAttribLOffsetEXT;
typedef PFNGLTEXTUREPAGECOMMITMENTEXTPROC PFN_glTexturePageCommitmentEXT;
typedef PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
    PFN_glVertexArrayVertexAttribDivisorEXT;
typedef PFNGLCOLORMASKINDEXEDEXTPROC PFN_glColorMaskIndexedEXT;
typedef PFNGLDRAWARRAYSINSTANCEDEXTPROC PFN_glDrawArraysInstancedEXT;
typedef PFNGLDRAWELEMENTSINSTANCEDEXTPROC PFN_glDrawElementsInstancedEXT;
typedef PFNGLDRAWRANGEELEMENTSEXTPROC PFN_glDrawRangeElementsEXT;
typedef PFNGLBUFFERSTORAGEEXTERNALEXTPROC PFN_glBufferStorageExternalEXT;
typedef PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC
    PFN_glNamedBufferStorageExternalEXT;
typedef PFNGLFOGCOORDFEXTPROC PFN_glFogCoordfEXT;
typedef PFNGLFOGCOORDFVEXTPROC PFN_glFogCoordfvEXT;
typedef PFNGLFOGCOORDDEXTPROC PFN_glFogCoorddEXT;
typedef PFNGLFOGCOORDDVEXTPROC PFN_glFogCoorddvEXT;
typedef PFNGLFOGCOORDPOINTEREXTPROC PFN_glFogCoordPointerEXT;
typedef PFNGLBLITFRAMEBUFFEREXTPROC PFN_glBlitFramebufferEXT;
typedef PFNGLBLITFRAMEBUFFERLAYERSEXTPROC PFN_glBlitFramebufferLayersEXT;
typedef PFNGLBLITFRAMEBUFFERLAYEREXTPROC PFN_glBlitFramebufferLayerEXT;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
    PFN_glRenderbufferStorageMultisampleEXT;
typedef PFNGLISRENDERBUFFEREXTPROC PFN_glIsRenderbufferEXT;
typedef PFNGLBINDRENDERBUFFEREXTPROC PFN_glBindRenderbufferEXT;
typedef PFNGLDELETERENDERBUFFERSEXTPROC PFN_glDeleteRenderbuffersEXT;
typedef PFNGLGENRENDERBUFFERSEXTPROC PFN_glGenRenderbuffersEXT;
typedef PFNGLRENDERBUFFERSTORAGEEXTPROC PFN_glRenderbufferStorageEXT;
typedef PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
    PFN_glGetRenderbufferParameterivEXT;
typedef PFNGLISFRAMEBUFFEREXTPROC PFN_glIsFramebufferEXT;
typedef PFNGLBINDFRAMEBUFFEREXTPROC PFN_glBindFramebufferEXT;
typedef PFNGLDELETEFRAMEBUFFERSEXTPROC PFN_glDeleteFramebuffersEXT;
typedef PFNGLGENFRAMEBUFFERSEXTPROC PFN_glGenFramebuffersEXT;
typedef PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC PFN_glCheckFramebufferStatusEXT;
typedef PFNGLFRAMEBUFFERTEXTURE1DEXTPROC PFN_glFramebufferTexture1DEXT;
typedef PFNGLFRAMEBUFFERTEXTURE2DEXTPROC PFN_glFramebufferTexture2DEXT;
typedef PFNGLFRAMEBUFFERTEXTURE3DEXTPROC PFN_glFramebufferTexture3DEXT;
typedef PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC PFN_glFramebufferRenderbufferEXT;
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
    PFN_glGetFramebufferAttachmentParameterivEXT;
typedef PFNGLGENERATEMIPMAPEXTPROC PFN_glGenerateMipmapEXT;
typedef PFNGLPROGRAMPARAMETERIEXTPROC PFN_glProgramParameteriEXT;
typedef PFNGLPROGRAMENVPARAMETERS4FVEXTPROC PFN_glProgramEnvParameters4fvEXT;
typedef PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
    PFN_glProgramLocalParameters4fvEXT;
typedef PFNGLGETUNIFORMUIVEXTPROC PFN_glGetUniformuivEXT;
typedef PFNGLBINDFRAGDATALOCATIONEXTPROC PFN_glBindFragDataLocationEXT;
typedef PFNGLGETFRAGDATALOCATIONEXTPROC PFN_glGetFragDataLocationEXT;
typedef PFNGLUNIFORM1UIEXTPROC PFN_glUniform1uiEXT;
typedef PFNGLUNIFORM2UIEXTPROC PFN_glUniform2uiEXT;
typedef PFNGLUNIFORM3UIEXTPROC PFN_glUniform3uiEXT;
typedef PFNGLUNIFORM4UIEXTPROC PFN_glUniform4uiEXT;
typedef PFNGLUNIFORM1UIVEXTPROC PFN_glUniform1uivEXT;
typedef PFNGLUNIFORM2UIVEXTPROC PFN_glUniform2uivEXT;
typedef PFNGLUNIFORM3UIVEXTPROC PFN_glUniform3uivEXT;
typedef PFNGLUNIFORM4UIVEXTPROC PFN_glUniform4uivEXT;
typedef PFNGLVERTEXATTRIBI1IEXTPROC PFN_glVertexAttribI1iEXT;
typedef PFNGLVERTEXATTRIBI2IEXTPROC PFN_glVertexAttribI2iEXT;
typedef PFNGLVERTEXATTRIBI3IEXTPROC PFN_glVertexAttribI3iEXT;
typedef PFNGLVERTEXATTRIBI4IEXTPROC PFN_glVertexAttribI4iEXT;
typedef PFNGLVERTEXATTRIBI1UIEXTPROC PFN_glVertexAttribI1uiEXT;
typedef PFNGLVERTEXATTRIBI2UIEXTPROC PFN_glVertexAttribI2uiEXT;
typedef PFNGLVERTEXATTRIBI3UIEXTPROC PFN_glVertexAttribI3uiEXT;
typedef PFNGLVERTEXATTRIBI4UIEXTPROC PFN_glVertexAttribI4uiEXT;
typedef PFNGLVERTEXATTRIBI1IVEXTPROC PFN_glVertexAttribI1ivEXT;
typedef PFNGLVERTEXATTRIBI2IVEXTPROC PFN_glVertexAttribI2ivEXT;
typedef PFNGLVERTEXATTRIBI3IVEXTPROC PFN_glVertexAttribI3ivEXT;
typedef PFNGLVERTEXATTRIBI4IVEXTPROC PFN_glVertexAttribI4ivEXT;
typedef PFNGLVERTEXATTRIBI1UIVEXTPROC PFN_glVertexAttribI1uivEXT;
typedef PFNGLVERTEXATTRIBI2UIVEXTPROC PFN_glVertexAttribI2uivEXT;
typedef PFNGLVERTEXATTRIBI3UIVEXTPROC PFN_glVertexAttribI3uivEXT;
typedef PFNGLVERTEXATTRIBI4UIVEXTPROC PFN_glVertexAttribI4uivEXT;
typedef PFNGLVERTEXATTRIBI4BVEXTPROC PFN_glVertexAttribI4bvEXT;
typedef PFNGLVERTEXATTRIBI4SVEXTPROC PFN_glVertexAttribI4svEXT;
typedef PFNGLVERTEXATTRIBI4UBVEXTPROC PFN_glVertexAttribI4ubvEXT;
typedef PFNGLVERTEXATTRIBI4USVEXTPROC PFN_glVertexAttribI4usvEXT;
typedef PFNGLVERTEXATTRIBIPOINTEREXTPROC PFN_glVertexAttribIPointerEXT;
typedef PFNGLGETVERTEXATTRIBIIVEXTPROC PFN_glGetVertexAttribIivEXT;
typedef PFNGLGETVERTEXATTRIBIUIVEXTPROC PFN_glGetVertexAttribIuivEXT;
typedef PFNGLGETHISTOGRAMEXTPROC PFN_glGetHistogramEXT;
typedef PFNGLGETHISTOGRAMPARAMETERFVEXTPROC PFN_glGetHistogramParameterfvEXT;
typedef PFNGLGETHISTOGRAMPARAMETERIVEXTPROC PFN_glGetHistogramParameterivEXT;
typedef PFNGLGETMINMAXEXTPROC PFN_glGetMinmaxEXT;
typedef PFNGLGETMINMAXPARAMETERFVEXTPROC PFN_glGetMinmaxParameterfvEXT;
typedef PFNGLGETMINMAXPARAMETERIVEXTPROC PFN_glGetMinmaxParameterivEXT;
typedef PFNGLHISTOGRAMEXTPROC PFN_glHistogramEXT;
typedef PFNGLMINMAXEXTPROC PFN_glMinmaxEXT;
typedef PFNGLRESETHISTOGRAMEXTPROC PFN_glResetHistogramEXT;
typedef PFNGLRESETMINMAXEXTPROC PFN_glResetMinmaxEXT;
typedef PFNGLINDEXFUNCEXTPROC PFN_glIndexFuncEXT;
typedef PFNGLINDEXMATERIALEXTPROC PFN_glIndexMaterialEXT;
typedef PFNGLAPPLYTEXTUREEXTPROC PFN_glApplyTextureEXT;
typedef PFNGLTEXTURELIGHTEXTPROC PFN_glTextureLightEXT;
typedef PFNGLTEXTUREMATERIALEXTPROC PFN_glTextureMaterialEXT;
typedef PFNGLGETUNSIGNEDBYTEVEXTPROC PFN_glGetUnsignedBytevEXT;
typedef PFNGLGETUNSIGNEDBYTEI_VEXTPROC PFN_glGetUnsignedBytei_vEXT;
typedef PFNGLDELETEMEMORYOBJECTSEXTPROC PFN_glDeleteMemoryObjectsEXT;
typedef PFNGLISMEMORYOBJECTEXTPROC PFN_glIsMemoryObjectEXT;
typedef PFNGLCREATEMEMORYOBJECTSEXTPROC PFN_glCreateMemoryObjectsEXT;
typedef PFNGLMEMORYOBJECTPARAMETERIVEXTPROC PFN_glMemoryObjectParameterivEXT;
typedef PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC
    PFN_glGetMemoryObjectParameterivEXT;
typedef PFNGLTEXSTORAGEMEM2DEXTPROC PFN_glTexStorageMem2DEXT;
typedef PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC
    PFN_glTexStorageMem2DMultisampleEXT;
typedef PFNGLTEXSTORAGEMEM3DEXTPROC PFN_glTexStorageMem3DEXT;
typedef PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC
    PFN_glTexStorageMem3DMultisampleEXT;
typedef PFNGLBUFFERSTORAGEMEMEXTPROC PFN_glBufferStorageMemEXT;
typedef PFNGLTEXTURESTORAGEMEM2DEXTPROC PFN_glTextureStorageMem2DEXT;
typedef PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC
    PFN_glTextureStorageMem2DMultisampleEXT;
typedef PFNGLTEXTURESTORAGEMEM3DEXTPROC PFN_glTextureStorageMem3DEXT;
typedef PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC
    PFN_glTextureStorageMem3DMultisampleEXT;
typedef PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC PFN_glNamedBufferStorageMemEXT;
typedef PFNGLTEXSTORAGEMEM1DEXTPROC PFN_glTexStorageMem1DEXT;
typedef PFNGLTEXTURESTORAGEMEM1DEXTPROC PFN_glTextureStorageMem1DEXT;
typedef PFNGLIMPORTMEMORYFDEXTPROC PFN_glImportMemoryFdEXT;
typedef PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC PFN_glImportMemoryWin32HandleEXT;
typedef PFNGLIMPORTMEMORYWIN32NAMEEXTPROC PFN_glImportMemoryWin32NameEXT;
typedef PFNGLMULTIDRAWARRAYSEXTPROC PFN_glMultiDrawArraysEXT;
typedef PFNGLMULTIDRAWELEMENTSEXTPROC PFN_glMultiDrawElementsEXT;
typedef PFNGLSAMPLEMASKEXTPROC PFN_glSampleMaskEXT;
typedef PFNGLSAMPLEPATTERNEXTPROC PFN_glSamplePatternEXT;
typedef PFNGLCOLORTABLEEXTPROC PFN_glColorTableEXT;
typedef PFNGLGETCOLORTABLEEXTPROC PFN_glGetColorTableEXT;
typedef PFNGLGETCOLORTABLEPARAMETERIVEXTPROC PFN_glGetColorTableParameterivEXT;
typedef PFNGLGETCOLORTABLEPARAMETERFVEXTPROC PFN_glGetColorTableParameterfvEXT;
typedef PFNGLPIXELTRANSFORMPARAMETERIEXTPROC PFN_glPixelTransformParameteriEXT;
typedef PFNGLPIXELTRANSFORMPARAMETERFEXTPROC PFN_glPixelTransformParameterfEXT;
typedef PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
    PFN_glPixelTransformParameterivEXT;
typedef PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
    PFN_glPixelTransformParameterfvEXT;
typedef PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
    PFN_glGetPixelTransformParameterivEXT;
typedef PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
    PFN_glGetPixelTransformParameterfvEXT;
typedef PFNGLPOINTPARAMETERFEXTPROC PFN_glPointParameterfEXT;
typedef PFNGLPOINTPARAMETERFVEXTPROC PFN_glPointParameterfvEXT;
typedef PFNGLPOLYGONOFFSETEXTPROC PFN_glPolygonOffsetEXT;
typedef PFNGLPOLYGONOFFSETCLAMPEXTPROC PFN_glPolygonOffsetClampEXT;
typedef PFNGLPROVOKINGVERTEXEXTPROC PFN_glProvokingVertexEXT;
typedef PFNGLRASTERSAMPLESEXTPROC PFN_glRasterSamplesEXT;
typedef PFNGLSECONDARYCOLOR3BEXTPROC PFN_glSecondaryColor3bEXT;
typedef PFNGLSECONDARYCOLOR3BVEXTPROC PFN_glSecondaryColor3bvEXT;
typedef PFNGLSECONDARYCOLOR3DEXTPROC PFN_glSecondaryColor3dEXT;
typedef PFNGLSECONDARYCOLOR3DVEXTPROC PFN_glSecondaryColor3dvEXT;
typedef PFNGLSECONDARYCOLOR3FEXTPROC PFN_glSecondaryColor3fEXT;
typedef PFNGLSECONDARYCOLOR3FVEXTPROC PFN_glSecondaryColor3fvEXT;
typedef PFNGLSECONDARYCOLOR3IEXTPROC PFN_glSecondaryColor3iEXT;
typedef PFNGLSECONDARYCOLOR3IVEXTPROC PFN_glSecondaryColor3ivEXT;
typedef PFNGLSECONDARYCOLOR3SEXTPROC PFN_glSecondaryColor3sEXT;
typedef PFNGLSECONDARYCOLOR3SVEXTPROC PFN_glSecondaryColor3svEXT;
typedef PFNGLSECONDARYCOLOR3UBEXTPROC PFN_glSecondaryColor3ubEXT;
typedef PFNGLSECONDARYCOLOR3UBVEXTPROC PFN_glSecondaryColor3ubvEXT;
typedef PFNGLSECONDARYCOLOR3UIEXTPROC PFN_glSecondaryColor3uiEXT;
typedef PFNGLSECONDARYCOLOR3UIVEXTPROC PFN_glSecondaryColor3uivEXT;
typedef PFNGLSECONDARYCOLOR3USEXTPROC PFN_glSecondaryColor3usEXT;
typedef PFNGLSECONDARYCOLOR3USVEXTPROC PFN_glSecondaryColor3usvEXT;
typedef PFNGLSECONDARYCOLORPOINTEREXTPROC PFN_glSecondaryColorPointerEXT;
typedef PFNGLGENSEMAPHORESEXTPROC PFN_glGenSemaphoresEXT;
typedef PFNGLDELETESEMAPHORESEXTPROC PFN_glDeleteSemaphoresEXT;
typedef PFNGLISSEMAPHOREEXTPROC PFN_glIsSemaphoreEXT;
typedef PFNGLSEMAPHOREPARAMETERUI64VEXTPROC PFN_glSemaphoreParameterui64vEXT;
typedef PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC
    PFN_glGetSemaphoreParameterui64vEXT;
typedef PFNGLWAITSEMAPHOREEXTPROC PFN_glWaitSemaphoreEXT;
typedef PFNGLSIGNALSEMAPHOREEXTPROC PFN_glSignalSemaphoreEXT;
typedef PFNGLIMPORTSEMAPHOREFDEXTPROC PFN_glImportSemaphoreFdEXT;
typedef PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC
    PFN_glImportSemaphoreWin32HandleEXT;
typedef PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC PFN_glImportSemaphoreWin32NameEXT;
typedef PFNGLUSESHADERPROGRAMEXTPROC PFN_glUseShaderProgramEXT;
typedef PFNGLACTIVEPROGRAMEXTPROC PFN_glActiveProgramEXT;
typedef PFNGLCREATESHADERPROGRAMEXTPROC PFN_glCreateShaderProgramEXT;
typedef PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC PFN_glFramebufferFetchBarrierEXT;
typedef PFNGLBINDIMAGETEXTUREEXTPROC PFN_glBindImageTextureEXT;
typedef PFNGLMEMORYBARRIEREXTPROC PFN_glMemoryBarrierEXT;
typedef PFNGLSTENCILCLEARTAGEXTPROC PFN_glStencilClearTagEXT;
typedef PFNGLACTIVESTENCILFACEEXTPROC PFN_glActiveStencilFaceEXT;
typedef PFNGLTEXSUBIMAGE1DEXTPROC PFN_glTexSubImage1DEXT;
typedef PFNGLTEXSUBIMAGE2DEXTPROC PFN_glTexSubImage2DEXT;
typedef PFNGLTEXIMAGE3DEXTPROC PFN_glTexImage3DEXT;
typedef PFNGLTEXSUBIMAGE3DEXTPROC PFN_glTexSubImage3DEXT;
typedef PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC PFN_glFramebufferTextureLayerEXT;
typedef PFNGLTEXBUFFEREXTPROC PFN_glTexBufferEXT;
typedef PFNGLTEXPARAMETERIIVEXTPROC PFN_glTexParameterIivEXT;
typedef PFNGLTEXPARAMETERIUIVEXTPROC PFN_glTexParameterIuivEXT;
typedef PFNGLGETTEXPARAMETERIIVEXTPROC PFN_glGetTexParameterIivEXT;
typedef PFNGLGETTEXPARAMETERIUIVEXTPROC PFN_glGetTexParameterIuivEXT;
typedef PFNGLCLEARCOLORIIEXTPROC PFN_glClearColorIiEXT;
typedef PFNGLCLEARCOLORIUIEXTPROC PFN_glClearColorIuiEXT;
typedef PFNGLARETEXTURESRESIDENTEXTPROC PFN_glAreTexturesResidentEXT;
typedef PFNGLBINDTEXTUREEXTPROC PFN_glBindTextureEXT;
typedef PFNGLDELETETEXTURESEXTPROC PFN_glDeleteTexturesEXT;
typedef PFNGLGENTEXTURESEXTPROC PFN_glGenTexturesEXT;
typedef PFNGLISTEXTUREEXTPROC PFN_glIsTextureEXT;
typedef PFNGLPRIORITIZETEXTURESEXTPROC PFN_glPrioritizeTexturesEXT;
typedef PFNGLTEXTURENORMALEXTPROC PFN_glTextureNormalEXT;
typedef PFNGLTEXSTORAGE1DEXTPROC PFN_glTexStorage1DEXT;
typedef PFNGLTEXSTORAGE2DEXTPROC PFN_glTexStorage2DEXT;
typedef PFNGLTEXSTORAGE3DEXTPROC PFN_glTexStorage3DEXT;
typedef PFNGLGETQUERYOBJECTI64VEXTPROC PFN_glGetQueryObjecti64vEXT;
typedef PFNGLGETQUERYOBJECTUI64VEXTPROC PFN_glGetQueryObjectui64vEXT;
typedef PFNGLBEGINTRANSFORMFEEDBACKEXTPROC PFN_glBeginTransformFeedbackEXT;
typedef PFNGLENDTRANSFORMFEEDBACKEXTPROC PFN_glEndTransformFeedbackEXT;
typedef PFNGLBINDBUFFERRANGEEXTPROC PFN_glBindBufferRangeEXT;
typedef PFNGLBINDBUFFEROFFSETEXTPROC PFN_glBindBufferOffsetEXT;
typedef PFNGLBINDBUFFERBASEEXTPROC PFN_glBindBufferBaseEXT;
typedef PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
    PFN_glTransformFeedbackVaryingsEXT;
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
    PFN_glGetTransformFeedbackVaryingEXT;
typedef PFNGLARRAYELEMENTEXTPROC PFN_glArrayElementEXT;
typedef PFNGLCOLORPOINTEREXTPROC PFN_glColorPointerEXT;
typedef PFNGLDRAWARRAYSEXTPROC PFN_glDrawArraysEXT;
typedef PFNGLEDGEFLAGPOINTEREXTPROC PFN_glEdgeFlagPointerEXT;
typedef PFNGLGETPOINTERVEXTPROC PFN_glGetPointervEXT;
typedef PFNGLINDEXPOINTEREXTPROC PFN_glIndexPointerEXT;
typedef PFNGLNORMALPOINTEREXTPROC PFN_glNormalPointerEXT;
typedef PFNGLTEXCOORDPOINTEREXTPROC PFN_glTexCoordPointerEXT;
typedef PFNGLVERTEXPOINTEREXTPROC PFN_glVertexPointerEXT;
typedef PFNGLVERTEXATTRIBL1DEXTPROC PFN_glVertexAttribL1dEXT;
typedef PFNGLVERTEXATTRIBL2DEXTPROC PFN_glVertexAttribL2dEXT;
typedef PFNGLVERTEXATTRIBL3DEXTPROC PFN_glVertexAttribL3dEXT;
typedef PFNGLVERTEXATTRIBL4DEXTPROC PFN_glVertexAttribL4dEXT;
typedef PFNGLVERTEXATTRIBL1DVEXTPROC PFN_glVertexAttribL1dvEXT;
typedef PFNGLVERTEXATTRIBL2DVEXTPROC PFN_glVertexAttribL2dvEXT;
typedef PFNGLVERTEXATTRIBL3DVEXTPROC PFN_glVertexAttribL3dvEXT;
typedef PFNGLVERTEXATTRIBL4DVEXTPROC PFN_glVertexAttribL4dvEXT;
typedef PFNGLVERTEXATTRIBLPOINTEREXTPROC PFN_glVertexAttribLPointerEXT;
typedef PFNGLGETVERTEXATTRIBLDVEXTPROC PFN_glGetVertexAttribLdvEXT;
typedef PFNGLBEGINVERTEXSHADEREXTPROC PFN_glBeginVertexShaderEXT;
typedef PFNGLENDVERTEXSHADEREXTPROC PFN_glEndVertexShaderEXT;
typedef PFNGLBINDVERTEXSHADEREXTPROC PFN_glBindVertexShaderEXT;
typedef PFNGLGENVERTEXSHADERSEXTPROC PFN_glGenVertexShadersEXT;
typedef PFNGLDELETEVERTEXSHADEREXTPROC PFN_glDeleteVertexShaderEXT;
typedef PFNGLSHADEROP1EXTPROC PFN_glShaderOp1EXT;
typedef PFNGLSHADEROP2EXTPROC PFN_glShaderOp2EXT;
typedef PFNGLSHADEROP3EXTPROC PFN_glShaderOp3EXT;
typedef PFNGLSWIZZLEEXTPROC PFN_glSwizzleEXT;
typedef PFNGLWRITEMASKEXTPROC PFN_glWriteMaskEXT;
typedef PFNGLINSERTCOMPONENTEXTPROC PFN_glInsertComponentEXT;
typedef PFNGLEXTRACTCOMPONENTEXTPROC PFN_glExtractComponentEXT;
typedef PFNGLGENSYMBOLSEXTPROC PFN_glGenSymbolsEXT;
typedef PFNGLSETINVARIANTEXTPROC PFN_glSetInvariantEXT;
typedef PFNGLSETLOCALCONSTANTEXTPROC PFN_glSetLocalConstantEXT;
typedef PFNGLVARIANTBVEXTPROC PFN_glVariantbvEXT;
typedef PFNGLVARIANTSVEXTPROC PFN_glVariantsvEXT;
typedef PFNGLVARIANTIVEXTPROC PFN_glVariantivEXT;
typedef PFNGLVARIANTFVEXTPROC PFN_glVariantfvEXT;
typedef PFNGLVARIANTDVEXTPROC PFN_glVariantdvEXT;
typedef PFNGLVARIANTUBVEXTPROC PFN_glVariantubvEXT;
typedef PFNGLVARIANTUSVEXTPROC PFN_glVariantusvEXT;
typedef PFNGLVARIANTUIVEXTPROC PFN_glVariantuivEXT;
typedef PFNGLVARIANTPOINTEREXTPROC PFN_glVariantPointerEXT;
typedef PFNGLENABLEVARIANTCLIENTSTATEEXTPROC PFN_glEnableVariantClientStateEXT;
typedef PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
    PFN_glDisableVariantClientStateEXT;
typedef PFNGLBINDLIGHTPARAMETEREXTPROC PFN_glBindLightParameterEXT;
typedef PFNGLBINDMATERIALPARAMETEREXTPROC PFN_glBindMaterialParameterEXT;
typedef PFNGLBINDTEXGENPARAMETEREXTPROC PFN_glBindTexGenParameterEXT;
typedef PFNGLBINDTEXTUREUNITPARAMETEREXTPROC PFN_glBindTextureUnitParameterEXT;
typedef PFNGLBINDPARAMETEREXTPROC PFN_glBindParameterEXT;
typedef PFNGLISVARIANTENABLEDEXTPROC PFN_glIsVariantEnabledEXT;
typedef PFNGLGETVARIANTBOOLEANVEXTPROC PFN_glGetVariantBooleanvEXT;
typedef PFNGLGETVARIANTINTEGERVEXTPROC PFN_glGetVariantIntegervEXT;
typedef PFNGLGETVARIANTFLOATVEXTPROC PFN_glGetVariantFloatvEXT;
typedef PFNGLGETVARIANTPOINTERVEXTPROC PFN_glGetVariantPointervEXT;
typedef PFNGLGETINVARIANTBOOLEANVEXTPROC PFN_glGetInvariantBooleanvEXT;
typedef PFNGLGETINVARIANTINTEGERVEXTPROC PFN_glGetInvariantIntegervEXT;
typedef PFNGLGETINVARIANTFLOATVEXTPROC PFN_glGetInvariantFloatvEXT;
typedef PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC PFN_glGetLocalConstantBooleanvEXT;
typedef PFNGLGETLOCALCONSTANTINTEGERVEXTPROC PFN_glGetLocalConstantIntegervEXT;
typedef PFNGLGETLOCALCONSTANTFLOATVEXTPROC PFN_glGetLocalConstantFloatvEXT;
typedef PFNGLVERTEXWEIGHTFEXTPROC PFN_glVertexWeightfEXT;
typedef PFNGLVERTEXWEIGHTFVEXTPROC PFN_glVertexWeightfvEXT;
typedef PFNGLVERTEXWEIGHTPOINTEREXTPROC PFN_glVertexWeightPointerEXT;
typedef PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC PFN_glAcquireKeyedMutexWin32EXT;
typedef PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC PFN_glReleaseKeyedMutexWin32EXT;
typedef PFNGLWINDOWRECTANGLESEXTPROC PFN_glWindowRectanglesEXT;
typedef PFNGLIMPORTSYNCEXTPROC PFN_glImportSyncEXT;
typedef PFNGLFRAMETERMINATORGREMEDYPROC PFN_glFrameTerminatorGREMEDY;
typedef PFNGLSTRINGMARKERGREMEDYPROC PFN_glStringMarkerGREMEDY;
typedef PFNGLIMAGETRANSFORMPARAMETERIHPPROC PFN_glImageTransformParameteriHP;
typedef PFNGLIMAGETRANSFORMPARAMETERFHPPROC PFN_glImageTransformParameterfHP;
typedef PFNGLIMAGETRANSFORMPARAMETERIVHPPROC PFN_glImageTransformParameterivHP;
typedef PFNGLIMAGETRANSFORMPARAMETERFVHPPROC PFN_glImageTransformParameterfvHP;
typedef PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
    PFN_glGetImageTransformParameterivHP;
typedef PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
    PFN_glGetImageTransformParameterfvHP;
typedef PFNGLMULTIMODEDRAWARRAYSIBMPROC PFN_glMultiModeDrawArraysIBM;
typedef PFNGLMULTIMODEDRAWELEMENTSIBMPROC PFN_glMultiModeDrawElementsIBM;
typedef PFNGLFLUSHSTATICDATAIBMPROC PFN_glFlushStaticDataIBM;
typedef PFNGLCOLORPOINTERLISTIBMPROC PFN_glColorPointerListIBM;
typedef PFNGLSECONDARYCOLORPOINTERLISTIBMPROC
    PFN_glSecondaryColorPointerListIBM;
typedef PFNGLEDGEFLAGPOINTERLISTIBMPROC PFN_glEdgeFlagPointerListIBM;
typedef PFNGLFOGCOORDPOINTERLISTIBMPROC PFN_glFogCoordPointerListIBM;
typedef PFNGLINDEXPOINTERLISTIBMPROC PFN_glIndexPointerListIBM;
typedef PFNGLNORMALPOINTERLISTIBMPROC PFN_glNormalPointerListIBM;
typedef PFNGLTEXCOORDPOINTERLISTIBMPROC PFN_glTexCoordPointerListIBM;
typedef PFNGLVERTEXPOINTERLISTIBMPROC PFN_glVertexPointerListIBM;
typedef PFNGLBLENDFUNCSEPARATEINGRPROC PFN_glBlendFuncSeparateINGR;
typedef PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC
    PFN_glApplyFramebufferAttachmentCMAAINTEL;
typedef PFNGLSYNCTEXTUREINTELPROC PFN_glSyncTextureINTEL;
typedef PFNGLUNMAPTEXTURE2DINTELPROC PFN_glUnmapTexture2DINTEL;
typedef PFNGLMAPTEXTURE2DINTELPROC PFN_glMapTexture2DINTEL;
typedef PFNGLVERTEXPOINTERVINTELPROC PFN_glVertexPointervINTEL;
typedef PFNGLNORMALPOINTERVINTELPROC PFN_glNormalPointervINTEL;
typedef PFNGLCOLORPOINTERVINTELPROC PFN_glColorPointervINTEL;
typedef PFNGLTEXCOORDPOINTERVINTELPROC PFN_glTexCoordPointervINTEL;
typedef PFNGLBEGINPERFQUERYINTELPROC PFN_glBeginPerfQueryINTEL;
typedef PFNGLCREATEPERFQUERYINTELPROC PFN_glCreatePerfQueryINTEL;
typedef PFNGLDELETEPERFQUERYINTELPROC PFN_glDeletePerfQueryINTEL;
typedef PFNGLENDPERFQUERYINTELPROC PFN_glEndPerfQueryINTEL;
typedef PFNGLGETFIRSTPERFQUERYIDINTELPROC PFN_glGetFirstPerfQueryIdINTEL;
typedef PFNGLGETNEXTPERFQUERYIDINTELPROC PFN_glGetNextPerfQueryIdINTEL;
typedef PFNGLGETPERFCOUNTERINFOINTELPROC PFN_glGetPerfCounterInfoINTEL;
typedef PFNGLGETPERFQUERYDATAINTELPROC PFN_glGetPerfQueryDataINTEL;
typedef PFNGLGETPERFQUERYIDBYNAMEINTELPROC PFN_glGetPerfQueryIdByNameINTEL;
typedef PFNGLGETPERFQUERYINFOINTELPROC PFN_glGetPerfQueryInfoINTEL;
typedef PFNGLFRAMEBUFFERPARAMETERIMESAPROC PFN_glFramebufferParameteriMESA;
typedef PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC
    PFN_glGetFramebufferParameterivMESA;
typedef PFNGLRESIZEBUFFERSMESAPROC PFN_glResizeBuffersMESA;
typedef PFNGLWINDOWPOS2DMESAPROC PFN_glWindowPos2dMESA;
typedef PFNGLWINDOWPOS2DVMESAPROC PFN_glWindowPos2dvMESA;
typedef PFNGLWINDOWPOS2FMESAPROC PFN_glWindowPos2fMESA;
typedef PFNGLWINDOWPOS2FVMESAPROC PFN_glWindowPos2fvMESA;
typedef PFNGLWINDOWPOS2IMESAPROC PFN_glWindowPos2iMESA;
typedef PFNGLWINDOWPOS2IVMESAPROC PFN_glWindowPos2ivMESA;
typedef PFNGLWINDOWPOS2SMESAPROC PFN_glWindowPos2sMESA;
typedef PFNGLWINDOWPOS2SVMESAPROC PFN_glWindowPos2svMESA;
typedef PFNGLWINDOWPOS3DMESAPROC PFN_glWindowPos3dMESA;
typedef PFNGLWINDOWPOS3DVMESAPROC PFN_glWindowPos3dvMESA;
typedef PFNGLWINDOWPOS3FMESAPROC PFN_glWindowPos3fMESA;
typedef PFNGLWINDOWPOS3FVMESAPROC PFN_glWindowPos3fvMESA;
typedef PFNGLWINDOWPOS3IMESAPROC PFN_glWindowPos3iMESA;
typedef PFNGLWINDOWPOS3IVMESAPROC PFN_glWindowPos3ivMESA;
typedef PFNGLWINDOWPOS3SMESAPROC PFN_glWindowPos3sMESA;
typedef PFNGLWINDOWPOS3SVMESAPROC PFN_glWindowPos3svMESA;
typedef PFNGLWINDOWPOS4DMESAPROC PFN_glWindowPos4dMESA;
typedef PFNGLWINDOWPOS4DVMESAPROC PFN_glWindowPos4dvMESA;
typedef PFNGLWINDOWPOS4FMESAPROC PFN_glWindowPos4fMESA;
typedef PFNGLWINDOWPOS4FVMESAPROC PFN_glWindowPos4fvMESA;
typedef PFNGLWINDOWPOS4IMESAPROC PFN_glWindowPos4iMESA;
typedef PFNGLWINDOWPOS4IVMESAPROC PFN_glWindowPos4ivMESA;
typedef PFNGLWINDOWPOS4SMESAPROC PFN_glWindowPos4sMESA;
typedef PFNGLWINDOWPOS4SVMESAPROC PFN_glWindowPos4svMESA;
typedef PFNGLBEGINCONDITIONALRENDERNVXPROC PFN_glBeginConditionalRenderNVX;
typedef PFNGLENDCONDITIONALRENDERNVXPROC PFN_glEndConditionalRenderNVX;
typedef PFNGLUPLOADGPUMASKNVXPROC PFN_glUploadGpuMaskNVX;
typedef PFNGLMULTICASTVIEWPORTARRAYVNVXPROC PFN_glMulticastViewportArrayvNVX;
typedef PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC
    PFN_glMulticastViewportPositionWScaleNVX;
typedef PFNGLMULTICASTSCISSORARRAYVNVXPROC PFN_glMulticastScissorArrayvNVX;
typedef PFNGLASYNCCOPYBUFFERSUBDATANVXPROC PFN_glAsyncCopyBufferSubDataNVX;
typedef PFNGLASYNCCOPYIMAGESUBDATANVXPROC PFN_glAsyncCopyImageSubDataNVX;
typedef PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC PFN_glLGPUNamedBufferSubDataNVX;
typedef PFNGLLGPUCOPYIMAGESUBDATANVXPROC PFN_glLGPUCopyImageSubDataNVX;
typedef PFNGLLGPUINTERLOCKNVXPROC PFN_glLGPUInterlockNVX;
typedef PFNGLCREATEPROGRESSFENCENVXPROC PFN_glCreateProgressFenceNVX;
typedef PFNGLSIGNALSEMAPHOREUI64NVXPROC PFN_glSignalSemaphoreui64NVX;
typedef PFNGLWAITSEMAPHOREUI64NVXPROC PFN_glWaitSemaphoreui64NVX;
typedef PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC PFN_glClientWaitSemaphoreui64NVX;
typedef PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC
    PFN_glAlphaToCoverageDitherControlNV;
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
    PFN_glMultiDrawArraysIndirectBindlessNV;
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
    PFN_glMultiDrawElementsIndirectBindlessNV;
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC
    PFN_glMultiDrawArraysIndirectBindlessCountNV;
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC
    PFN_glMultiDrawElementsIndirectBindlessCountNV;
typedef PFNGLGETTEXTUREHANDLENVPROC PFN_glGetTextureHandleNV;
typedef PFNGLGETTEXTURESAMPLERHANDLENVPROC PFN_glGetTextureSamplerHandleNV;
typedef PFNGLMAKETEXTUREHANDLERESIDENTNVPROC PFN_glMakeTextureHandleResidentNV;
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
    PFN_glMakeTextureHandleNonResidentNV;
typedef PFNGLGETIMAGEHANDLENVPROC PFN_glGetImageHandleNV;
typedef PFNGLMAKEIMAGEHANDLERESIDENTNVPROC PFN_glMakeImageHandleResidentNV;
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
    PFN_glMakeImageHandleNonResidentNV;
typedef PFNGLUNIFORMHANDLEUI64NVPROC PFN_glUniformHandleui64NV;
typedef PFNGLUNIFORMHANDLEUI64VNVPROC PFN_glUniformHandleui64vNV;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC PFN_glProgramUniformHandleui64NV;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC PFN_glProgramUniformHandleui64vNV;
typedef PFNGLISTEXTUREHANDLERESIDENTNVPROC PFN_glIsTextureHandleResidentNV;
typedef PFNGLISIMAGEHANDLERESIDENTNVPROC PFN_glIsImageHandleResidentNV;
typedef PFNGLBLENDPARAMETERINVPROC PFN_glBlendParameteriNV;
typedef PFNGLBLENDBARRIERNVPROC PFN_glBlendBarrierNV;
typedef PFNGLVIEWPORTPOSITIONWSCALENVPROC PFN_glViewportPositionWScaleNV;
typedef PFNGLCREATESTATESNVPROC PFN_glCreateStatesNV;
typedef PFNGLDELETESTATESNVPROC PFN_glDeleteStatesNV;
typedef PFNGLISSTATENVPROC PFN_glIsStateNV;
typedef PFNGLSTATECAPTURENVPROC PFN_glStateCaptureNV;
typedef PFNGLGETCOMMANDHEADERNVPROC PFN_glGetCommandHeaderNV;
typedef PFNGLGETSTAGEINDEXNVPROC PFN_glGetStageIndexNV;
typedef PFNGLDRAWCOMMANDSNVPROC PFN_glDrawCommandsNV;
typedef PFNGLDRAWCOMMANDSADDRESSNVPROC PFN_glDrawCommandsAddressNV;
typedef PFNGLDRAWCOMMANDSSTATESNVPROC PFN_glDrawCommandsStatesNV;
typedef PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC PFN_glDrawCommandsStatesAddressNV;
typedef PFNGLCREATECOMMANDLISTSNVPROC PFN_glCreateCommandListsNV;
typedef PFNGLDELETECOMMANDLISTSNVPROC PFN_glDeleteCommandListsNV;
typedef PFNGLISCOMMANDLISTNVPROC PFN_glIsCommandListNV;
typedef PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC
    PFN_glListDrawCommandsStatesClientNV;
typedef PFNGLCOMMANDLISTSEGMENTSNVPROC PFN_glCommandListSegmentsNV;
typedef PFNGLCOMPILECOMMANDLISTNVPROC PFN_glCompileCommandListNV;
typedef PFNGLCALLCOMMANDLISTNVPROC PFN_glCallCommandListNV;
typedef PFNGLBEGINCONDITIONALRENDERNVPROC PFN_glBeginConditionalRenderNV;
typedef PFNGLENDCONDITIONALRENDERNVPROC PFN_glEndConditionalRenderNV;
typedef PFNGLSUBPIXELPRECISIONBIASNVPROC PFN_glSubpixelPrecisionBiasNV;
typedef PFNGLCONSERVATIVERASTERPARAMETERFNVPROC
    PFN_glConservativeRasterParameterfNV;
typedef PFNGLCONSERVATIVERASTERPARAMETERINVPROC
    PFN_glConservativeRasterParameteriNV;
typedef PFNGLCOPYIMAGESUBDATANVPROC PFN_glCopyImageSubDataNV;
typedef PFNGLDEPTHRANGEDNVPROC PFN_glDepthRangedNV;
typedef PFNGLCLEARDEPTHDNVPROC PFN_glClearDepthdNV;
typedef PFNGLDEPTHBOUNDSDNVPROC PFN_glDepthBoundsdNV;
typedef PFNGLDRAWTEXTURENVPROC PFN_glDrawTextureNV;
typedef PFNGLDRAWVKIMAGENVPROC PFN_glDrawVkImageNV;
typedef PFNGLGETVKPROCADDRNVPROC PFN_glGetVkProcAddrNV;
typedef PFNGLWAITVKSEMAPHORENVPROC PFN_glWaitVkSemaphoreNV;
typedef PFNGLSIGNALVKSEMAPHORENVPROC PFN_glSignalVkSemaphoreNV;
typedef PFNGLSIGNALVKFENCENVPROC PFN_glSignalVkFenceNV;
typedef PFNGLMAPCONTROLPOINTSNVPROC PFN_glMapControlPointsNV;
typedef PFNGLMAPPARAMETERIVNVPROC PFN_glMapParameterivNV;
typedef PFNGLMAPPARAMETERFVNVPROC PFN_glMapParameterfvNV;
typedef PFNGLGETMAPCONTROLPOINTSNVPROC PFN_glGetMapControlPointsNV;
typedef PFNGLGETMAPPARAMETERIVNVPROC PFN_glGetMapParameterivNV;
typedef PFNGLGETMAPPARAMETERFVNVPROC PFN_glGetMapParameterfvNV;
typedef PFNGLGETMAPATTRIBPARAMETERIVNVPROC PFN_glGetMapAttribParameterivNV;
typedef PFNGLGETMAPATTRIBPARAMETERFVNVPROC PFN_glGetMapAttribParameterfvNV;
typedef PFNGLEVALMAPSNVPROC PFN_glEvalMapsNV;
typedef PFNGLGETMULTISAMPLEFVNVPROC PFN_glGetMultisamplefvNV;
typedef PFNGLSAMPLEMASKINDEXEDNVPROC PFN_glSampleMaskIndexedNV;
typedef PFNGLTEXRENDERBUFFERNVPROC PFN_glTexRenderbufferNV;
typedef PFNGLDELETEFENCESNVPROC PFN_glDeleteFencesNV;
typedef PFNGLGENFENCESNVPROC PFN_glGenFencesNV;
typedef PFNGLISFENCENVPROC PFN_glIsFenceNV;
typedef PFNGLTESTFENCENVPROC PFN_glTestFenceNV;
typedef PFNGLGETFENCEIVNVPROC PFN_glGetFenceivNV;
typedef PFNGLFINISHFENCENVPROC PFN_glFinishFenceNV;
typedef PFNGLSETFENCENVPROC PFN_glSetFenceNV;
typedef PFNGLFRAGMENTCOVERAGECOLORNVPROC PFN_glFragmentCoverageColorNV;
typedef PFNGLPROGRAMNAMEDPARAMETER4FNVPROC PFN_glProgramNamedParameter4fNV;
typedef PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC PFN_glProgramNamedParameter4fvNV;
typedef PFNGLPROGRAMNAMEDPARAMETER4DNVPROC PFN_glProgramNamedParameter4dNV;
typedef PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC PFN_glProgramNamedParameter4dvNV;
typedef PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
    PFN_glGetProgramNamedParameterfvNV;
typedef PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
    PFN_glGetProgramNamedParameterdvNV;
typedef PFNGLCOVERAGEMODULATIONTABLENVPROC PFN_glCoverageModulationTableNV;
typedef PFNGLGETCOVERAGEMODULATIONTABLENVPROC
    PFN_glGetCoverageModulationTableNV;
typedef PFNGLCOVERAGEMODULATIONNVPROC PFN_glCoverageModulationNV;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
    PFN_glRenderbufferStorageMultisampleCoverageNV;
typedef PFNGLPROGRAMVERTEXLIMITNVPROC PFN_glProgramVertexLimitNV;
typedef PFNGLFRAMEBUFFERTEXTUREEXTPROC PFN_glFramebufferTextureEXT;
typedef PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC PFN_glFramebufferTextureFaceEXT;
typedef PFNGLRENDERGPUMASKNVPROC PFN_glRenderGpuMaskNV;
typedef PFNGLMULTICASTBUFFERSUBDATANVPROC PFN_glMulticastBufferSubDataNV;
typedef PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC
    PFN_glMulticastCopyBufferSubDataNV;
typedef PFNGLMULTICASTCOPYIMAGESUBDATANVPROC PFN_glMulticastCopyImageSubDataNV;
typedef PFNGLMULTICASTBLITFRAMEBUFFERNVPROC PFN_glMulticastBlitFramebufferNV;
typedef PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
    PFN_glMulticastFramebufferSampleLocationsfvNV;
typedef PFNGLMULTICASTBARRIERNVPROC PFN_glMulticastBarrierNV;
typedef PFNGLMULTICASTWAITSYNCNVPROC PFN_glMulticastWaitSyncNV;
typedef PFNGLMULTICASTGETQUERYOBJECTIVNVPROC PFN_glMulticastGetQueryObjectivNV;
typedef PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC
    PFN_glMulticastGetQueryObjectuivNV;
typedef PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC
    PFN_glMulticastGetQueryObjecti64vNV;
typedef PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC
    PFN_glMulticastGetQueryObjectui64vNV;
typedef PFNGLPROGRAMLOCALPARAMETERI4INVPROC PFN_glProgramLocalParameterI4iNV;
typedef PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC PFN_glProgramLocalParameterI4ivNV;
typedef PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
    PFN_glProgramLocalParametersI4ivNV;
typedef PFNGLPROGRAMLOCALPARAMETERI4UINVPROC PFN_glProgramLocalParameterI4uiNV;
typedef PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
    PFN_glProgramLocalParameterI4uivNV;
typedef PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
    PFN_glProgramLocalParametersI4uivNV;
typedef PFNGLPROGRAMENVPARAMETERI4INVPROC PFN_glProgramEnvParameterI4iNV;
typedef PFNGLPROGRAMENVPARAMETERI4IVNVPROC PFN_glProgramEnvParameterI4ivNV;
typedef PFNGLPROGRAMENVPARAMETERSI4IVNVPROC PFN_glProgramEnvParametersI4ivNV;
typedef PFNGLPROGRAMENVPARAMETERI4UINVPROC PFN_glProgramEnvParameterI4uiNV;
typedef PFNGLPROGRAMENVPARAMETERI4UIVNVPROC PFN_glProgramEnvParameterI4uivNV;
typedef PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC PFN_glProgramEnvParametersI4uivNV;
typedef PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
    PFN_glGetProgramLocalParameterIivNV;
typedef PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
    PFN_glGetProgramLocalParameterIuivNV;
typedef PFNGLGETPROGRAMENVPARAMETERIIVNVPROC PFN_glGetProgramEnvParameterIivNV;
typedef PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
    PFN_glGetProgramEnvParameterIuivNV;
typedef PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
    PFN_glProgramSubroutineParametersuivNV;
typedef PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
    PFN_glGetProgramSubroutineParameteruivNV;
typedef PFNGLVERTEX2HNVPROC PFN_glVertex2hNV;
typedef PFNGLVERTEX2HVNVPROC PFN_glVertex2hvNV;
typedef PFNGLVERTEX3HNVPROC PFN_glVertex3hNV;
typedef PFNGLVERTEX3HVNVPROC PFN_glVertex3hvNV;
typedef PFNGLVERTEX4HNVPROC PFN_glVertex4hNV;
typedef PFNGLVERTEX4HVNVPROC PFN_glVertex4hvNV;
typedef PFNGLNORMAL3HNVPROC PFN_glNormal3hNV;
typedef PFNGLNORMAL3HVNVPROC PFN_glNormal3hvNV;
typedef PFNGLCOLOR3HNVPROC PFN_glColor3hNV;
typedef PFNGLCOLOR3HVNVPROC PFN_glColor3hvNV;
typedef PFNGLCOLOR4HNVPROC PFN_glColor4hNV;
typedef PFNGLCOLOR4HVNVPROC PFN_glColor4hvNV;
typedef PFNGLTEXCOORD1HNVPROC PFN_glTexCoord1hNV;
typedef PFNGLTEXCOORD1HVNVPROC PFN_glTexCoord1hvNV;
typedef PFNGLTEXCOORD2HNVPROC PFN_glTexCoord2hNV;
typedef PFNGLTEXCOORD2HVNVPROC PFN_glTexCoord2hvNV;
typedef PFNGLTEXCOORD3HNVPROC PFN_glTexCoord3hNV;
typedef PFNGLTEXCOORD3HVNVPROC PFN_glTexCoord3hvNV;
typedef PFNGLTEXCOORD4HNVPROC PFN_glTexCoord4hNV;
typedef PFNGLTEXCOORD4HVNVPROC PFN_glTexCoord4hvNV;
typedef PFNGLMULTITEXCOORD1HNVPROC PFN_glMultiTexCoord1hNV;
typedef PFNGLMULTITEXCOORD1HVNVPROC PFN_glMultiTexCoord1hvNV;
typedef PFNGLMULTITEXCOORD2HNVPROC PFN_glMultiTexCoord2hNV;
typedef PFNGLMULTITEXCOORD2HVNVPROC PFN_glMultiTexCoord2hvNV;
typedef PFNGLMULTITEXCOORD3HNVPROC PFN_glMultiTexCoord3hNV;
typedef PFNGLMULTITEXCOORD3HVNVPROC PFN_glMultiTexCoord3hvNV;
typedef PFNGLMULTITEXCOORD4HNVPROC PFN_glMultiTexCoord4hNV;
typedef PFNGLMULTITEXCOORD4HVNVPROC PFN_glMultiTexCoord4hvNV;
typedef PFNGLVERTEXATTRIB1HNVPROC PFN_glVertexAttrib1hNV;
typedef PFNGLVERTEXATTRIB1HVNVPROC PFN_glVertexAttrib1hvNV;
typedef PFNGLVERTEXATTRIB2HNVPROC PFN_glVertexAttrib2hNV;
typedef PFNGLVERTEXATTRIB2HVNVPROC PFN_glVertexAttrib2hvNV;
typedef PFNGLVERTEXATTRIB3HNVPROC PFN_glVertexAttrib3hNV;
typedef PFNGLVERTEXATTRIB3HVNVPROC PFN_glVertexAttrib3hvNV;
typedef PFNGLVERTEXATTRIB4HNVPROC PFN_glVertexAttrib4hNV;
typedef PFNGLVERTEXATTRIB4HVNVPROC PFN_glVertexAttrib4hvNV;
typedef PFNGLVERTEXATTRIBS1HVNVPROC PFN_glVertexAttribs1hvNV;
typedef PFNGLVERTEXATTRIBS2HVNVPROC PFN_glVertexAttribs2hvNV;
typedef PFNGLVERTEXATTRIBS3HVNVPROC PFN_glVertexAttribs3hvNV;
typedef PFNGLVERTEXATTRIBS4HVNVPROC PFN_glVertexAttribs4hvNV;
typedef PFNGLFOGCOORDHNVPROC PFN_glFogCoordhNV;
typedef PFNGLFOGCOORDHVNVPROC PFN_glFogCoordhvNV;
typedef PFNGLSECONDARYCOLOR3HNVPROC PFN_glSecondaryColor3hNV;
typedef PFNGLSECONDARYCOLOR3HVNVPROC PFN_glSecondaryColor3hvNV;
typedef PFNGLVERTEXWEIGHTHNVPROC PFN_glVertexWeighthNV;
typedef PFNGLVERTEXWEIGHTHVNVPROC PFN_glVertexWeighthvNV;
typedef PFNGLGETINTERNALFORMATSAMPLEIVNVPROC PFN_glGetInternalformatSampleivNV;
typedef PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC
    PFN_glGetMemoryObjectDetachedResourcesuivNV;
typedef PFNGLRESETMEMORYOBJECTPARAMETERNVPROC
    PFN_glResetMemoryObjectParameterNV;
typedef PFNGLTEXATTACHMEMORYNVPROC PFN_glTexAttachMemoryNV;
typedef PFNGLBUFFERATTACHMEMORYNVPROC PFN_glBufferAttachMemoryNV;
typedef PFNGLTEXTUREATTACHMEMORYNVPROC PFN_glTextureAttachMemoryNV;
typedef PFNGLNAMEDBUFFERATTACHMEMORYNVPROC PFN_glNamedBufferAttachMemoryNV;
typedef PFNGLBUFFERPAGECOMMITMENTMEMNVPROC PFN_glBufferPageCommitmentMemNV;
typedef PFNGLTEXPAGECOMMITMENTMEMNVPROC PFN_glTexPageCommitmentMemNV;
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC
    PFN_glNamedBufferPageCommitmentMemNV;
typedef PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC PFN_glTexturePageCommitmentMemNV;
typedef PFNGLDRAWMESHTASKSNVPROC PFN_glDrawMeshTasksNV;
typedef PFNGLDRAWMESHTASKSINDIRECTNVPROC PFN_glDrawMeshTasksIndirectNV;
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC
    PFN_glMultiDrawMeshTasksIndirectNV;
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC
    PFN_glMultiDrawMeshTasksIndirectCountNV;
typedef PFNGLGENOCCLUSIONQUERIESNVPROC PFN_glGenOcclusionQueriesNV;
typedef PFNGLDELETEOCCLUSIONQUERIESNVPROC PFN_glDeleteOcclusionQueriesNV;
typedef PFNGLISOCCLUSIONQUERYNVPROC PFN_glIsOcclusionQueryNV;
typedef PFNGLBEGINOCCLUSIONQUERYNVPROC PFN_glBeginOcclusionQueryNV;
typedef PFNGLENDOCCLUSIONQUERYNVPROC PFN_glEndOcclusionQueryNV;
typedef PFNGLGETOCCLUSIONQUERYIVNVPROC PFN_glGetOcclusionQueryivNV;
typedef PFNGLGETOCCLUSIONQUERYUIVNVPROC PFN_glGetOcclusionQueryuivNV;
typedef PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC PFN_glProgramBufferParametersfvNV;
typedef PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
    PFN_glProgramBufferParametersIivNV;
typedef PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
    PFN_glProgramBufferParametersIuivNV;
typedef PFNGLGENPATHSNVPROC PFN_glGenPathsNV;
typedef PFNGLDELETEPATHSNVPROC PFN_glDeletePathsNV;
typedef PFNGLISPATHNVPROC PFN_glIsPathNV;
typedef PFNGLPATHCOMMANDSNVPROC PFN_glPathCommandsNV;
typedef PFNGLPATHCOORDSNVPROC PFN_glPathCoordsNV;
typedef PFNGLPATHSUBCOMMANDSNVPROC PFN_glPathSubCommandsNV;
typedef PFNGLPATHSUBCOORDSNVPROC PFN_glPathSubCoordsNV;
typedef PFNGLPATHSTRINGNVPROC PFN_glPathStringNV;
typedef PFNGLPATHGLYPHSNVPROC PFN_glPathGlyphsNV;
typedef PFNGLPATHGLYPHRANGENVPROC PFN_glPathGlyphRangeNV;
typedef PFNGLWEIGHTPATHSNVPROC PFN_glWeightPathsNV;
typedef PFNGLCOPYPATHNVPROC PFN_glCopyPathNV;
typedef PFNGLINTERPOLATEPATHSNVPROC PFN_glInterpolatePathsNV;
typedef PFNGLTRANSFORMPATHNVPROC PFN_glTransformPathNV;
typedef PFNGLPATHPARAMETERIVNVPROC PFN_glPathParameterivNV;
typedef PFNGLPATHPARAMETERINVPROC PFN_glPathParameteriNV;
typedef PFNGLPATHPARAMETERFVNVPROC PFN_glPathParameterfvNV;
typedef PFNGLPATHPARAMETERFNVPROC PFN_glPathParameterfNV;
typedef PFNGLPATHDASHARRAYNVPROC PFN_glPathDashArrayNV;
typedef PFNGLPATHSTENCILFUNCNVPROC PFN_glPathStencilFuncNV;
typedef PFNGLPATHSTENCILDEPTHOFFSETNVPROC PFN_glPathStencilDepthOffsetNV;
typedef PFNGLSTENCILFILLPATHNVPROC PFN_glStencilFillPathNV;
typedef PFNGLSTENCILSTROKEPATHNVPROC PFN_glStencilStrokePathNV;
typedef PFNGLSTENCILFILLPATHINSTANCEDNVPROC PFN_glStencilFillPathInstancedNV;
typedef PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
    PFN_glStencilStrokePathInstancedNV;
typedef PFNGLPATHCOVERDEPTHFUNCNVPROC PFN_glPathCoverDepthFuncNV;
typedef PFNGLCOVERFILLPATHNVPROC PFN_glCoverFillPathNV;
typedef PFNGLCOVERSTROKEPATHNVPROC PFN_glCoverStrokePathNV;
typedef PFNGLCOVERFILLPATHINSTANCEDNVPROC PFN_glCoverFillPathInstancedNV;
typedef PFNGLCOVERSTROKEPATHINSTANCEDNVPROC PFN_glCoverStrokePathInstancedNV;
typedef PFNGLGETPATHPARAMETERIVNVPROC PFN_glGetPathParameterivNV;
typedef PFNGLGETPATHPARAMETERFVNVPROC PFN_glGetPathParameterfvNV;
typedef PFNGLGETPATHCOMMANDSNVPROC PFN_glGetPathCommandsNV;
typedef PFNGLGETPATHCOORDSNVPROC PFN_glGetPathCoordsNV;
typedef PFNGLGETPATHDASHARRAYNVPROC PFN_glGetPathDashArrayNV;
typedef PFNGLGETPATHMETRICSNVPROC PFN_glGetPathMetricsNV;
typedef PFNGLGETPATHMETRICRANGENVPROC PFN_glGetPathMetricRangeNV;
typedef PFNGLGETPATHSPACINGNVPROC PFN_glGetPathSpacingNV;
typedef PFNGLISPOINTINFILLPATHNVPROC PFN_glIsPointInFillPathNV;
typedef PFNGLISPOINTINSTROKEPATHNVPROC PFN_glIsPointInStrokePathNV;
typedef PFNGLGETPATHLENGTHNVPROC PFN_glGetPathLengthNV;
typedef PFNGLPOINTALONGPATHNVPROC PFN_glPointAlongPathNV;
typedef PFNGLMATRIXLOAD3X2FNVPROC PFN_glMatrixLoad3x2fNV;
typedef PFNGLMATRIXLOAD3X3FNVPROC PFN_glMatrixLoad3x3fNV;
typedef PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC PFN_glMatrixLoadTranspose3x3fNV;
typedef PFNGLMATRIXMULT3X2FNVPROC PFN_glMatrixMult3x2fNV;
typedef PFNGLMATRIXMULT3X3FNVPROC PFN_glMatrixMult3x3fNV;
typedef PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC PFN_glMatrixMultTranspose3x3fNV;
typedef PFNGLSTENCILTHENCOVERFILLPATHNVPROC PFN_glStencilThenCoverFillPathNV;
typedef PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC
    PFN_glStencilThenCoverStrokePathNV;
typedef PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC
    PFN_glStencilThenCoverFillPathInstancedNV;
typedef PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC
    PFN_glStencilThenCoverStrokePathInstancedNV;
typedef PFNGLPATHGLYPHINDEXRANGENVPROC PFN_glPathGlyphIndexRangeNV;
typedef PFNGLPATHGLYPHINDEXARRAYNVPROC PFN_glPathGlyphIndexArrayNV;
typedef PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC PFN_glPathMemoryGlyphIndexArrayNV;
typedef PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC
    PFN_glProgramPathFragmentInputGenNV;
typedef PFNGLGETPROGRAMRESOURCEFVNVPROC PFN_glGetProgramResourcefvNV;
typedef PFNGLPATHCOLORGENNVPROC PFN_glPathColorGenNV;
typedef PFNGLPATHTEXGENNVPROC PFN_glPathTexGenNV;
typedef PFNGLPATHFOGGENNVPROC PFN_glPathFogGenNV;
typedef PFNGLGETPATHCOLORGENIVNVPROC PFN_glGetPathColorGenivNV;
typedef PFNGLGETPATHCOLORGENFVNVPROC PFN_glGetPathColorGenfvNV;
typedef PFNGLGETPATHTEXGENIVNVPROC PFN_glGetPathTexGenivNV;
typedef PFNGLGETPATHTEXGENFVNVPROC PFN_glGetPathTexGenfvNV;
typedef PFNGLPIXELDATARANGENVPROC PFN_glPixelDataRangeNV;
typedef PFNGLFLUSHPIXELDATARANGENVPROC PFN_glFlushPixelDataRangeNV;
typedef PFNGLPOINTPARAMETERINVPROC PFN_glPointParameteriNV;
typedef PFNGLPOINTPARAMETERIVNVPROC PFN_glPointParameterivNV;
typedef PFNGLPRESENTFRAMEKEYEDNVPROC PFN_glPresentFrameKeyedNV;
typedef PFNGLPRESENTFRAMEDUALFILLNVPROC PFN_glPresentFrameDualFillNV;
typedef PFNGLGETVIDEOIVNVPROC PFN_glGetVideoivNV;
typedef PFNGLGETVIDEOUIVNVPROC PFN_glGetVideouivNV;
typedef PFNGLGETVIDEOI64VNVPROC PFN_glGetVideoi64vNV;
typedef PFNGLGETVIDEOUI64VNVPROC PFN_glGetVideoui64vNV;
typedef PFNGLPRIMITIVERESTARTNVPROC PFN_glPrimitiveRestartNV;
typedef PFNGLPRIMITIVERESTARTINDEXNVPROC PFN_glPrimitiveRestartIndexNV;
typedef PFNGLQUERYRESOURCENVPROC PFN_glQueryResourceNV;
typedef PFNGLGENQUERYRESOURCETAGNVPROC PFN_glGenQueryResourceTagNV;
typedef PFNGLDELETEQUERYRESOURCETAGNVPROC PFN_glDeleteQueryResourceTagNV;
typedef PFNGLQUERYRESOURCETAGNVPROC PFN_glQueryResourceTagNV;
typedef PFNGLCOMBINERPARAMETERFVNVPROC PFN_glCombinerParameterfvNV;
typedef PFNGLCOMBINERPARAMETERFNVPROC PFN_glCombinerParameterfNV;
typedef PFNGLCOMBINERPARAMETERIVNVPROC PFN_glCombinerParameterivNV;
typedef PFNGLCOMBINERPARAMETERINVPROC PFN_glCombinerParameteriNV;
typedef PFNGLCOMBINERINPUTNVPROC PFN_glCombinerInputNV;
typedef PFNGLCOMBINEROUTPUTNVPROC PFN_glCombinerOutputNV;
typedef PFNGLFINALCOMBINERINPUTNVPROC PFN_glFinalCombinerInputNV;
typedef PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
    PFN_glGetCombinerInputParameterfvNV;
typedef PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
    PFN_glGetCombinerInputParameterivNV;
typedef PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
    PFN_glGetCombinerOutputParameterfvNV;
typedef PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
    PFN_glGetCombinerOutputParameterivNV;
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
    PFN_glGetFinalCombinerInputParameterfvNV;
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
    PFN_glGetFinalCombinerInputParameterivNV;
typedef PFNGLCOMBINERSTAGEPARAMETERFVNVPROC PFN_glCombinerStageParameterfvNV;
typedef PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
    PFN_glGetCombinerStageParameterfvNV;
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
    PFN_glFramebufferSampleLocationsfvNV;
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
    PFN_glNamedFramebufferSampleLocationsfvNV;
typedef PFNGLRESOLVEDEPTHVALUESNVPROC PFN_glResolveDepthValuesNV;
typedef PFNGLSCISSOREXCLUSIVENVPROC PFN_glScissorExclusiveNV;
typedef PFNGLSCISSOREXCLUSIVEARRAYVNVPROC PFN_glScissorExclusiveArrayvNV;
typedef PFNGLMAKEBUFFERRESIDENTNVPROC PFN_glMakeBufferResidentNV;
typedef PFNGLMAKEBUFFERNONRESIDENTNVPROC PFN_glMakeBufferNonResidentNV;
typedef PFNGLISBUFFERRESIDENTNVPROC PFN_glIsBufferResidentNV;
typedef PFNGLMAKENAMEDBUFFERRESIDENTNVPROC PFN_glMakeNamedBufferResidentNV;
typedef PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
    PFN_glMakeNamedBufferNonResidentNV;
typedef PFNGLISNAMEDBUFFERRESIDENTNVPROC PFN_glIsNamedBufferResidentNV;
typedef PFNGLGETBUFFERPARAMETERUI64VNVPROC PFN_glGetBufferParameterui64vNV;
typedef PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
    PFN_glGetNamedBufferParameterui64vNV;
typedef PFNGLGETINTEGERUI64VNVPROC PFN_glGetIntegerui64vNV;
typedef PFNGLUNIFORMUI64NVPROC PFN_glUniformui64NV;
typedef PFNGLUNIFORMUI64VNVPROC PFN_glUniformui64vNV;
typedef PFNGLPROGRAMUNIFORMUI64NVPROC PFN_glProgramUniformui64NV;
typedef PFNGLPROGRAMUNIFORMUI64VNVPROC PFN_glProgramUniformui64vNV;
typedef PFNGLBINDSHADINGRATEIMAGENVPROC PFN_glBindShadingRateImageNV;
typedef PFNGLGETSHADINGRATEIMAGEPALETTENVPROC
    PFN_glGetShadingRateImagePaletteNV;
typedef PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC
    PFN_glGetShadingRateSampleLocationivNV;
typedef PFNGLSHADINGRATEIMAGEBARRIERNVPROC PFN_glShadingRateImageBarrierNV;
typedef PFNGLSHADINGRATEIMAGEPALETTENVPROC PFN_glShadingRateImagePaletteNV;
typedef PFNGLSHADINGRATESAMPLEORDERNVPROC PFN_glShadingRateSampleOrderNV;
typedef PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC
    PFN_glShadingRateSampleOrderCustomNV;
typedef PFNGLTEXTUREBARRIERNVPROC PFN_glTextureBarrierNV;
typedef PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
    PFN_glTexImage2DMultisampleCoverageNV;
typedef PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
    PFN_glTexImage3DMultisampleCoverageNV;
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC PFN_glTextureImage2DMultisampleNV;
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC PFN_glTextureImage3DMultisampleNV;
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
    PFN_glTextureImage2DMultisampleCoverageNV;
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
    PFN_glTextureImage3DMultisampleCoverageNV;
typedef PFNGLCREATESEMAPHORESNVPROC PFN_glCreateSemaphoresNV;
typedef PFNGLSEMAPHOREPARAMETERIVNVPROC PFN_glSemaphoreParameterivNV;
typedef PFNGLGETSEMAPHOREPARAMETERIVNVPROC PFN_glGetSemaphoreParameterivNV;
typedef PFNGLBEGINTRANSFORMFEEDBACKNVPROC PFN_glBeginTransformFeedbackNV;
typedef PFNGLENDTRANSFORMFEEDBACKNVPROC PFN_glEndTransformFeedbackNV;
typedef PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC PFN_glTransformFeedbackAttribsNV;
typedef PFNGLBINDBUFFERRANGENVPROC PFN_glBindBufferRangeNV;
typedef PFNGLBINDBUFFEROFFSETNVPROC PFN_glBindBufferOffsetNV;
typedef PFNGLBINDBUFFERBASENVPROC PFN_glBindBufferBaseNV;
typedef PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC PFN_glTransformFeedbackVaryingsNV;
typedef PFNGLACTIVEVARYINGNVPROC PFN_glActiveVaryingNV;
typedef PFNGLGETVARYINGLOCATIONNVPROC PFN_glGetVaryingLocationNV;
typedef PFNGLGETACTIVEVARYINGNVPROC PFN_glGetActiveVaryingNV;
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
    PFN_glGetTransformFeedbackVaryingNV;
typedef PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
    PFN_glTransformFeedbackStreamAttribsNV;
typedef PFNGLBINDTRANSFORMFEEDBACKNVPROC PFN_glBindTransformFeedbackNV;
typedef PFNGLDELETETRANSFORMFEEDBACKSNVPROC PFN_glDeleteTransformFeedbacksNV;
typedef PFNGLGENTRANSFORMFEEDBACKSNVPROC PFN_glGenTransformFeedbacksNV;
typedef PFNGLISTRANSFORMFEEDBACKNVPROC PFN_glIsTransformFeedbackNV;
typedef PFNGLPAUSETRANSFORMFEEDBACKNVPROC PFN_glPauseTransformFeedbackNV;
typedef PFNGLRESUMETRANSFORMFEEDBACKNVPROC PFN_glResumeTransformFeedbackNV;
typedef PFNGLDRAWTRANSFORMFEEDBACKNVPROC PFN_glDrawTransformFeedbackNV;
typedef PFNGLVDPAUINITNVPROC PFN_glVDPAUInitNV;
typedef PFNGLVDPAUFININVPROC PFN_glVDPAUFiniNV;
typedef PFNGLVDPAUREGISTERVIDEOSURFACENVPROC PFN_glVDPAURegisterVideoSurfaceNV;
typedef PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
    PFN_glVDPAURegisterOutputSurfaceNV;
typedef PFNGLVDPAUISSURFACENVPROC PFN_glVDPAUIsSurfaceNV;
typedef PFNGLVDPAUUNREGISTERSURFACENVPROC PFN_glVDPAUUnregisterSurfaceNV;
typedef PFNGLVDPAUGETSURFACEIVNVPROC PFN_glVDPAUGetSurfaceivNV;
typedef PFNGLVDPAUSURFACEACCESSNVPROC PFN_glVDPAUSurfaceAccessNV;
typedef PFNGLVDPAUMAPSURFACESNVPROC PFN_glVDPAUMapSurfacesNV;
typedef PFNGLVDPAUUNMAPSURFACESNVPROC PFN_glVDPAUUnmapSurfacesNV;
typedef PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC
    PFN_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
typedef PFNGLFLUSHVERTEXARRAYRANGENVPROC PFN_glFlushVertexArrayRangeNV;
typedef PFNGLVERTEXARRAYRANGENVPROC PFN_glVertexArrayRangeNV;
typedef PFNGLVERTEXATTRIBL1I64NVPROC PFN_glVertexAttribL1i64NV;
typedef PFNGLVERTEXATTRIBL2I64NVPROC PFN_glVertexAttribL2i64NV;
typedef PFNGLVERTEXATTRIBL3I64NVPROC PFN_glVertexAttribL3i64NV;
typedef PFNGLVERTEXATTRIBL4I64NVPROC PFN_glVertexAttribL4i64NV;
typedef PFNGLVERTEXATTRIBL1I64VNVPROC PFN_glVertexAttribL1i64vNV;
typedef PFNGLVERTEXATTRIBL2I64VNVPROC PFN_glVertexAttribL2i64vNV;
typedef PFNGLVERTEXATTRIBL3I64VNVPROC PFN_glVertexAttribL3i64vNV;
typedef PFNGLVERTEXATTRIBL4I64VNVPROC PFN_glVertexAttribL4i64vNV;
typedef PFNGLVERTEXATTRIBL1UI64NVPROC PFN_glVertexAttribL1ui64NV;
typedef PFNGLVERTEXATTRIBL2UI64NVPROC PFN_glVertexAttribL2ui64NV;
typedef PFNGLVERTEXATTRIBL3UI64NVPROC PFN_glVertexAttribL3ui64NV;
typedef PFNGLVERTEXATTRIBL4UI64NVPROC PFN_glVertexAttribL4ui64NV;
typedef PFNGLVERTEXATTRIBL1UI64VNVPROC PFN_glVertexAttribL1ui64vNV;
typedef PFNGLVERTEXATTRIBL2UI64VNVPROC PFN_glVertexAttribL2ui64vNV;
typedef PFNGLVERTEXATTRIBL3UI64VNVPROC PFN_glVertexAttribL3ui64vNV;
typedef PFNGLVERTEXATTRIBL4UI64VNVPROC PFN_glVertexAttribL4ui64vNV;
typedef PFNGLGETVERTEXATTRIBLI64VNVPROC PFN_glGetVertexAttribLi64vNV;
typedef PFNGLGETVERTEXATTRIBLUI64VNVPROC PFN_glGetVertexAttribLui64vNV;
typedef PFNGLVERTEXATTRIBLFORMATNVPROC PFN_glVertexAttribLFormatNV;
typedef PFNGLBUFFERADDRESSRANGENVPROC PFN_glBufferAddressRangeNV;
typedef PFNGLVERTEXFORMATNVPROC PFN_glVertexFormatNV;
typedef PFNGLNORMALFORMATNVPROC PFN_glNormalFormatNV;
typedef PFNGLCOLORFORMATNVPROC PFN_glColorFormatNV;
typedef PFNGLINDEXFORMATNVPROC PFN_glIndexFormatNV;
typedef PFNGLTEXCOORDFORMATNVPROC PFN_glTexCoordFormatNV;
typedef PFNGLEDGEFLAGFORMATNVPROC PFN_glEdgeFlagFormatNV;
typedef PFNGLSECONDARYCOLORFORMATNVPROC PFN_glSecondaryColorFormatNV;
typedef PFNGLFOGCOORDFORMATNVPROC PFN_glFogCoordFormatNV;
typedef PFNGLVERTEXATTRIBFORMATNVPROC PFN_glVertexAttribFormatNV;
typedef PFNGLVERTEXATTRIBIFORMATNVPROC PFN_glVertexAttribIFormatNV;
typedef PFNGLGETINTEGERUI64I_VNVPROC PFN_glGetIntegerui64i_vNV;
typedef PFNGLAREPROGRAMSRESIDENTNVPROC PFN_glAreProgramsResidentNV;
typedef PFNGLBINDPROGRAMNVPROC PFN_glBindProgramNV;
typedef PFNGLDELETEPROGRAMSNVPROC PFN_glDeleteProgramsNV;
typedef PFNGLEXECUTEPROGRAMNVPROC PFN_glExecuteProgramNV;
typedef PFNGLGENPROGRAMSNVPROC PFN_glGenProgramsNV;
typedef PFNGLGETPROGRAMPARAMETERDVNVPROC PFN_glGetProgramParameterdvNV;
typedef PFNGLGETPROGRAMPARAMETERFVNVPROC PFN_glGetProgramParameterfvNV;
typedef PFNGLGETPROGRAMIVNVPROC PFN_glGetProgramivNV;
typedef PFNGLGETPROGRAMSTRINGNVPROC PFN_glGetProgramStringNV;
typedef PFNGLGETTRACKMATRIXIVNVPROC PFN_glGetTrackMatrixivNV;
typedef PFNGLGETVERTEXATTRIBDVNVPROC PFN_glGetVertexAttribdvNV;
typedef PFNGLGETVERTEXATTRIBFVNVPROC PFN_glGetVertexAttribfvNV;
typedef PFNGLGETVERTEXATTRIBIVNVPROC PFN_glGetVertexAttribivNV;
typedef PFNGLGETVERTEXATTRIBPOINTERVNVPROC PFN_glGetVertexAttribPointervNV;
typedef PFNGLISPROGRAMNVPROC PFN_glIsProgramNV;
typedef PFNGLLOADPROGRAMNVPROC PFN_glLoadProgramNV;
typedef PFNGLPROGRAMPARAMETER4DNVPROC PFN_glProgramParameter4dNV;
typedef PFNGLPROGRAMPARAMETER4DVNVPROC PFN_glProgramParameter4dvNV;
typedef PFNGLPROGRAMPARAMETER4FNVPROC PFN_glProgramParameter4fNV;
typedef PFNGLPROGRAMPARAMETER4FVNVPROC PFN_glProgramParameter4fvNV;
typedef PFNGLPROGRAMPARAMETERS4DVNVPROC PFN_glProgramParameters4dvNV;
typedef PFNGLPROGRAMPARAMETERS4FVNVPROC PFN_glProgramParameters4fvNV;
typedef PFNGLREQUESTRESIDENTPROGRAMSNVPROC PFN_glRequestResidentProgramsNV;
typedef PFNGLTRACKMATRIXNVPROC PFN_glTrackMatrixNV;
typedef PFNGLVERTEXATTRIBPOINTERNVPROC PFN_glVertexAttribPointerNV;
typedef PFNGLVERTEXATTRIB1DNVPROC PFN_glVertexAttrib1dNV;
typedef PFNGLVERTEXATTRIB1DVNVPROC PFN_glVertexAttrib1dvNV;
typedef PFNGLVERTEXATTRIB1FNVPROC PFN_glVertexAttrib1fNV;
typedef PFNGLVERTEXATTRIB1FVNVPROC PFN_glVertexAttrib1fvNV;
typedef PFNGLVERTEXATTRIB1SNVPROC PFN_glVertexAttrib1sNV;
typedef PFNGLVERTEXATTRIB1SVNVPROC PFN_glVertexAttrib1svNV;
typedef PFNGLVERTEXATTRIB2DNVPROC PFN_glVertexAttrib2dNV;
typedef PFNGLVERTEXATTRIB2DVNVPROC PFN_glVertexAttrib2dvNV;
typedef PFNGLVERTEXATTRIB2FNVPROC PFN_glVertexAttrib2fNV;
typedef PFNGLVERTEXATTRIB2FVNVPROC PFN_glVertexAttrib2fvNV;
typedef PFNGLVERTEXATTRIB2SNVPROC PFN_glVertexAttrib2sNV;
typedef PFNGLVERTEXATTRIB2SVNVPROC PFN_glVertexAttrib2svNV;
typedef PFNGLVERTEXATTRIB3DNVPROC PFN_glVertexAttrib3dNV;
typedef PFNGLVERTEXATTRIB3DVNVPROC PFN_glVertexAttrib3dvNV;
typedef PFNGLVERTEXATTRIB3FNVPROC PFN_glVertexAttrib3fNV;
typedef PFNGLVERTEXATTRIB3FVNVPROC PFN_glVertexAttrib3fvNV;
typedef PFNGLVERTEXATTRIB3SNVPROC PFN_glVertexAttrib3sNV;
typedef PFNGLVERTEXATTRIB3SVNVPROC PFN_glVertexAttrib3svNV;
typedef PFNGLVERTEXATTRIB4DNVPROC PFN_glVertexAttrib4dNV;
typedef PFNGLVERTEXATTRIB4DVNVPROC PFN_glVertexAttrib4dvNV;
typedef PFNGLVERTEXATTRIB4FNVPROC PFN_glVertexAttrib4fNV;
typedef PFNGLVERTEXATTRIB4FVNVPROC PFN_glVertexAttrib4fvNV;
typedef PFNGLVERTEXATTRIB4SNVPROC PFN_glVertexAttrib4sNV;
typedef PFNGLVERTEXATTRIB4SVNVPROC PFN_glVertexAttrib4svNV;
typedef PFNGLVERTEXATTRIB4UBNVPROC PFN_glVertexAttrib4ubNV;
typedef PFNGLVERTEXATTRIB4UBVNVPROC PFN_glVertexAttrib4ubvNV;
typedef PFNGLVERTEXATTRIBS1DVNVPROC PFN_glVertexAttribs1dvNV;
typedef PFNGLVERTEXATTRIBS1FVNVPROC PFN_glVertexAttribs1fvNV;
typedef PFNGLVERTEXATTRIBS1SVNVPROC PFN_glVertexAttribs1svNV;
typedef PFNGLVERTEXATTRIBS2DVNVPROC PFN_glVertexAttribs2dvNV;
typedef PFNGLVERTEXATTRIBS2FVNVPROC PFN_glVertexAttribs2fvNV;
typedef PFNGLVERTEXATTRIBS2SVNVPROC PFN_glVertexAttribs2svNV;
typedef PFNGLVERTEXATTRIBS3DVNVPROC PFN_glVertexAttribs3dvNV;
typedef PFNGLVERTEXATTRIBS3FVNVPROC PFN_glVertexAttribs3fvNV;
typedef PFNGLVERTEXATTRIBS3SVNVPROC PFN_glVertexAttribs3svNV;
typedef PFNGLVERTEXATTRIBS4DVNVPROC PFN_glVertexAttribs4dvNV;
typedef PFNGLVERTEXATTRIBS4FVNVPROC PFN_glVertexAttribs4fvNV;
typedef PFNGLVERTEXATTRIBS4SVNVPROC PFN_glVertexAttribs4svNV;
typedef PFNGLVERTEXATTRIBS4UBVNVPROC PFN_glVertexAttribs4ubvNV;
typedef PFNGLBEGINVIDEOCAPTURENVPROC PFN_glBeginVideoCaptureNV;
typedef PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
    PFN_glBindVideoCaptureStreamBufferNV;
typedef PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
    PFN_glBindVideoCaptureStreamTextureNV;
typedef PFNGLENDVIDEOCAPTURENVPROC PFN_glEndVideoCaptureNV;
typedef PFNGLGETVIDEOCAPTUREIVNVPROC PFN_glGetVideoCaptureivNV;
typedef PFNGLGETVIDEOCAPTURESTREAMIVNVPROC PFN_glGetVideoCaptureStreamivNV;
typedef PFNGLGETVIDEOCAPTURESTREAMFVNVPROC PFN_glGetVideoCaptureStreamfvNV;
typedef PFNGLGETVIDEOCAPTURESTREAMDVNVPROC PFN_glGetVideoCaptureStreamdvNV;
typedef PFNGLVIDEOCAPTURENVPROC PFN_glVideoCaptureNV;
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
    PFN_glVideoCaptureStreamParameterivNV;
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
    PFN_glVideoCaptureStreamParameterfvNV;
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
    PFN_glVideoCaptureStreamParameterdvNV;
typedef PFNGLVIEWPORTSWIZZLENVPROC PFN_glViewportSwizzleNV;
typedef PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC
    PFN_glFramebufferTextureMultiviewOVR;
typedef PFNGLHINTPGIPROC PFN_glHintPGI;
typedef PFNGLDETAILTEXFUNCSGISPROC PFN_glDetailTexFuncSGIS;
typedef PFNGLGETDETAILTEXFUNCSGISPROC PFN_glGetDetailTexFuncSGIS;
typedef PFNGLFOGFUNCSGISPROC PFN_glFogFuncSGIS;
typedef PFNGLGETFOGFUNCSGISPROC PFN_glGetFogFuncSGIS;
typedef PFNGLSAMPLEMASKSGISPROC PFN_glSampleMaskSGIS;
typedef PFNGLSAMPLEPATTERNSGISPROC PFN_glSamplePatternSGIS;
typedef PFNGLPIXELTEXGENPARAMETERISGISPROC PFN_glPixelTexGenParameteriSGIS;
typedef PFNGLPIXELTEXGENPARAMETERIVSGISPROC PFN_glPixelTexGenParameterivSGIS;
typedef PFNGLPIXELTEXGENPARAMETERFSGISPROC PFN_glPixelTexGenParameterfSGIS;
typedef PFNGLPIXELTEXGENPARAMETERFVSGISPROC PFN_glPixelTexGenParameterfvSGIS;
typedef PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
    PFN_glGetPixelTexGenParameterivSGIS;
typedef PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
    PFN_glGetPixelTexGenParameterfvSGIS;
typedef PFNGLPOINTPARAMETERFSGISPROC PFN_glPointParameterfSGIS;
typedef PFNGLPOINTPARAMETERFVSGISPROC PFN_glPointParameterfvSGIS;
typedef PFNGLSHARPENTEXFUNCSGISPROC PFN_glSharpenTexFuncSGIS;
typedef PFNGLGETSHARPENTEXFUNCSGISPROC PFN_glGetSharpenTexFuncSGIS;
typedef PFNGLTEXIMAGE4DSGISPROC PFN_glTexImage4DSGIS;
typedef PFNGLTEXSUBIMAGE4DSGISPROC PFN_glTexSubImage4DSGIS;
typedef PFNGLTEXTURECOLORMASKSGISPROC PFN_glTextureColorMaskSGIS;
typedef PFNGLGETTEXFILTERFUNCSGISPROC PFN_glGetTexFilterFuncSGIS;
typedef PFNGLTEXFILTERFUNCSGISPROC PFN_glTexFilterFuncSGIS;
typedef PFNGLASYNCMARKERSGIXPROC PFN_glAsyncMarkerSGIX;
typedef PFNGLFINISHASYNCSGIXPROC PFN_glFinishAsyncSGIX;
typedef PFNGLPOLLASYNCSGIXPROC PFN_glPollAsyncSGIX;
typedef PFNGLGENASYNCMARKERSSGIXPROC PFN_glGenAsyncMarkersSGIX;
typedef PFNGLDELETEASYNCMARKERSSGIXPROC PFN_glDeleteAsyncMarkersSGIX;
typedef PFNGLISASYNCMARKERSGIXPROC PFN_glIsAsyncMarkerSGIX;
typedef PFNGLFLUSHRASTERSGIXPROC PFN_glFlushRasterSGIX;
typedef PFNGLFRAGMENTCOLORMATERIALSGIXPROC PFN_glFragmentColorMaterialSGIX;
typedef PFNGLFRAGMENTLIGHTFSGIXPROC PFN_glFragmentLightfSGIX;
typedef PFNGLFRAGMENTLIGHTFVSGIXPROC PFN_glFragmentLightfvSGIX;
typedef PFNGLFRAGMENTLIGHTISGIXPROC PFN_glFragmentLightiSGIX;
typedef PFNGLFRAGMENTLIGHTIVSGIXPROC PFN_glFragmentLightivSGIX;
typedef PFNGLFRAGMENTLIGHTMODELFSGIXPROC PFN_glFragmentLightModelfSGIX;
typedef PFNGLFRAGMENTLIGHTMODELFVSGIXPROC PFN_glFragmentLightModelfvSGIX;
typedef PFNGLFRAGMENTLIGHTMODELISGIXPROC PFN_glFragmentLightModeliSGIX;
typedef PFNGLFRAGMENTLIGHTMODELIVSGIXPROC PFN_glFragmentLightModelivSGIX;
typedef PFNGLFRAGMENTMATERIALFSGIXPROC PFN_glFragmentMaterialfSGIX;
typedef PFNGLFRAGMENTMATERIALFVSGIXPROC PFN_glFragmentMaterialfvSGIX;
typedef PFNGLFRAGMENTMATERIALISGIXPROC PFN_glFragmentMaterialiSGIX;
typedef PFNGLFRAGMENTMATERIALIVSGIXPROC PFN_glFragmentMaterialivSGIX;
typedef PFNGLGETFRAGMENTLIGHTFVSGIXPROC PFN_glGetFragmentLightfvSGIX;
typedef PFNGLGETFRAGMENTLIGHTIVSGIXPROC PFN_glGetFragmentLightivSGIX;
typedef PFNGLGETFRAGMENTMATERIALFVSGIXPROC PFN_glGetFragmentMaterialfvSGIX;
typedef PFNGLGETFRAGMENTMATERIALIVSGIXPROC PFN_glGetFragmentMaterialivSGIX;
typedef PFNGLLIGHTENVISGIXPROC PFN_glLightEnviSGIX;
typedef PFNGLFRAMEZOOMSGIXPROC PFN_glFrameZoomSGIX;
typedef PFNGLIGLOOINTERFACESGIXPROC PFN_glIglooInterfaceSGIX;
typedef PFNGLGETINSTRUMENTSSGIXPROC PFN_glGetInstrumentsSGIX;
typedef PFNGLINSTRUMENTSBUFFERSGIXPROC PFN_glInstrumentsBufferSGIX;
typedef PFNGLPOLLINSTRUMENTSSGIXPROC PFN_glPollInstrumentsSGIX;
typedef PFNGLREADINSTRUMENTSSGIXPROC PFN_glReadInstrumentsSGIX;
typedef PFNGLSTARTINSTRUMENTSSGIXPROC PFN_glStartInstrumentsSGIX;
typedef PFNGLSTOPINSTRUMENTSSGIXPROC PFN_glStopInstrumentsSGIX;
typedef PFNGLGETLISTPARAMETERFVSGIXPROC PFN_glGetListParameterfvSGIX;
typedef PFNGLGETLISTPARAMETERIVSGIXPROC PFN_glGetListParameterivSGIX;
typedef PFNGLLISTPARAMETERFSGIXPROC PFN_glListParameterfSGIX;
typedef PFNGLLISTPARAMETERFVSGIXPROC PFN_glListParameterfvSGIX;
typedef PFNGLLISTPARAMETERISGIXPROC PFN_glListParameteriSGIX;
typedef PFNGLLISTPARAMETERIVSGIXPROC PFN_glListParameterivSGIX;
typedef PFNGLPIXELTEXGENSGIXPROC PFN_glPixelTexGenSGIX;
typedef PFNGLDEFORMATIONMAP3DSGIXPROC PFN_glDeformationMap3dSGIX;
typedef PFNGLDEFORMATIONMAP3FSGIXPROC PFN_glDeformationMap3fSGIX;
typedef PFNGLDEFORMSGIXPROC PFN_glDeformSGIX;
typedef PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
    PFN_glLoadIdentityDeformationMapSGIX;
typedef PFNGLREFERENCEPLANESGIXPROC PFN_glReferencePlaneSGIX;
typedef PFNGLSPRITEPARAMETERFSGIXPROC PFN_glSpriteParameterfSGIX;
typedef PFNGLSPRITEPARAMETERFVSGIXPROC PFN_glSpriteParameterfvSGIX;
typedef PFNGLSPRITEPARAMETERISGIXPROC PFN_glSpriteParameteriSGIX;
typedef PFNGLSPRITEPARAMETERIVSGIXPROC PFN_glSpriteParameterivSGIX;
typedef PFNGLTAGSAMPLEBUFFERSGIXPROC PFN_glTagSampleBufferSGIX;
typedef PFNGLCOLORTABLESGIPROC PFN_glColorTableSGI;
typedef PFNGLCOLORTABLEPARAMETERFVSGIPROC PFN_glColorTableParameterfvSGI;
typedef PFNGLCOLORTABLEPARAMETERIVSGIPROC PFN_glColorTableParameterivSGI;
typedef PFNGLCOPYCOLORTABLESGIPROC PFN_glCopyColorTableSGI;
typedef PFNGLGETCOLORTABLESGIPROC PFN_glGetColorTableSGI;
typedef PFNGLGETCOLORTABLEPARAMETERFVSGIPROC PFN_glGetColorTableParameterfvSGI;
typedef PFNGLGETCOLORTABLEPARAMETERIVSGIPROC PFN_glGetColorTableParameterivSGI;
typedef PFNGLFINISHTEXTURESUNXPROC PFN_glFinishTextureSUNX;
typedef PFNGLGLOBALALPHAFACTORBSUNPROC PFN_glGlobalAlphaFactorbSUN;
typedef PFNGLGLOBALALPHAFACTORSSUNPROC PFN_glGlobalAlphaFactorsSUN;
typedef PFNGLGLOBALALPHAFACTORISUNPROC PFN_glGlobalAlphaFactoriSUN;
typedef PFNGLGLOBALALPHAFACTORFSUNPROC PFN_glGlobalAlphaFactorfSUN;
typedef PFNGLGLOBALALPHAFACTORDSUNPROC PFN_glGlobalAlphaFactordSUN;
typedef PFNGLGLOBALALPHAFACTORUBSUNPROC PFN_glGlobalAlphaFactorubSUN;
typedef PFNGLGLOBALALPHAFACTORUSSUNPROC PFN_glGlobalAlphaFactorusSUN;
typedef PFNGLGLOBALALPHAFACTORUISUNPROC PFN_glGlobalAlphaFactoruiSUN;
typedef PFNGLDRAWMESHARRAYSSUNPROC PFN_glDrawMeshArraysSUN;
typedef PFNGLREPLACEMENTCODEUISUNPROC PFN_glReplacementCodeuiSUN;
typedef PFNGLREPLACEMENTCODEUSSUNPROC PFN_glReplacementCodeusSUN;
typedef PFNGLREPLACEMENTCODEUBSUNPROC PFN_glReplacementCodeubSUN;
typedef PFNGLREPLACEMENTCODEUIVSUNPROC PFN_glReplacementCodeuivSUN;
typedef PFNGLREPLACEMENTCODEUSVSUNPROC PFN_glReplacementCodeusvSUN;
typedef PFNGLREPLACEMENTCODEUBVSUNPROC PFN_glReplacementCodeubvSUN;
typedef PFNGLREPLACEMENTCODEPOINTERSUNPROC PFN_glReplacementCodePointerSUN;
typedef PFNGLCOLOR4UBVERTEX2FSUNPROC PFN_glColor4ubVertex2fSUN;
typedef PFNGLCOLOR4UBVERTEX2FVSUNPROC PFN_glColor4ubVertex2fvSUN;
typedef PFNGLCOLOR4UBVERTEX3FSUNPROC PFN_glColor4ubVertex3fSUN;
typedef PFNGLCOLOR4UBVERTEX3FVSUNPROC PFN_glColor4ubVertex3fvSUN;
typedef PFNGLCOLOR3FVERTEX3FSUNPROC PFN_glColor3fVertex3fSUN;
typedef PFNGLCOLOR3FVERTEX3FVSUNPROC PFN_glColor3fVertex3fvSUN;
typedef PFNGLNORMAL3FVERTEX3FSUNPROC PFN_glNormal3fVertex3fSUN;
typedef PFNGLNORMAL3FVERTEX3FVSUNPROC PFN_glNormal3fVertex3fvSUN;
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC PFN_glColor4fNormal3fVertex3fSUN;
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC PFN_glColor4fNormal3fVertex3fvSUN;
typedef PFNGLTEXCOORD2FVERTEX3FSUNPROC PFN_glTexCoord2fVertex3fSUN;
typedef PFNGLTEXCOORD2FVERTEX3FVSUNPROC PFN_glTexCoord2fVertex3fvSUN;
typedef PFNGLTEXCOORD4FVERTEX4FSUNPROC PFN_glTexCoord4fVertex4fSUN;
typedef PFNGLTEXCOORD4FVERTEX4FVSUNPROC PFN_glTexCoord4fVertex4fvSUN;
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
    PFN_glTexCoord2fColor4ubVertex3fSUN;
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
    PFN_glTexCoord2fColor4ubVertex3fvSUN;
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
    PFN_glTexCoord2fColor3fVertex3fSUN;
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
    PFN_glTexCoord2fColor3fVertex3fvSUN;
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
    PFN_glTexCoord2fNormal3fVertex3fSUN;
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
    PFN_glTexCoord2fNormal3fVertex3fvSUN;
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
    PFN_glTexCoord2fColor4fNormal3fVertex3fSUN;
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
    PFN_glTexCoord2fColor4fNormal3fVertex3fvSUN;
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
    PFN_glTexCoord4fColor4fNormal3fVertex4fSUN;
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
    PFN_glTexCoord4fColor4fNormal3fVertex4fvSUN;
typedef PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
    PFN_glReplacementCodeuiVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiVertex3fvSUN;
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
    PFN_glReplacementCodeuiColor4ubVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiColor4ubVertex3fvSUN;
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
    PFN_glReplacementCodeuiColor3fVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiColor3fVertex3fvSUN;
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
    PFN_glReplacementCodeuiNormal3fVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiNormal3fVertex3fvSUN;
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
    PFN_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
    PFN_glReplacementCodeuiTexCoord2fVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiTexCoord2fVertex3fvSUN;
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
    PFN_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
    PFN_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
    PFN_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
typedef PFNGLCULLFACEPROC PFN_glCullFace;
typedef PFNGLFRONTFACEPROC PFN_glFrontFace;
typedef PFNGLHINTPROC PFN_glHint;
typedef PFNGLLINEWIDTHPROC PFN_glLineWidth;
typedef PFNGLPOINTSIZEPROC PFN_glPointSize;
typedef PFNGLPOLYGONMODEPROC PFN_glPolygonMode;
typedef PFNGLSCISSORPROC PFN_glScissor;
typedef PFNGLTEXPARAMETERFPROC PFN_glTexParameterf;
typedef PFNGLTEXPARAMETERFVPROC PFN_glTexParameterfv;
typedef PFNGLTEXPARAMETERIPROC PFN_glTexParameteri;
typedef PFNGLTEXPARAMETERIVPROC PFN_glTexParameteriv;
typedef PFNGLTEXIMAGE1DPROC PFN_glTexImage1D;
typedef PFNGLTEXIMAGE2DPROC PFN_glTexImage2D;
typedef PFNGLDRAWBUFFERPROC PFN_glDrawBuffer;
typedef PFNGLCLEARPROC PFN_glClear;
typedef PFNGLCLEARCOLORPROC PFN_glClearColor;
typedef PFNGLCLEARSTENCILPROC PFN_glClearStencil;
typedef PFNGLCLEARDEPTHPROC PFN_glClearDepth;
typedef PFNGLSTENCILMASKPROC PFN_glStencilMask;
typedef PFNGLCOLORMASKPROC PFN_glColorMask;
typedef PFNGLDEPTHMASKPROC PFN_glDepthMask;
typedef PFNGLDISABLEPROC PFN_glDisable;
typedef PFNGLENABLEPROC PFN_glEnable;
typedef PFNGLFINISHPROC PFN_glFinish;
typedef PFNGLFLUSHPROC PFN_glFlush;
typedef PFNGLBLENDFUNCPROC PFN_glBlendFunc;
typedef PFNGLLOGICOPPROC PFN_glLogicOp;
typedef PFNGLSTENCILFUNCPROC PFN_glStencilFunc;
typedef PFNGLSTENCILOPPROC PFN_glStencilOp;
typedef PFNGLDEPTHFUNCPROC PFN_glDepthFunc;
typedef PFNGLPIXELSTOREFPROC PFN_glPixelStoref;
typedef PFNGLPIXELSTOREIPROC PFN_glPixelStorei;
typedef PFNGLREADBUFFERPROC PFN_glReadBuffer;
typedef PFNGLREADPIXELSPROC PFN_glReadPixels;
typedef PFNGLGETBOOLEANVPROC PFN_glGetBooleanv;
typedef PFNGLGETDOUBLEVPROC PFN_glGetDoublev;
typedef PFNGLGETERRORPROC PFN_glGetError;
typedef PFNGLGETFLOATVPROC PFN_glGetFloatv;
typedef PFNGLGETINTEGERVPROC PFN_glGetIntegerv;
typedef PFNGLGETSTRINGPROC PFN_glGetString;
typedef PFNGLGETTEXIMAGEPROC PFN_glGetTexImage;
typedef PFNGLGETTEXPARAMETERFVPROC PFN_glGetTexParameterfv;
typedef PFNGLGETTEXPARAMETERIVPROC PFN_glGetTexParameteriv;
typedef PFNGLGETTEXLEVELPARAMETERFVPROC PFN_glGetTexLevelParameterfv;
typedef PFNGLGETTEXLEVELPARAMETERIVPROC PFN_glGetTexLevelParameteriv;
typedef PFNGLISENABLEDPROC PFN_glIsEnabled;
typedef PFNGLDEPTHRANGEPROC PFN_glDepthRange;
typedef PFNGLVIEWPORTPROC PFN_glViewport;
typedef PFNGLDRAWARRAYSPROC PFN_glDrawArrays;
typedef PFNGLDRAWELEMENTSPROC PFN_glDrawElements;
typedef PFNGLGETPOINTERVPROC PFN_glGetPointerv;
typedef PFNGLPOLYGONOFFSETPROC PFN_glPolygonOffset;
typedef PFNGLCOPYTEXIMAGE1DPROC PFN_glCopyTexImage1D;
typedef PFNGLCOPYTEXIMAGE2DPROC PFN_glCopyTexImage2D;
typedef PFNGLCOPYTEXSUBIMAGE1DPROC PFN_glCopyTexSubImage1D;
typedef PFNGLCOPYTEXSUBIMAGE2DPROC PFN_glCopyTexSubImage2D;
typedef PFNGLTEXSUBIMAGE1DPROC PFN_glTexSubImage1D;
typedef PFNGLTEXSUBIMAGE2DPROC PFN_glTexSubImage2D;
typedef PFNGLBINDTEXTUREPROC PFN_glBindTexture;
typedef PFNGLDELETETEXTURESPROC PFN_glDeleteTextures;
typedef PFNGLGENTEXTURESPROC PFN_glGenTextures;
typedef PFNGLISTEXTUREPROC PFN_glIsTexture;
#define VKFUNDEFINE(NAME) PFN_##NAME NAME##;

class OpenGLLoaderLoader {
public:
  typedef APIProc (*UserptrLoadFunc)(void *userptr, std::string_view name);
  struct Flags : public LONGBITSET {
    Flags() : LONGBITSET(sizeof(Flags), 273) {}
    bool IS_LOAD_GL_VERSION_1_2 : 1;                               // 0
    bool IS_LOAD_GL_VERSION_1_3 : 1;                               // 1
    bool IS_LOAD_GL_VERSION_1_4 : 1;                               // 2
    bool IS_LOAD_GL_VERSION_1_5 : 1;                               // 3
    bool IS_LOAD_GL_VERSION_2_0 : 1;                               // 4
    bool IS_LOAD_GL_VERSION_2_1 : 1;                               // 5
    bool IS_LOAD_GL_VERSION_3_0 : 1;                               // 6
    bool IS_LOAD_GL_VERSION_3_1 : 1;                               // 7
    bool IS_LOAD_GL_VERSION_3_2 : 1;                               // 8
    bool IS_LOAD_GL_VERSION_3_3 : 1;                               // 9
    bool IS_LOAD_GL_VERSION_4_0 : 1;                               // 10
    bool IS_LOAD_GL_VERSION_4_1 : 1;                               // 11
    bool IS_LOAD_GL_VERSION_4_2 : 1;                               // 12
    bool IS_LOAD_GL_VERSION_4_3 : 1;                               // 13
    bool IS_LOAD_GL_VERSION_4_4 : 1;                               // 14
    bool IS_LOAD_GL_VERSION_4_5 : 1;                               // 15
    bool IS_LOAD_GL_VERSION_4_6 : 1;                               // 16
    bool IS_LOAD_GL_ARB_ES3_2_compatibility : 1;                   // 17
    bool IS_LOAD_GL_ARB_bindless_texture : 1;                      // 18
    bool IS_LOAD_GL_ARB_cl_event : 1;                              // 19
    bool IS_LOAD_GL_ARB_color_buffer_float : 1;                    // 20
    bool IS_LOAD_GL_ARB_compute_variable_group_size : 1;           // 21
    bool IS_LOAD_GL_ARB_debug_output : 1;                          // 22
    bool IS_LOAD_GL_ARB_draw_buffers : 1;                          // 23
    bool IS_LOAD_GL_ARB_draw_buffers_blend : 1;                    // 24
    bool IS_LOAD_GL_ARB_draw_instanced : 1;                        // 25
    bool IS_LOAD_GL_ARB_fragment_program : 1;                      // 26
    bool IS_LOAD_GL_ARB_geometry_shader4 : 1;                      // 27
    bool IS_LOAD_GL_ARB_gl_spirv : 1;                              // 28
    bool IS_LOAD_GL_ARB_gpu_shader_int64 : 1;                      // 29
    bool IS_LOAD_GL_ARB_imaging : 1;                               // 30
    bool IS_LOAD_GL_ARB_indirect_parameters : 1;                   // 31
    bool IS_LOAD_GL_ARB_instanced_arrays : 1;                      // 32
    bool IS_LOAD_GL_ARB_matrix_palette : 1;                        // 33
    bool IS_LOAD_GL_ARB_multisample : 1;                           // 34
    bool IS_LOAD_GL_ARB_multitexture : 1;                          // 35
    bool IS_LOAD_GL_ARB_occlusion_query : 1;                       // 36
    bool IS_LOAD_GL_ARB_parallel_shader_compile : 1;               // 37
    bool IS_LOAD_GL_ARB_point_parameters : 1;                      // 38
    bool IS_LOAD_GL_ARB_robustness : 1;                            // 39
    bool IS_LOAD_GL_ARB_sample_locations : 1;                      // 40
    bool IS_LOAD_GL_ARB_sample_shading : 1;                        // 41
    bool IS_LOAD_GL_ARB_shader_objects : 1;                        // 42
    bool IS_LOAD_GL_ARB_shading_language_include : 1;              // 43
    bool IS_LOAD_GL_ARB_sparse_buffer : 1;                         // 44
    bool IS_LOAD_GL_ARB_sparse_texture : 1;                        // 45
    bool IS_LOAD_GL_ARB_texture_buffer_object : 1;                 // 46
    bool IS_LOAD_GL_ARB_texture_compression : 1;                   // 47
    bool IS_LOAD_GL_ARB_transpose_matrix : 1;                      // 48
    bool IS_LOAD_GL_ARB_vertex_blend : 1;                          // 49
    bool IS_LOAD_GL_ARB_vertex_buffer_object : 1;                  // 50
    bool IS_LOAD_GL_ARB_vertex_program : 1;                        // 51
    bool IS_LOAD_GL_ARB_vertex_shader : 1;                         // 52
    bool IS_LOAD_GL_ARB_viewport_array : 1;                        // 53
    bool IS_LOAD_GL_ARB_window_pos : 1;                            // 54
    bool IS_LOAD_GL_KHR_blend_equation_advanced : 1;               // 55
    bool IS_LOAD_GL_KHR_parallel_shader_compile : 1;               // 56
    bool IS_LOAD_GL_OES_byte_coordinates : 1;                      // 57
    bool IS_LOAD_GL_OES_fixed_point : 1;                           // 58
    bool IS_LOAD_GL_OES_query_matrix : 1;                          // 59
    bool IS_LOAD_GL_OES_single_precision : 1;                      // 60
    bool IS_LOAD_GL_3DFX_tbuffer : 1;                              // 61
    bool IS_LOAD_GL_AMD_debug_output : 1;                          // 62
    bool IS_LOAD_GL_AMD_draw_buffers_blend : 1;                    // 63
    bool IS_LOAD_GL_AMD_framebuffer_multisample_advanced : 1;      // 64
    bool IS_LOAD_GL_AMD_framebuffer_sample_positions : 1;          // 65
    bool IS_LOAD_GL_AMD_gpu_shader_int64 : 1;                      // 66
    bool IS_LOAD_GL_AMD_interleaved_elements : 1;                  // 67
    bool IS_LOAD_GL_AMD_multi_draw_indirect : 1;                   // 68
    bool IS_LOAD_GL_AMD_name_gen_delete : 1;                       // 69
    bool IS_LOAD_GL_AMD_occlusion_query_event : 1;                 // 70
    bool IS_LOAD_GL_AMD_performance_monitor : 1;                   // 71
    bool IS_LOAD_GL_AMD_sample_positions : 1;                      // 72
    bool IS_LOAD_GL_AMD_sparse_texture : 1;                        // 73
    bool IS_LOAD_GL_AMD_stencil_operation_extended : 1;            // 74
    bool IS_LOAD_GL_AMD_vertex_shader_tessellator : 1;             // 75
    bool IS_LOAD_GL_APPLE_element_array : 1;                       // 76
    bool IS_LOAD_GL_APPLE_fence : 1;                               // 77
    bool IS_LOAD_GL_APPLE_flush_buffer_range : 1;                  // 78
    bool IS_LOAD_GL_APPLE_object_purgeable : 1;                    // 79
    bool IS_LOAD_GL_APPLE_texture_range : 1;                       // 80
    bool IS_LOAD_GL_APPLE_vertex_array_object : 1;                 // 81
    bool IS_LOAD_GL_APPLE_vertex_array_range : 1;                  // 82
    bool IS_LOAD_GL_APPLE_vertex_program_evaluators : 1;           // 83
    bool IS_LOAD_GL_ATI_draw_buffers : 1;                          // 84
    bool IS_LOAD_GL_ATI_element_array : 1;                         // 85
    bool IS_LOAD_GL_ATI_envmap_bumpmap : 1;                        // 86
    bool IS_LOAD_GL_ATI_fragment_shader : 1;                       // 87
    bool IS_LOAD_GL_ATI_map_object_buffer : 1;                     // 88
    bool IS_LOAD_GL_ATI_pn_triangles : 1;                          // 89
    bool IS_LOAD_GL_ATI_separate_stencil : 1;                      // 90
    bool IS_LOAD_GL_ATI_vertex_array_object : 1;                   // 91
    bool IS_LOAD_GL_ATI_vertex_attrib_array_object : 1;            // 92
    bool IS_LOAD_GL_ATI_vertex_streams : 1;                        // 93
    bool IS_LOAD_GL_EXT_EGL_image_storage : 1;                     // 94
    bool IS_LOAD_GL_EXT_bindable_uniform : 1;                      // 95
    bool IS_LOAD_GL_EXT_blend_color : 1;                           // 96
    bool IS_LOAD_GL_EXT_blend_equation_separate : 1;               // 97
    bool IS_LOAD_GL_EXT_blend_func_separate : 1;                   // 98
    bool IS_LOAD_GL_EXT_blend_minmax : 1;                          // 99
    bool IS_LOAD_GL_EXT_color_subtable : 1;                        // 100
    bool IS_LOAD_GL_EXT_compiled_vertex_array : 1;                 // 101
    bool IS_LOAD_GL_EXT_convolution : 1;                           // 102
    bool IS_LOAD_GL_EXT_coordinate_frame : 1;                      // 103
    bool IS_LOAD_GL_EXT_copy_texture : 1;                          // 104
    bool IS_LOAD_GL_EXT_cull_vertex : 1;                           // 105
    bool IS_LOAD_GL_EXT_debug_label : 1;                           // 106
    bool IS_LOAD_GL_EXT_debug_marker : 1;                          // 107
    bool IS_LOAD_GL_EXT_depth_bounds_test : 1;                     // 108
    bool IS_LOAD_GL_EXT_direct_state_access : 1;                   // 109
    bool IS_LOAD_GL_EXT_draw_buffers2 : 1;                         // 110
    bool IS_LOAD_GL_EXT_draw_instanced : 1;                        // 111
    bool IS_LOAD_GL_EXT_draw_range_elements : 1;                   // 112
    bool IS_LOAD_GL_EXT_external_buffer : 1;                       // 113
    bool IS_LOAD_GL_EXT_fog_coord : 1;                             // 114
    bool IS_LOAD_GL_EXT_framebuffer_blit : 1;                      // 115
    bool IS_LOAD_GL_EXT_framebuffer_blit_layers : 1;               // 116
    bool IS_LOAD_GL_EXT_framebuffer_multisample : 1;               // 117
    bool IS_LOAD_GL_EXT_framebuffer_object : 1;                    // 118
    bool IS_LOAD_GL_EXT_geometry_shader4 : 1;                      // 119
    bool IS_LOAD_GL_EXT_gpu_program_parameters : 1;                // 120
    bool IS_LOAD_GL_EXT_gpu_shader4 : 1;                           // 121
    bool IS_LOAD_GL_EXT_histogram : 1;                             // 122
    bool IS_LOAD_GL_EXT_index_func : 1;                            // 123
    bool IS_LOAD_GL_EXT_index_material : 1;                        // 124
    bool IS_LOAD_GL_EXT_light_texture : 1;                         // 125
    bool IS_LOAD_GL_EXT_memory_object : 1;                         // 126
    bool IS_LOAD_GL_EXT_memory_object_fd : 1;                      // 127
    bool IS_LOAD_GL_EXT_memory_object_win32 : 1;                   // 128
    bool IS_LOAD_GL_EXT_multi_draw_arrays : 1;                     // 129
    bool IS_LOAD_GL_EXT_multisample : 1;                           // 130
    bool IS_LOAD_GL_EXT_paletted_texture : 1;                      // 131
    bool IS_LOAD_GL_EXT_pixel_transform : 1;                       // 132
    bool IS_LOAD_GL_EXT_point_parameters : 1;                      // 133
    bool IS_LOAD_GL_EXT_polygon_offset : 1;                        // 134
    bool IS_LOAD_GL_EXT_polygon_offset_clamp : 1;                  // 135
    bool IS_LOAD_GL_EXT_provoking_vertex : 1;                      // 136
    bool IS_LOAD_GL_EXT_raster_multisample : 1;                    // 137
    bool IS_LOAD_GL_EXT_secondary_color : 1;                       // 138
    bool IS_LOAD_GL_EXT_semaphore : 1;                             // 139
    bool IS_LOAD_GL_EXT_semaphore_fd : 1;                          // 140
    bool IS_LOAD_GL_EXT_semaphore_win32 : 1;                       // 141
    bool IS_LOAD_GL_EXT_separate_shader_objects : 1;               // 142
    bool IS_LOAD_GL_EXT_shader_framebuffer_fetch_non_coherent : 1; // 143
    bool IS_LOAD_GL_EXT_shader_image_load_store : 1;               // 144
    bool IS_LOAD_GL_EXT_stencil_clear_tag : 1;                     // 145
    bool IS_LOAD_GL_EXT_stencil_two_side : 1;                      // 146
    bool IS_LOAD_GL_EXT_subtexture : 1;                            // 147
    bool IS_LOAD_GL_EXT_texture3D : 1;                             // 148
    bool IS_LOAD_GL_EXT_texture_array : 1;                         // 149
    bool IS_LOAD_GL_EXT_texture_buffer_object : 1;                 // 150
    bool IS_LOAD_GL_EXT_texture_integer : 1;                       // 151
    bool IS_LOAD_GL_EXT_texture_object : 1;                        // 152
    bool IS_LOAD_GL_EXT_texture_perturb_normal : 1;                // 153
    bool IS_LOAD_GL_EXT_texture_storage : 1;                       // 154
    bool IS_LOAD_GL_EXT_timer_query : 1;                           // 155
    bool IS_LOAD_GL_EXT_transform_feedback : 1;                    // 156
    bool IS_LOAD_GL_EXT_vertex_array : 1;                          // 157
    bool IS_LOAD_GL_EXT_vertex_attrib_64bit : 1;                   // 158
    bool IS_LOAD_GL_EXT_vertex_shader : 1;                         // 159
    bool IS_LOAD_GL_EXT_vertex_weighting : 1;                      // 160
    bool IS_LOAD_GL_EXT_win32_keyed_mutex : 1;                     // 161
    bool IS_LOAD_GL_EXT_window_rectangles : 1;                     // 162
    bool IS_LOAD_GL_EXT_x11_sync_object : 1;                       // 163
    bool IS_LOAD_GL_GREMEDY_frame_terminator : 1;                  // 164
    bool IS_LOAD_GL_GREMEDY_string_marker : 1;                     // 165
    bool IS_LOAD_GL_HP_image_transform : 1;                        // 166
    bool IS_LOAD_GL_IBM_multimode_draw_arrays : 1;                 // 167
    bool IS_LOAD_GL_IBM_static_data : 1;                           // 168
    bool IS_LOAD_GL_IBM_vertex_array_lists : 1;                    // 169
    bool IS_LOAD_GL_INGR_blend_func_separate : 1;                  // 170
    bool IS_LOAD_GL_INTEL_framebuffer_CMAA : 1;                    // 171
    bool IS_LOAD_GL_INTEL_map_texture : 1;                         // 172
    bool IS_LOAD_GL_INTEL_parallel_arrays : 1;                     // 173
    bool IS_LOAD_GL_INTEL_performance_query : 1;                   // 174
    bool IS_LOAD_GL_MESA_framebuffer_flip_y : 1;                   // 175
    bool IS_LOAD_GL_MESA_resize_buffers : 1;                       // 176
    bool IS_LOAD_GL_MESA_window_pos : 1;                           // 177
    bool IS_LOAD_GL_NVX_conditional_render : 1;                    // 178
    bool IS_LOAD_GL_NVX_gpu_multicast2 : 1;                        // 179
    bool IS_LOAD_GL_NVX_linked_gpu_multicast : 1;                  // 180
    bool IS_LOAD_GL_NVX_progress_fence : 1;                        // 181
    bool IS_LOAD_GL_NV_alpha_to_coverage_dither_control : 1;       // 182
    bool IS_LOAD_GL_NV_bindless_multi_draw_indirect : 1;           // 183
    bool IS_LOAD_GL_NV_bindless_multi_draw_indirect_count : 1;     // 184
    bool IS_LOAD_GL_NV_bindless_texture : 1;                       // 185
    bool IS_LOAD_GL_NV_blend_equation_advanced : 1;                // 186
    bool IS_LOAD_GL_NV_clip_space_w_scaling : 1;                   // 187
    bool IS_LOAD_GL_NV_command_list : 1;                           // 188
    bool IS_LOAD_GL_NV_conditional_render : 1;                     // 189
    bool IS_LOAD_GL_NV_conservative_raster : 1;                    // 190
    bool IS_LOAD_GL_NV_conservative_raster_dilate : 1;             // 191
    bool IS_LOAD_GL_NV_conservative_raster_pre_snap_triangles : 1; // 192
    bool IS_LOAD_GL_NV_copy_image : 1;                             // 193
    bool IS_LOAD_GL_NV_depth_buffer_float : 1;                     // 194
    bool IS_LOAD_GL_NV_draw_texture : 1;                           // 195
    bool IS_LOAD_GL_NV_draw_vulkan_image : 1;                      // 196
    bool IS_LOAD_GL_NV_evaluators : 1;                             // 197
    bool IS_LOAD_GL_NV_explicit_multisample : 1;                   // 198
    bool IS_LOAD_GL_NV_fence : 1;                                  // 199
    bool IS_LOAD_GL_NV_fragment_coverage_to_color : 1;             // 200
    bool IS_LOAD_GL_NV_fragment_program : 1;                       // 201
    bool IS_LOAD_GL_NV_framebuffer_mixed_samples : 1;              // 202
    bool IS_LOAD_GL_NV_framebuffer_multisample_coverage : 1;       // 203
    bool IS_LOAD_GL_NV_geometry_program4 : 1;                      // 204
    bool IS_LOAD_GL_NV_gpu_multicast : 1;                          // 205
    bool IS_LOAD_GL_NV_gpu_program4 : 1;                           // 206
    bool IS_LOAD_GL_NV_gpu_program5 : 1;                           // 207
    bool IS_LOAD_GL_NV_half_float : 1;                             // 208
    bool IS_LOAD_GL_NV_internalformat_sample_query : 1;            // 209
    bool IS_LOAD_GL_NV_memory_attachment : 1;                      // 210
    bool IS_LOAD_GL_NV_memory_object_sparse : 1;                   // 211
    bool IS_LOAD_GL_NV_mesh_shader : 1;                            // 212
    bool IS_LOAD_GL_NV_occlusion_query : 1;                        // 213
    bool IS_LOAD_GL_NV_parameter_buffer_object : 1;                // 214
    bool IS_LOAD_GL_NV_path_rendering : 1;                         // 215
    bool IS_LOAD_GL_NV_pixel_data_range : 1;                       // 216
    bool IS_LOAD_GL_NV_point_sprite : 1;                           // 217
    bool IS_LOAD_GL_NV_present_video : 1;                          // 218
    bool IS_LOAD_GL_NV_primitive_restart : 1;                      // 219
    bool IS_LOAD_GL_NV_query_resource : 1;                         // 220
    bool IS_LOAD_GL_NV_query_resource_tag : 1;                     // 221
    bool IS_LOAD_GL_NV_register_combiners : 1;                     // 222
    bool IS_LOAD_GL_NV_register_combiners2 : 1;                    // 223
    bool IS_LOAD_GL_NV_sample_locations : 1;                       // 224
    bool IS_LOAD_GL_NV_scissor_exclusive : 1;                      // 225
    bool IS_LOAD_GL_NV_shader_buffer_load : 1;                     // 226
    bool IS_LOAD_GL_NV_shading_rate_image : 1;                     // 227
    bool IS_LOAD_GL_NV_texture_barrier : 1;                        // 228
    bool IS_LOAD_GL_NV_texture_multisample : 1;                    // 229
    bool IS_LOAD_GL_NV_timeline_semaphore : 1;                     // 230
    bool IS_LOAD_GL_NV_transform_feedback : 1;                     // 231
    bool IS_LOAD_GL_NV_transform_feedback2 : 1;                    // 232
    bool IS_LOAD_GL_NV_vdpau_interop : 1;                          // 233
    bool IS_LOAD_GL_NV_vdpau_interop2 : 1;                         // 234
    bool IS_LOAD_GL_NV_vertex_array_range : 1;                     // 235
    bool IS_LOAD_GL_NV_vertex_attrib_integer_64bit : 1;            // 236
    bool IS_LOAD_GL_NV_vertex_buffer_unified_memory : 1;           // 237
    bool IS_LOAD_GL_NV_vertex_program : 1;                         // 238
    bool IS_LOAD_GL_NV_video_capture : 1;                          // 239
    bool IS_LOAD_GL_NV_viewport_swizzle : 1;                       // 240
    bool IS_LOAD_GL_OVR_multiview : 1;                             // 241
    bool IS_LOAD_GL_PGI_misc_hints : 1;                            // 242
    bool IS_LOAD_GL_SGIS_detail_texture : 1;                       // 243
    bool IS_LOAD_GL_SGIS_fog_function : 1;                         // 244
    bool IS_LOAD_GL_SGIS_multisample : 1;                          // 245
    bool IS_LOAD_GL_SGIS_pixel_texture : 1;                        // 246
    bool IS_LOAD_GL_SGIS_point_parameters : 1;                     // 247
    bool IS_LOAD_GL_SGIS_sharpen_texture : 1;                      // 248
    bool IS_LOAD_GL_SGIS_texture4D : 1;                            // 249
    bool IS_LOAD_GL_SGIS_texture_color_mask : 1;                   // 250
    bool IS_LOAD_GL_SGIS_texture_filter4 : 1;                      // 251
    bool IS_LOAD_GL_SGIX_async : 1;                                // 252
    bool IS_LOAD_GL_SGIX_flush_raster : 1;                         // 253
    bool IS_LOAD_GL_SGIX_fragment_lighting : 1;                    // 254
    bool IS_LOAD_GL_SGIX_framezoom : 1;                            // 255
    bool IS_LOAD_GL_SGIX_igloo_interface : 1;                      // 256
    bool IS_LOAD_GL_SGIX_instruments : 1;                          // 257
    bool IS_LOAD_GL_SGIX_list_priority : 1;                        // 258
    bool IS_LOAD_GL_SGIX_pixel_texture : 1;                        // 259
    bool IS_LOAD_GL_SGIX_polynomial_ffd : 1;                       // 260
    bool IS_LOAD_GL_SGIX_reference_plane : 1;                      // 261
    bool IS_LOAD_GL_SGIX_sprite : 1;                               // 262
    bool IS_LOAD_GL_SGIX_tag_sample_buffer : 1;                    // 263
    bool IS_LOAD_GL_SGI_color_table : 1;                           // 264
    bool IS_LOAD_GL_SUNX_constant_data : 1;                        // 265
    bool IS_LOAD_GL_SUN_global_alpha : 1;                          // 266
    bool IS_LOAD_GL_SUN_mesh_array : 1;                            // 267
    bool IS_LOAD_GL_SUN_triangle_list : 1;                         // 268
    bool IS_LOAD_GL_SUN_vertex : 1;                                // 269
    bool IS_LOAD_GL_VERSION_1_0 : 1;                               // 270
    bool IS_LOAD_GL_VERSION_1_1 : 1;                               // 271
    bool IS_LOAD_GL_NV_gpu_shader5 : 1;                            // 272
  };

private:
  Flags NowState;

public:
  Flags NeedLoad;
  UserptrLoadFunc LoadFunc;
  void *userptr;
  inline APIProc TryToGet(std::string_view name) {
    return LoadFunc(userptr, name);
  }
  inline const Flags &GetNowState() const { return NowState; }
  OpenGLLoaderLoader();
  // GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint
  // end, GLsizei count, GLenum type, const void *indices);
  VKFUNDEFINE(glDrawRangeElements);
  // GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint
  // internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border,
  // GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexImage3D);
  // GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint
  // xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage3D);
  // GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint
  // xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glCopyTexSubImage3D);
  // GLAPI void APIENTRY glActiveTexture (GLenum texture);
  VKFUNDEFINE(glActiveTexture);
  // GLAPI void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert);
  VKFUNDEFINE(glSampleCoverage);
  // GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level,
  // GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint
  // border, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexImage3D);
  // GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level,
  // GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei
  // imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexImage2D);
  // GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level,
  // GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize,
  // const void *data);
  VKFUNDEFINE(glCompressedTexImage1D);
  // GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexSubImage3D);
  // GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
  // GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexSubImage2D);
  // GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level,
  // GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void
  // *data);
  VKFUNDEFINE(glCompressedTexSubImage1D);
  // GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level,
  // void *img);
  VKFUNDEFINE(glGetCompressedTexImage);
  // GLAPI void APIENTRY glClientActiveTexture (GLenum texture);
  VKFUNDEFINE(glClientActiveTexture);
  // GLAPI void APIENTRY glMultiTexCoord1d (GLenum target, GLdouble s);
  VKFUNDEFINE(glMultiTexCoord1d);
  // GLAPI void APIENTRY glMultiTexCoord1dv (GLenum target, const GLdouble *v);
  VKFUNDEFINE(glMultiTexCoord1dv);
  // GLAPI void APIENTRY glMultiTexCoord1f (GLenum target, GLfloat s);
  VKFUNDEFINE(glMultiTexCoord1f);
  // GLAPI void APIENTRY glMultiTexCoord1fv (GLenum target, const GLfloat *v);
  VKFUNDEFINE(glMultiTexCoord1fv);
  // GLAPI void APIENTRY glMultiTexCoord1i (GLenum target, GLint s);
  VKFUNDEFINE(glMultiTexCoord1i);
  // GLAPI void APIENTRY glMultiTexCoord1iv (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord1iv);
  // GLAPI void APIENTRY glMultiTexCoord1s (GLenum target, GLshort s);
  VKFUNDEFINE(glMultiTexCoord1s);
  // GLAPI void APIENTRY glMultiTexCoord1sv (GLenum target, const GLshort *v);
  VKFUNDEFINE(glMultiTexCoord1sv);
  // GLAPI void APIENTRY glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble
  // t);
  VKFUNDEFINE(glMultiTexCoord2d);
  // GLAPI void APIENTRY glMultiTexCoord2dv (GLenum target, const GLdouble *v);
  VKFUNDEFINE(glMultiTexCoord2dv);
  // GLAPI void APIENTRY glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat
  // t);
  VKFUNDEFINE(glMultiTexCoord2f);
  // GLAPI void APIENTRY glMultiTexCoord2fv (GLenum target, const GLfloat *v);
  VKFUNDEFINE(glMultiTexCoord2fv);
  // GLAPI void APIENTRY glMultiTexCoord2i (GLenum target, GLint s, GLint t);
  VKFUNDEFINE(glMultiTexCoord2i);
  // GLAPI void APIENTRY glMultiTexCoord2iv (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord2iv);
  // GLAPI void APIENTRY glMultiTexCoord2s (GLenum target, GLshort s, GLshort
  // t);
  VKFUNDEFINE(glMultiTexCoord2s);
  // GLAPI void APIENTRY glMultiTexCoord2sv (GLenum target, const GLshort *v);
  VKFUNDEFINE(glMultiTexCoord2sv);
  // GLAPI void APIENTRY glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble
  // t, GLdouble r);
  VKFUNDEFINE(glMultiTexCoord3d);
  // GLAPI void APIENTRY glMultiTexCoord3dv (GLenum target, const GLdouble *v);
  VKFUNDEFINE(glMultiTexCoord3dv);
  // GLAPI void APIENTRY glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t,
  // GLfloat r);
  VKFUNDEFINE(glMultiTexCoord3f);
  // GLAPI void APIENTRY glMultiTexCoord3fv (GLenum target, const GLfloat *v);
  VKFUNDEFINE(glMultiTexCoord3fv);
  // GLAPI void APIENTRY glMultiTexCoord3i (GLenum target, GLint s, GLint t,
  // GLint r);
  VKFUNDEFINE(glMultiTexCoord3i);
  // GLAPI void APIENTRY glMultiTexCoord3iv (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord3iv);
  // GLAPI void APIENTRY glMultiTexCoord3s (GLenum target, GLshort s, GLshort t,
  // GLshort r);
  VKFUNDEFINE(glMultiTexCoord3s);
  // GLAPI void APIENTRY glMultiTexCoord3sv (GLenum target, const GLshort *v);
  VKFUNDEFINE(glMultiTexCoord3sv);
  // GLAPI void APIENTRY glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble
  // t, GLdouble r, GLdouble q);
  VKFUNDEFINE(glMultiTexCoord4d);
  // GLAPI void APIENTRY glMultiTexCoord4dv (GLenum target, const GLdouble *v);
  VKFUNDEFINE(glMultiTexCoord4dv);
  // GLAPI void APIENTRY glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t,
  // GLfloat r, GLfloat q);
  VKFUNDEFINE(glMultiTexCoord4f);
  // GLAPI void APIENTRY glMultiTexCoord4fv (GLenum target, const GLfloat *v);
  VKFUNDEFINE(glMultiTexCoord4fv);
  // GLAPI void APIENTRY glMultiTexCoord4i (GLenum target, GLint s, GLint t,
  // GLint r, GLint q);
  VKFUNDEFINE(glMultiTexCoord4i);
  // GLAPI void APIENTRY glMultiTexCoord4iv (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord4iv);
  // GLAPI void APIENTRY glMultiTexCoord4s (GLenum target, GLshort s, GLshort t,
  // GLshort r, GLshort q);
  VKFUNDEFINE(glMultiTexCoord4s);
  // GLAPI void APIENTRY glMultiTexCoord4sv (GLenum target, const GLshort *v);
  VKFUNDEFINE(glMultiTexCoord4sv);
  // GLAPI void APIENTRY glLoadTransposeMatrixf (const GLfloat *m);
  VKFUNDEFINE(glLoadTransposeMatrixf);
  // GLAPI void APIENTRY glLoadTransposeMatrixd (const GLdouble *m);
  VKFUNDEFINE(glLoadTransposeMatrixd);
  // GLAPI void APIENTRY glMultTransposeMatrixf (const GLfloat *m);
  VKFUNDEFINE(glMultTransposeMatrixf);
  // GLAPI void APIENTRY glMultTransposeMatrixd (const GLdouble *m);
  VKFUNDEFINE(glMultTransposeMatrixd);
  // GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum
  // dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  VKFUNDEFINE(glBlendFuncSeparate);
  // GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first,
  // const GLsizei *count, GLsizei drawcount);
  VKFUNDEFINE(glMultiDrawArrays);
  // GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count,
  // GLenum type, const void *const*indices, GLsizei drawcount);
  VKFUNDEFINE(glMultiDrawElements);
  // GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);
  VKFUNDEFINE(glPointParameterf);
  // GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat
  // *params);
  VKFUNDEFINE(glPointParameterfv);
  // GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);
  VKFUNDEFINE(glPointParameteri);
  // GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);
  VKFUNDEFINE(glPointParameteriv);
  // GLAPI void APIENTRY glFogCoordf (GLfloat coord);
  VKFUNDEFINE(glFogCoordf);
  // GLAPI void APIENTRY glFogCoordfv (const GLfloat *coord);
  VKFUNDEFINE(glFogCoordfv);
  // GLAPI void APIENTRY glFogCoordd (GLdouble coord);
  VKFUNDEFINE(glFogCoordd);
  // GLAPI void APIENTRY glFogCoorddv (const GLdouble *coord);
  VKFUNDEFINE(glFogCoorddv);
  // GLAPI void APIENTRY glFogCoordPointer (GLenum type, GLsizei stride, const
  // void *pointer);
  VKFUNDEFINE(glFogCoordPointer);
  // GLAPI void APIENTRY glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte
  // blue);
  VKFUNDEFINE(glSecondaryColor3b);
  // GLAPI void APIENTRY glSecondaryColor3bv (const GLbyte *v);
  VKFUNDEFINE(glSecondaryColor3bv);
  // GLAPI void APIENTRY glSecondaryColor3d (GLdouble red, GLdouble green,
  // GLdouble blue);
  VKFUNDEFINE(glSecondaryColor3d);
  // GLAPI void APIENTRY glSecondaryColor3dv (const GLdouble *v);
  VKFUNDEFINE(glSecondaryColor3dv);
  // GLAPI void APIENTRY glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat
  // blue);
  VKFUNDEFINE(glSecondaryColor3f);
  // GLAPI void APIENTRY glSecondaryColor3fv (const GLfloat *v);
  VKFUNDEFINE(glSecondaryColor3fv);
  // GLAPI void APIENTRY glSecondaryColor3i (GLint red, GLint green, GLint
  // blue);
  VKFUNDEFINE(glSecondaryColor3i);
  // GLAPI void APIENTRY glSecondaryColor3iv (const GLint *v);
  VKFUNDEFINE(glSecondaryColor3iv);
  // GLAPI void APIENTRY glSecondaryColor3s (GLshort red, GLshort green, GLshort
  // blue);
  VKFUNDEFINE(glSecondaryColor3s);
  // GLAPI void APIENTRY glSecondaryColor3sv (const GLshort *v);
  VKFUNDEFINE(glSecondaryColor3sv);
  // GLAPI void APIENTRY glSecondaryColor3ub (GLubyte red, GLubyte green,
  // GLubyte blue);
  VKFUNDEFINE(glSecondaryColor3ub);
  // GLAPI void APIENTRY glSecondaryColor3ubv (const GLubyte *v);
  VKFUNDEFINE(glSecondaryColor3ubv);
  // GLAPI void APIENTRY glSecondaryColor3ui (GLuint red, GLuint green, GLuint
  // blue);
  VKFUNDEFINE(glSecondaryColor3ui);
  // GLAPI void APIENTRY glSecondaryColor3uiv (const GLuint *v);
  VKFUNDEFINE(glSecondaryColor3uiv);
  // GLAPI void APIENTRY glSecondaryColor3us (GLushort red, GLushort green,
  // GLushort blue);
  VKFUNDEFINE(glSecondaryColor3us);
  // GLAPI void APIENTRY glSecondaryColor3usv (const GLushort *v);
  VKFUNDEFINE(glSecondaryColor3usv);
  // GLAPI void APIENTRY glSecondaryColorPointer (GLint size, GLenum type,
  // GLsizei stride, const void *pointer);
  VKFUNDEFINE(glSecondaryColorPointer);
  // GLAPI void APIENTRY glWindowPos2d (GLdouble x, GLdouble y);
  VKFUNDEFINE(glWindowPos2d);
  // GLAPI void APIENTRY glWindowPos2dv (const GLdouble *v);
  VKFUNDEFINE(glWindowPos2dv);
  // GLAPI void APIENTRY glWindowPos2f (GLfloat x, GLfloat y);
  VKFUNDEFINE(glWindowPos2f);
  // GLAPI void APIENTRY glWindowPos2fv (const GLfloat *v);
  VKFUNDEFINE(glWindowPos2fv);
  // GLAPI void APIENTRY glWindowPos2i (GLint x, GLint y);
  VKFUNDEFINE(glWindowPos2i);
  // GLAPI void APIENTRY glWindowPos2iv (const GLint *v);
  VKFUNDEFINE(glWindowPos2iv);
  // GLAPI void APIENTRY glWindowPos2s (GLshort x, GLshort y);
  VKFUNDEFINE(glWindowPos2s);
  // GLAPI void APIENTRY glWindowPos2sv (const GLshort *v);
  VKFUNDEFINE(glWindowPos2sv);
  // GLAPI void APIENTRY glWindowPos3d (GLdouble x, GLdouble y, GLdouble z);
  VKFUNDEFINE(glWindowPos3d);
  // GLAPI void APIENTRY glWindowPos3dv (const GLdouble *v);
  VKFUNDEFINE(glWindowPos3dv);
  // GLAPI void APIENTRY glWindowPos3f (GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glWindowPos3f);
  // GLAPI void APIENTRY glWindowPos3fv (const GLfloat *v);
  VKFUNDEFINE(glWindowPos3fv);
  // GLAPI void APIENTRY glWindowPos3i (GLint x, GLint y, GLint z);
  VKFUNDEFINE(glWindowPos3i);
  // GLAPI void APIENTRY glWindowPos3iv (const GLint *v);
  VKFUNDEFINE(glWindowPos3iv);
  // GLAPI void APIENTRY glWindowPos3s (GLshort x, GLshort y, GLshort z);
  VKFUNDEFINE(glWindowPos3s);
  // GLAPI void APIENTRY glWindowPos3sv (const GLshort *v);
  VKFUNDEFINE(glWindowPos3sv);
  // GLAPI void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue,
  // GLfloat alpha);
  VKFUNDEFINE(glBlendColor);
  // GLAPI void APIENTRY glBlendEquation (GLenum mode);
  VKFUNDEFINE(glBlendEquation);
  // GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glGenQueries);
  // GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
  VKFUNDEFINE(glDeleteQueries);
  // GLAPI GLboolean APIENTRY glIsQuery (GLuint id);
  VKFUNDEFINE(glIsQuery);
  // GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);
  VKFUNDEFINE(glBeginQuery);
  // GLAPI void APIENTRY glEndQuery (GLenum target);
  VKFUNDEFINE(glEndQuery);
  // GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetQueryiv);
  // GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetQueryObjectiv);
  // GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint
  // *params);
  VKFUNDEFINE(glGetQueryObjectuiv);
  // GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);
  VKFUNDEFINE(glBindBuffer);
  // GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);
  VKFUNDEFINE(glDeleteBuffers);
  // GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
  VKFUNDEFINE(glGenBuffers);
  // GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);
  VKFUNDEFINE(glIsBuffer);
  // GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const
  // void *data, GLenum usage);
  VKFUNDEFINE(glBufferData);
  // GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset,
  // GLsizeiptr size, const void *data);
  VKFUNDEFINE(glBufferSubData);
  // GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset,
  // GLsizeiptr size, void *data);
  VKFUNDEFINE(glGetBufferSubData);
  // GLAPI void *APIENTRY glMapBuffer (GLenum target, GLenum access);
  VKFUNDEFINE(glMapBuffer);
  // GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);
  VKFUNDEFINE(glUnmapBuffer);
  // GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetBufferParameteriv);
  // GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void
  // **params);
  VKFUNDEFINE(glGetBufferPointerv);
  // GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum
  // modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparate);
  // GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
  VKFUNDEFINE(glDrawBuffers);
  // GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum
  // dpfail, GLenum dppass);
  VKFUNDEFINE(glStencilOpSeparate);
  // GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint
  // ref, GLuint mask);
  VKFUNDEFINE(glStencilFuncSeparate);
  // GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);
  VKFUNDEFINE(glStencilMaskSeparate);
  // GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);
  VKFUNDEFINE(glAttachShader);
  // GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index,
  // const GLchar *name);
  VKFUNDEFINE(glBindAttribLocation);
  // GLAPI void APIENTRY glCompileShader (GLuint shader);
  VKFUNDEFINE(glCompileShader);
  // GLAPI GLuint APIENTRY glCreateProgram (void);
  VKFUNDEFINE(glCreateProgram);
  // GLAPI GLuint APIENTRY glCreateShader (GLenum type);
  VKFUNDEFINE(glCreateShader);
  // GLAPI void APIENTRY glDeleteProgram (GLuint program);
  VKFUNDEFINE(glDeleteProgram);
  // GLAPI void APIENTRY glDeleteShader (GLuint shader);
  VKFUNDEFINE(glDeleteShader);
  // GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);
  VKFUNDEFINE(glDetachShader);
  // GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);
  VKFUNDEFINE(glDisableVertexAttribArray);
  // GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);
  VKFUNDEFINE(glEnableVertexAttribArray);
  // GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index,
  // GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  VKFUNDEFINE(glGetActiveAttrib);
  // GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index,
  // GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  VKFUNDEFINE(glGetActiveUniform);
  // GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount,
  // GLsizei *count, GLuint *shaders);
  VKFUNDEFINE(glGetAttachedShaders);
  // GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar
  // *name);
  VKFUNDEFINE(glGetAttribLocation);
  // GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetProgramiv);
  // GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize,
  // GLsizei *length, GLchar *infoLog);
  VKFUNDEFINE(glGetProgramInfoLog);
  // GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetShaderiv);
  // GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize,
  // GLsizei *length, GLchar *infoLog);
  VKFUNDEFINE(glGetShaderInfoLog);
  // GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize,
  // GLsizei *length, GLchar *source);
  VKFUNDEFINE(glGetShaderSource);
  // GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar
  // *name);
  VKFUNDEFINE(glGetUniformLocation);
  // GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat
  // *params);
  VKFUNDEFINE(glGetUniformfv);
  // GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint
  // *params);
  VKFUNDEFINE(glGetUniformiv);
  // GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname,
  // GLdouble *params);
  VKFUNDEFINE(glGetVertexAttribdv);
  // GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetVertexAttribfv);
  // GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetVertexAttribiv);
  // GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname,
  // void **pointer);
  VKFUNDEFINE(glGetVertexAttribPointerv);
  // GLAPI GLboolean APIENTRY glIsProgram (GLuint program);
  VKFUNDEFINE(glIsProgram);
  // GLAPI GLboolean APIENTRY glIsShader (GLuint shader);
  VKFUNDEFINE(glIsShader);
  // GLAPI void APIENTRY glLinkProgram (GLuint program);
  VKFUNDEFINE(glLinkProgram);
  // GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const
  // GLchar *const*string, const GLint *length);
  VKFUNDEFINE(glShaderSource);
  // GLAPI void APIENTRY glUseProgram (GLuint program);
  VKFUNDEFINE(glUseProgram);
  // GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);
  VKFUNDEFINE(glUniform1f);
  // GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);
  VKFUNDEFINE(glUniform2f);
  // GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1,
  // GLfloat v2);
  VKFUNDEFINE(glUniform3f);
  // GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1,
  // GLfloat v2, GLfloat v3);
  VKFUNDEFINE(glUniform4f);
  // GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);
  VKFUNDEFINE(glUniform1i);
  // GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);
  VKFUNDEFINE(glUniform2i);
  // GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint
  // v2);
  VKFUNDEFINE(glUniform3i);
  // GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint
  // v2, GLint v3);
  VKFUNDEFINE(glUniform4i);
  // GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform1fv);
  // GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform2fv);
  // GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform3fv);
  // GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform4fv);
  // GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform1iv);
  // GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform2iv);
  // GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform3iv);
  // GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform4iv);
  // GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2fv);
  // GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3fv);
  // GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4fv);
  // GLAPI void APIENTRY glValidateProgram (GLuint program);
  VKFUNDEFINE(glValidateProgram);
  // GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);
  VKFUNDEFINE(glVertexAttrib1d);
  // GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib1dv);
  // GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
  VKFUNDEFINE(glVertexAttrib1f);
  // GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib1fv);
  // GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);
  VKFUNDEFINE(glVertexAttrib1s);
  // GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib1sv);
  // GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble
  // y);
  VKFUNDEFINE(glVertexAttrib2d);
  // GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib2dv);
  // GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
  VKFUNDEFINE(glVertexAttrib2f);
  // GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib2fv);
  // GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
  VKFUNDEFINE(glVertexAttrib2s);
  // GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib2sv);
  // GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y,
  // GLdouble z);
  VKFUNDEFINE(glVertexAttrib3d);
  // GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib3dv);
  // GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y,
  // GLfloat z);
  VKFUNDEFINE(glVertexAttrib3f);
  // GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib3fv);
  // GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y,
  // GLshort z);
  VKFUNDEFINE(glVertexAttrib3s);
  // GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib3sv);
  // GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
  VKFUNDEFINE(glVertexAttrib4Nbv);
  // GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttrib4Niv);
  // GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib4Nsv);
  // GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y,
  // GLubyte z, GLubyte w);
  VKFUNDEFINE(glVertexAttrib4Nub);
  // GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
  VKFUNDEFINE(glVertexAttrib4Nubv);
  // GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttrib4Nuiv);
  // GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);
  VKFUNDEFINE(glVertexAttrib4Nusv);
  // GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);
  VKFUNDEFINE(glVertexAttrib4bv);
  // GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y,
  // GLdouble z, GLdouble w);
  VKFUNDEFINE(glVertexAttrib4d);
  // GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib4dv);
  // GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y,
  // GLfloat z, GLfloat w);
  VKFUNDEFINE(glVertexAttrib4f);
  // GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib4fv);
  // GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttrib4iv);
  // GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y,
  // GLshort z, GLshort w);
  VKFUNDEFINE(glVertexAttrib4s);
  // GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib4sv);
  // GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);
  VKFUNDEFINE(glVertexAttrib4ubv);
  // GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttrib4uiv);
  // GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);
  VKFUNDEFINE(glVertexAttrib4usv);
  // GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum
  // type, GLboolean normalized, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribPointer);
  // GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2x3fv);
  // GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3x2fv);
  // GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2x4fv);
  // GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4x2fv);
  // GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3x4fv);
  // GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4x3fv);
  // GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g,
  // GLboolean b, GLboolean a);
  VKFUNDEFINE(glColorMaski);
  // GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean
  // *data);
  VKFUNDEFINE(glGetBooleani_v);
  // GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint
  // *data);
  VKFUNDEFINE(glGetIntegeri_v);
  // GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);
  VKFUNDEFINE(glEnablei);
  // GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);
  VKFUNDEFINE(glDisablei);
  // GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);
  VKFUNDEFINE(glIsEnabledi);
  // GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);
  VKFUNDEFINE(glBeginTransformFeedback);
  // GLAPI void APIENTRY glEndTransformFeedback (void);
  VKFUNDEFINE(glEndTransformFeedback);
  // GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint
  // buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glBindBufferRange);
  // GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint
  // buffer);
  VKFUNDEFINE(glBindBufferBase);
  // GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei
  // count, const GLchar *const*varyings, GLenum bufferMode);
  VKFUNDEFINE(glTransformFeedbackVaryings);
  // GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint
  // index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type,
  // GLchar *name);
  VKFUNDEFINE(glGetTransformFeedbackVarying);
  // GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);
  VKFUNDEFINE(glClampColor);
  // GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);
  VKFUNDEFINE(glBeginConditionalRender);
  // GLAPI void APIENTRY glEndConditionalRender (void);
  VKFUNDEFINE(glEndConditionalRender);
  // GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size,
  // GLenum type, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribIPointer);
  // GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetVertexAttribIiv);
  // GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname,
  // GLuint *params);
  VKFUNDEFINE(glGetVertexAttribIuiv);
  // GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);
  VKFUNDEFINE(glVertexAttribI1i);
  // GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);
  VKFUNDEFINE(glVertexAttribI2i);
  // GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y,
  // GLint z);
  VKFUNDEFINE(glVertexAttribI3i);
  // GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y,
  // GLint z, GLint w);
  VKFUNDEFINE(glVertexAttribI4i);
  // GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);
  VKFUNDEFINE(glVertexAttribI1ui);
  // GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
  VKFUNDEFINE(glVertexAttribI2ui);
  // GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y,
  // GLuint z);
  VKFUNDEFINE(glVertexAttribI3ui);
  // GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y,
  // GLuint z, GLuint w);
  VKFUNDEFINE(glVertexAttribI4ui);
  // GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI1iv);
  // GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI2iv);
  // GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI3iv);
  // GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI4iv);
  // GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI1uiv);
  // GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI2uiv);
  // GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI3uiv);
  // GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI4uiv);
  // GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);
  VKFUNDEFINE(glVertexAttribI4bv);
  // GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttribI4sv);
  // GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);
  VKFUNDEFINE(glVertexAttribI4ubv);
  // GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);
  VKFUNDEFINE(glVertexAttribI4usv);
  // GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint
  // *params);
  VKFUNDEFINE(glGetUniformuiv);
  // GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color,
  // const GLchar *name);
  VKFUNDEFINE(glBindFragDataLocation);
  // GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar
  // *name);
  VKFUNDEFINE(glGetFragDataLocation);
  // GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);
  VKFUNDEFINE(glUniform1ui);
  // GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);
  VKFUNDEFINE(glUniform2ui);
  // GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1,
  // GLuint v2);
  VKFUNDEFINE(glUniform3ui);
  // GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1,
  // GLuint v2, GLuint v3);
  VKFUNDEFINE(glUniform4ui);
  // GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform1uiv);
  // GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform2uiv);
  // GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform3uiv);
  // GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform4uiv);
  // GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const
  // GLint *params);
  VKFUNDEFINE(glTexParameterIiv);
  // GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const
  // GLuint *params);
  VKFUNDEFINE(glTexParameterIuiv);
  // GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetTexParameterIiv);
  // GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname,
  // GLuint *params);
  VKFUNDEFINE(glGetTexParameterIuiv);
  // GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const
  // GLint *value);
  VKFUNDEFINE(glClearBufferiv);
  // GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer,
  // const GLuint *value);
  VKFUNDEFINE(glClearBufferuiv);
  // GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const
  // GLfloat *value);
  VKFUNDEFINE(glClearBufferfv);
  // GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer,
  // GLfloat depth, GLint stencil);
  VKFUNDEFINE(glClearBufferfi);
  // GLAPI const GLubyte *APIENTRY glGetStringi (GLenum name, GLuint index);
  VKFUNDEFINE(glGetStringi);
  // GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);
  VKFUNDEFINE(glIsRenderbuffer);
  // GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint
  // renderbuffer);
  VKFUNDEFINE(glBindRenderbuffer);
  // GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint
  // *renderbuffers);
  VKFUNDEFINE(glDeleteRenderbuffers);
  // GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);
  VKFUNDEFINE(glGenRenderbuffers);
  // GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorage);
  // GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetRenderbufferParameteriv);
  // GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);
  VKFUNDEFINE(glIsFramebuffer);
  // GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
  VKFUNDEFINE(glBindFramebuffer);
  // GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint
  // *framebuffers);
  VKFUNDEFINE(glDeleteFramebuffers);
  // GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
  VKFUNDEFINE(glGenFramebuffers);
  // GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);
  VKFUNDEFINE(glCheckFramebufferStatus);
  // GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum
  // attachment, GLenum textarget, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTexture1D);
  // GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum
  // attachment, GLenum textarget, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTexture2D);
  // GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum
  // attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
  VKFUNDEFINE(glFramebufferTexture3D);
  // GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum
  // attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  VKFUNDEFINE(glFramebufferRenderbuffer);
  // GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target,
  // GLenum attachment, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferAttachmentParameteriv);
  // GLAPI void APIENTRY glGenerateMipmap (GLenum target);
  VKFUNDEFINE(glGenerateMipmap);
  // GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint
  // srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1,
  // GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebuffer);
  // GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target,
  // GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorageMultisample);
  // GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum
  // attachment, GLuint texture, GLint level, GLint layer);
  VKFUNDEFINE(glFramebufferTextureLayer);
  // GLAPI void *APIENTRY glMapBufferRange (GLenum target, GLintptr offset,
  // GLsizeiptr length, GLbitfield access);
  VKFUNDEFINE(glMapBufferRange);
  // GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr
  // offset, GLsizeiptr length);
  VKFUNDEFINE(glFlushMappedBufferRange);
  // GLAPI void APIENTRY glBindVertexArray (GLuint array);
  VKFUNDEFINE(glBindVertexArray);
  // GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
  VKFUNDEFINE(glDeleteVertexArrays);
  // GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);
  VKFUNDEFINE(glGenVertexArrays);
  // GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);
  VKFUNDEFINE(glIsVertexArray);
  // GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first,
  // GLsizei count, GLsizei instancecount);
  VKFUNDEFINE(glDrawArraysInstanced);
  // GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count,
  // GLenum type, const void *indices, GLsizei instancecount);
  VKFUNDEFINE(glDrawElementsInstanced);
  // GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat,
  // GLuint buffer);
  VKFUNDEFINE(glTexBuffer);
  // GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);
  VKFUNDEFINE(glPrimitiveRestartIndex);
  // GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum
  // writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  VKFUNDEFINE(glCopyBufferSubData);
  // GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei
  // uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
  VKFUNDEFINE(glGetUniformIndices);
  // GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei
  // uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetActiveUniformsiv);
  // GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint
  // uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
  VKFUNDEFINE(glGetActiveUniformName);
  // GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar
  // *uniformBlockName);
  VKFUNDEFINE(glGetUniformBlockIndex);
  // GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint
  // uniformBlockIndex, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetActiveUniformBlockiv);
  // GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint
  // uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar
  // *uniformBlockName);
  VKFUNDEFINE(glGetActiveUniformBlockName);
  // GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint
  // uniformBlockIndex, GLuint uniformBlockBinding);
  VKFUNDEFINE(glUniformBlockBinding);
  // GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count,
  // GLenum type, const void *indices, GLint basevertex);
  VKFUNDEFINE(glDrawElementsBaseVertex);
  // GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint
  // start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint
  // basevertex);
  VKFUNDEFINE(glDrawRangeElementsBaseVertex);
  // GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei
  // count, GLenum type, const void *indices, GLsizei instancecount, GLint
  // basevertex);
  VKFUNDEFINE(glDrawElementsInstancedBaseVertex);
  // GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const
  // GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount,
  // const GLint *basevertex);
  VKFUNDEFINE(glMultiDrawElementsBaseVertex);
  // GLAPI void APIENTRY glProvokingVertex (GLenum mode);
  VKFUNDEFINE(glProvokingVertex);
  // GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);
  VKFUNDEFINE(glFenceSync);
  // GLAPI GLboolean APIENTRY glIsSync (GLsync sync);
  VKFUNDEFINE(glIsSync);
  // GLAPI void APIENTRY glDeleteSync (GLsync sync);
  VKFUNDEFINE(glDeleteSync);
  // GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags,
  // GLuint64 timeout);
  VKFUNDEFINE(glClientWaitSync);
  // GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64
  // timeout);
  VKFUNDEFINE(glWaitSync);
  // GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);
  VKFUNDEFINE(glGetInteger64v);
  // GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei count,
  // GLsizei *length, GLint *values);
  VKFUNDEFINE(glGetSynciv);
  // GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64
  // *data);
  VKFUNDEFINE(glGetInteger64i_v);
  // GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname,
  // GLint64 *params);
  VKFUNDEFINE(glGetBufferParameteri64v);
  // GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment,
  // GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTexture);
  // GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei
  // samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean
  // fixedsamplelocations);
  VKFUNDEFINE(glTexImage2DMultisample);
  // GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei
  // samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei
  // depth, GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTexImage3DMultisample);
  // GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat
  // *val);
  VKFUNDEFINE(glGetMultisamplefv);
  // GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask);
  VKFUNDEFINE(glSampleMaski);
  // GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint
  // colorNumber, GLuint index, const GLchar *name);
  VKFUNDEFINE(glBindFragDataLocationIndexed);
  // GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar
  // *name);
  VKFUNDEFINE(glGetFragDataIndex);
  // GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);
  VKFUNDEFINE(glGenSamplers);
  // GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint
  // *samplers);
  VKFUNDEFINE(glDeleteSamplers);
  // GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);
  VKFUNDEFINE(glIsSampler);
  // GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);
  VKFUNDEFINE(glBindSampler);
  // GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname,
  // GLint param);
  VKFUNDEFINE(glSamplerParameteri);
  // GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname,
  // const GLint *param);
  VKFUNDEFINE(glSamplerParameteriv);
  // GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname,
  // GLfloat param);
  VKFUNDEFINE(glSamplerParameterf);
  // GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname,
  // const GLfloat *param);
  VKFUNDEFINE(glSamplerParameterfv);
  // GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname,
  // const GLint *param);
  VKFUNDEFINE(glSamplerParameterIiv);
  // GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname,
  // const GLuint *param);
  VKFUNDEFINE(glSamplerParameterIuiv);
  // GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetSamplerParameteriv);
  // GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetSamplerParameterIiv);
  // GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetSamplerParameterfv);
  // GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum
  // pname, GLuint *params);
  VKFUNDEFINE(glGetSamplerParameterIuiv);
  // GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);
  VKFUNDEFINE(glQueryCounter);
  // GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64
  // *params);
  VKFUNDEFINE(glGetQueryObjecti64v);
  // GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname,
  // GLuint64 *params);
  VKFUNDEFINE(glGetQueryObjectui64v);
  // GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);
  VKFUNDEFINE(glVertexAttribDivisor);
  // GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type,
  // GLboolean normalized, GLuint value);
  VKFUNDEFINE(glVertexAttribP1ui);
  // GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type,
  // GLboolean normalized, const GLuint *value);
  VKFUNDEFINE(glVertexAttribP1uiv);
  // GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type,
  // GLboolean normalized, GLuint value);
  VKFUNDEFINE(glVertexAttribP2ui);
  // GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type,
  // GLboolean normalized, const GLuint *value);
  VKFUNDEFINE(glVertexAttribP2uiv);
  // GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type,
  // GLboolean normalized, GLuint value);
  VKFUNDEFINE(glVertexAttribP3ui);
  // GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type,
  // GLboolean normalized, const GLuint *value);
  VKFUNDEFINE(glVertexAttribP3uiv);
  // GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type,
  // GLboolean normalized, GLuint value);
  VKFUNDEFINE(glVertexAttribP4ui);
  // GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type,
  // GLboolean normalized, const GLuint *value);
  VKFUNDEFINE(glVertexAttribP4uiv);
  // GLAPI void APIENTRY glVertexP2ui (GLenum type, GLuint value);
  VKFUNDEFINE(glVertexP2ui);
  // GLAPI void APIENTRY glVertexP2uiv (GLenum type, const GLuint *value);
  VKFUNDEFINE(glVertexP2uiv);
  // GLAPI void APIENTRY glVertexP3ui (GLenum type, GLuint value);
  VKFUNDEFINE(glVertexP3ui);
  // GLAPI void APIENTRY glVertexP3uiv (GLenum type, const GLuint *value);
  VKFUNDEFINE(glVertexP3uiv);
  // GLAPI void APIENTRY glVertexP4ui (GLenum type, GLuint value);
  VKFUNDEFINE(glVertexP4ui);
  // GLAPI void APIENTRY glVertexP4uiv (GLenum type, const GLuint *value);
  VKFUNDEFINE(glVertexP4uiv);
  // GLAPI void APIENTRY glTexCoordP1ui (GLenum type, GLuint coords);
  VKFUNDEFINE(glTexCoordP1ui);
  // GLAPI void APIENTRY glTexCoordP1uiv (GLenum type, const GLuint *coords);
  VKFUNDEFINE(glTexCoordP1uiv);
  // GLAPI void APIENTRY glTexCoordP2ui (GLenum type, GLuint coords);
  VKFUNDEFINE(glTexCoordP2ui);
  // GLAPI void APIENTRY glTexCoordP2uiv (GLenum type, const GLuint *coords);
  VKFUNDEFINE(glTexCoordP2uiv);
  // GLAPI void APIENTRY glTexCoordP3ui (GLenum type, GLuint coords);
  VKFUNDEFINE(glTexCoordP3ui);
  // GLAPI void APIENTRY glTexCoordP3uiv (GLenum type, const GLuint *coords);
  VKFUNDEFINE(glTexCoordP3uiv);
  // GLAPI void APIENTRY glTexCoordP4ui (GLenum type, GLuint coords);
  VKFUNDEFINE(glTexCoordP4ui);
  // GLAPI void APIENTRY glTexCoordP4uiv (GLenum type, const GLuint *coords);
  VKFUNDEFINE(glTexCoordP4uiv);
  // GLAPI void APIENTRY glMultiTexCoordP1ui (GLenum texture, GLenum type,
  // GLuint coords);
  VKFUNDEFINE(glMultiTexCoordP1ui);
  // GLAPI void APIENTRY glMultiTexCoordP1uiv (GLenum texture, GLenum type,
  // const GLuint *coords);
  VKFUNDEFINE(glMultiTexCoordP1uiv);
  // GLAPI void APIENTRY glMultiTexCoordP2ui (GLenum texture, GLenum type,
  // GLuint coords);
  VKFUNDEFINE(glMultiTexCoordP2ui);
  // GLAPI void APIENTRY glMultiTexCoordP2uiv (GLenum texture, GLenum type,
  // const GLuint *coords);
  VKFUNDEFINE(glMultiTexCoordP2uiv);
  // GLAPI void APIENTRY glMultiTexCoordP3ui (GLenum texture, GLenum type,
  // GLuint coords);
  VKFUNDEFINE(glMultiTexCoordP3ui);
  // GLAPI void APIENTRY glMultiTexCoordP3uiv (GLenum texture, GLenum type,
  // const GLuint *coords);
  VKFUNDEFINE(glMultiTexCoordP3uiv);
  // GLAPI void APIENTRY glMultiTexCoordP4ui (GLenum texture, GLenum type,
  // GLuint coords);
  VKFUNDEFINE(glMultiTexCoordP4ui);
  // GLAPI void APIENTRY glMultiTexCoordP4uiv (GLenum texture, GLenum type,
  // const GLuint *coords);
  VKFUNDEFINE(glMultiTexCoordP4uiv);
  // GLAPI void APIENTRY glNormalP3ui (GLenum type, GLuint coords);
  VKFUNDEFINE(glNormalP3ui);
  // GLAPI void APIENTRY glNormalP3uiv (GLenum type, const GLuint *coords);
  VKFUNDEFINE(glNormalP3uiv);
  // GLAPI void APIENTRY glColorP3ui (GLenum type, GLuint color);
  VKFUNDEFINE(glColorP3ui);
  // GLAPI void APIENTRY glColorP3uiv (GLenum type, const GLuint *color);
  VKFUNDEFINE(glColorP3uiv);
  // GLAPI void APIENTRY glColorP4ui (GLenum type, GLuint color);
  VKFUNDEFINE(glColorP4ui);
  // GLAPI void APIENTRY glColorP4uiv (GLenum type, const GLuint *color);
  VKFUNDEFINE(glColorP4uiv);
  // GLAPI void APIENTRY glSecondaryColorP3ui (GLenum type, GLuint color);
  VKFUNDEFINE(glSecondaryColorP3ui);
  // GLAPI void APIENTRY glSecondaryColorP3uiv (GLenum type, const GLuint
  // *color);
  VKFUNDEFINE(glSecondaryColorP3uiv);
  // GLAPI void APIENTRY glMinSampleShading (GLfloat value);
  VKFUNDEFINE(glMinSampleShading);
  // GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
  VKFUNDEFINE(glBlendEquationi);
  // GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB,
  // GLenum modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparatei);
  // GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);
  VKFUNDEFINE(glBlendFunci);
  // GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum
  // dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  VKFUNDEFINE(glBlendFuncSeparatei);
  // GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void
  // *indirect);
  VKFUNDEFINE(glDrawArraysIndirect);
  // GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const
  // void *indirect);
  VKFUNDEFINE(glDrawElementsIndirect);
  // GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);
  VKFUNDEFINE(glUniform1d);
  // GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);
  VKFUNDEFINE(glUniform2d);
  // GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y,
  // GLdouble z);
  VKFUNDEFINE(glUniform3d);
  // GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y,
  // GLdouble z, GLdouble w);
  VKFUNDEFINE(glUniform4d);
  // GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const
  // GLdouble *value);
  VKFUNDEFINE(glUniform1dv);
  // GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const
  // GLdouble *value);
  VKFUNDEFINE(glUniform2dv);
  // GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const
  // GLdouble *value);
  VKFUNDEFINE(glUniform3dv);
  // GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const
  // GLdouble *value);
  VKFUNDEFINE(glUniform4dv);
  // GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix2dv);
  // GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix3dv);
  // GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix4dv);
  // GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix2x3dv);
  // GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix2x4dv);
  // GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix3x2dv);
  // GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix3x4dv);
  // GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix4x2dv);
  // GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count,
  // GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glUniformMatrix4x3dv);
  // GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location,
  // GLdouble *params);
  VKFUNDEFINE(glGetUniformdv);
  // GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum
  // shadertype, const GLchar *name);
  VKFUNDEFINE(glGetSubroutineUniformLocation);
  // GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum
  // shadertype, const GLchar *name);
  VKFUNDEFINE(glGetSubroutineIndex);
  // GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum
  // shadertype, GLuint index, GLenum pname, GLint *values);
  VKFUNDEFINE(glGetActiveSubroutineUniformiv);
  // GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program,
  // GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar
  // *name);
  VKFUNDEFINE(glGetActiveSubroutineUniformName);
  // GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum
  // shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
  VKFUNDEFINE(glGetActiveSubroutineName);
  // GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei
  // count, const GLuint *indices);
  VKFUNDEFINE(glUniformSubroutinesuiv);
  // GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint
  // location, GLuint *params);
  VKFUNDEFINE(glGetUniformSubroutineuiv);
  // GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype,
  // GLenum pname, GLint *values);
  VKFUNDEFINE(glGetProgramStageiv);
  // GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);
  VKFUNDEFINE(glPatchParameteri);
  // GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat
  // *values);
  VKFUNDEFINE(glPatchParameterfv);
  // GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);
  VKFUNDEFINE(glBindTransformFeedback);
  // GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint
  // *ids);
  VKFUNDEFINE(glDeleteTransformFeedbacks);
  // GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glGenTransformFeedbacks);
  // GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);
  VKFUNDEFINE(glIsTransformFeedback);
  // GLAPI void APIENTRY glPauseTransformFeedback (void);
  VKFUNDEFINE(glPauseTransformFeedback);
  // GLAPI void APIENTRY glResumeTransformFeedback (void);
  VKFUNDEFINE(glResumeTransformFeedback);
  // GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);
  VKFUNDEFINE(glDrawTransformFeedback);
  // GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id,
  // GLuint stream);
  VKFUNDEFINE(glDrawTransformFeedbackStream);
  // GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index,
  // GLuint id);
  VKFUNDEFINE(glBeginQueryIndexed);
  // GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);
  VKFUNDEFINE(glEndQueryIndexed);
  // GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetQueryIndexediv);
  // GLAPI void APIENTRY glReleaseShaderCompiler (void);
  VKFUNDEFINE(glReleaseShaderCompiler);
  // GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders,
  // GLenum binaryFormat, const void *binary, GLsizei length);
  VKFUNDEFINE(glShaderBinary);
  // GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum
  // precisiontype, GLint *range, GLint *precision);
  VKFUNDEFINE(glGetShaderPrecisionFormat);
  // GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f);
  VKFUNDEFINE(glDepthRangef);
  // GLAPI void APIENTRY glClearDepthf (GLfloat d);
  VKFUNDEFINE(glClearDepthf);
  // GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize,
  // GLsizei *length, GLenum *binaryFormat, void *binary);
  VKFUNDEFINE(glGetProgramBinary);
  // GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat,
  // const void *binary, GLsizei length);
  VKFUNDEFINE(glProgramBinary);
  // GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname,
  // GLint value);
  VKFUNDEFINE(glProgramParameteri);
  // GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages,
  // GLuint program);
  VKFUNDEFINE(glUseProgramStages);
  // GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint
  // program);
  VKFUNDEFINE(glActiveShaderProgram);
  // GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count,
  // const GLchar *const*strings);
  VKFUNDEFINE(glCreateShaderProgramv);
  // GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);
  VKFUNDEFINE(glBindProgramPipeline);
  // GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint
  // *pipelines);
  VKFUNDEFINE(glDeleteProgramPipelines);
  // GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);
  VKFUNDEFINE(glGenProgramPipelines);
  // GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);
  VKFUNDEFINE(glIsProgramPipeline);
  // GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetProgramPipelineiv);
  // GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location,
  // GLint v0);
  VKFUNDEFINE(glProgramUniform1i);
  // GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform1iv);
  // GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location,
  // GLfloat v0);
  VKFUNDEFINE(glProgramUniform1f);
  // GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform1fv);
  // GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location,
  // GLdouble v0);
  VKFUNDEFINE(glProgramUniform1d);
  // GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform1dv);
  // GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location,
  // GLuint v0);
  VKFUNDEFINE(glProgramUniform1ui);
  // GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location,
  // GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform1uiv);
  // GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location,
  // GLint v0, GLint v1);
  VKFUNDEFINE(glProgramUniform2i);
  // GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform2iv);
  // GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location,
  // GLfloat v0, GLfloat v1);
  VKFUNDEFINE(glProgramUniform2f);
  // GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform2fv);
  // GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location,
  // GLdouble v0, GLdouble v1);
  VKFUNDEFINE(glProgramUniform2d);
  // GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform2dv);
  // GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location,
  // GLuint v0, GLuint v1);
  VKFUNDEFINE(glProgramUniform2ui);
  // GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location,
  // GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform2uiv);
  // GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location,
  // GLint v0, GLint v1, GLint v2);
  VKFUNDEFINE(glProgramUniform3i);
  // GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform3iv);
  // GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location,
  // GLfloat v0, GLfloat v1, GLfloat v2);
  VKFUNDEFINE(glProgramUniform3f);
  // GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform3fv);
  // GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location,
  // GLdouble v0, GLdouble v1, GLdouble v2);
  VKFUNDEFINE(glProgramUniform3d);
  // GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform3dv);
  // GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location,
  // GLuint v0, GLuint v1, GLuint v2);
  VKFUNDEFINE(glProgramUniform3ui);
  // GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location,
  // GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform3uiv);
  // GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location,
  // GLint v0, GLint v1, GLint v2, GLint v3);
  VKFUNDEFINE(glProgramUniform4i);
  // GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform4iv);
  // GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location,
  // GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  VKFUNDEFINE(glProgramUniform4f);
  // GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform4fv);
  // GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location,
  // GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
  VKFUNDEFINE(glProgramUniform4d);
  // GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform4dv);
  // GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location,
  // GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  VKFUNDEFINE(glProgramUniform4ui);
  // GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location,
  // GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform4uiv);
  // GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2fv);
  // GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3fv);
  // GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4fv);
  // GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix2dv);
  // GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix3dv);
  // GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix4dv);
  // GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x3fv);
  // GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x2fv);
  // GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x4fv);
  // GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x2fv);
  // GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x4fv);
  // GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x3fv);
  // GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix2x3dv);
  // GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix3x2dv);
  // GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix2x4dv);
  // GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix4x2dv);
  // GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix3x4dv);
  // GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix4x3dv);
  // GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);
  VKFUNDEFINE(glValidateProgramPipeline);
  // GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei
  // bufSize, GLsizei *length, GLchar *infoLog);
  VKFUNDEFINE(glGetProgramPipelineInfoLog);
  // GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);
  VKFUNDEFINE(glVertexAttribL1d);
  // GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble
  // y);
  VKFUNDEFINE(glVertexAttribL2d);
  // GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble
  // y, GLdouble z);
  VKFUNDEFINE(glVertexAttribL3d);
  // GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble
  // y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glVertexAttribL4d);
  // GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttribL1dv);
  // GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttribL2dv);
  // GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttribL3dv);
  // GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttribL4dv);
  // GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size,
  // GLenum type, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribLPointer);
  // GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname,
  // GLdouble *params);
  VKFUNDEFINE(glGetVertexAttribLdv);
  // GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const
  // GLfloat *v);
  VKFUNDEFINE(glViewportArrayv);
  // GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y,
  // GLfloat w, GLfloat h);
  VKFUNDEFINE(glViewportIndexedf);
  // GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glViewportIndexedfv);
  // GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const
  // GLint *v);
  VKFUNDEFINE(glScissorArrayv);
  // GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint
  // bottom, GLsizei width, GLsizei height);
  VKFUNDEFINE(glScissorIndexed);
  // GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);
  VKFUNDEFINE(glScissorIndexedv);
  // GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const
  // GLdouble *v);
  VKFUNDEFINE(glDepthRangeArrayv);
  // GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble
  // f);
  VKFUNDEFINE(glDepthRangeIndexed);
  // GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat
  // *data);
  VKFUNDEFINE(glGetFloati_v);
  // GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble
  // *data);
  VKFUNDEFINE(glGetDoublei_v);
  // GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint
  // first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
  VKFUNDEFINE(glDrawArraysInstancedBaseInstance);
  // GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode,
  // GLsizei count, GLenum type, const void *indices, GLsizei instancecount,
  // GLuint baseinstance);
  VKFUNDEFINE(glDrawElementsInstancedBaseInstance);
  // GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum
  // mode, GLsizei count, GLenum type, const void *indices, GLsizei
  // instancecount, GLint basevertex, GLuint baseinstance);
  VKFUNDEFINE(glDrawElementsInstancedBaseVertexBaseInstance);
  // GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum
  // internalformat, GLenum pname, GLsizei count, GLint *params);
  VKFUNDEFINE(glGetInternalformativ);
  // GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program,
  // GLuint bufferIndex, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetActiveAtomicCounterBufferiv);
  // GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint
  // level, GLboolean layered, GLint layer, GLenum access, GLenum format);
  VKFUNDEFINE(glBindImageTexture);
  // GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);
  VKFUNDEFINE(glMemoryBarrier);
  // GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum
  // internalformat, GLsizei width);
  VKFUNDEFINE(glTexStorage1D);
  // GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glTexStorage2D);
  // GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum
  // internalformat, GLsizei width, GLsizei height, GLsizei depth);
  VKFUNDEFINE(glTexStorage3D);
  // GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint
  // id, GLsizei instancecount);
  VKFUNDEFINE(glDrawTransformFeedbackInstanced);
  // GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode,
  // GLuint id, GLuint stream, GLsizei instancecount);
  VKFUNDEFINE(glDrawTransformFeedbackStreamInstanced);
  // GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum
  // internalformat, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glClearBufferData);
  // GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum
  // internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum
  // type, const void *data);
  VKFUNDEFINE(glClearBufferSubData);
  // GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint
  // num_groups_y, GLuint num_groups_z);
  VKFUNDEFINE(glDispatchCompute);
  // GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect);
  VKFUNDEFINE(glDispatchComputeIndirect);
  // GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget,
  // GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum
  // dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei
  // srcWidth, GLsizei srcHeight, GLsizei srcDepth);
  VKFUNDEFINE(glCopyImageSubData);
  // GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname,
  // GLint param);
  VKFUNDEFINE(glFramebufferParameteri);
  // GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferParameteriv);
  // GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum
  // internalformat, GLenum pname, GLsizei count, GLint64 *params);
  VKFUNDEFINE(glGetInternalformati64v);
  // GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth);
  VKFUNDEFINE(glInvalidateTexSubImage);
  // GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level);
  VKFUNDEFINE(glInvalidateTexImage);
  // GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr
  // offset, GLsizeiptr length);
  VKFUNDEFINE(glInvalidateBufferSubData);
  // GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer);
  VKFUNDEFINE(glInvalidateBufferData);
  // GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei
  // numAttachments, const GLenum *attachments);
  VKFUNDEFINE(glInvalidateFramebuffer);
  // GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei
  // numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glInvalidateSubFramebuffer);
  // GLAPI void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void
  // *indirect, GLsizei drawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawArraysIndirect);
  // GLAPI void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type,
  // const void *indirect, GLsizei drawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawElementsIndirect);
  // GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum
  // programInterface, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetProgramInterfaceiv);
  // GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum
  // programInterface, const GLchar *name);
  VKFUNDEFINE(glGetProgramResourceIndex);
  // GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum
  // programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar
  // *name);
  VKFUNDEFINE(glGetProgramResourceName);
  // GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum
  // programInterface, GLuint index, GLsizei propCount, const GLenum *props,
  // GLsizei count, GLsizei *length, GLint *params);
  VKFUNDEFINE(glGetProgramResourceiv);
  // GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum
  // programInterface, const GLchar *name);
  VKFUNDEFINE(glGetProgramResourceLocation);
  // GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program,
  // GLenum programInterface, const GLchar *name);
  VKFUNDEFINE(glGetProgramResourceLocationIndex);
  // GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint
  // storageBlockIndex, GLuint storageBlockBinding);
  VKFUNDEFINE(glShaderStorageBlockBinding);
  // GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat,
  // GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glTexBufferRange);
  // GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei
  // samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean
  // fixedsamplelocations);
  VKFUNDEFINE(glTexStorage2DMultisample);
  // GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei
  // samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei
  // depth, GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTexStorage3DMultisample);
  // GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint
  // origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels,
  // GLuint minlayer, GLuint numlayers);
  VKFUNDEFINE(glTextureView);
  // GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer,
  // GLintptr offset, GLsizei stride);
  VKFUNDEFINE(glBindVertexBuffer);
  // GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size,
  // GLenum type, GLboolean normalized, GLuint relativeoffset);
  VKFUNDEFINE(glVertexAttribFormat);
  // GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size,
  // GLenum type, GLuint relativeoffset);
  VKFUNDEFINE(glVertexAttribIFormat);
  // GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size,
  // GLenum type, GLuint relativeoffset);
  VKFUNDEFINE(glVertexAttribLFormat);
  // GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint
  // bindingindex);
  VKFUNDEFINE(glVertexAttribBinding);
  // GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint
  // divisor);
  VKFUNDEFINE(glVertexBindingDivisor);
  // GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type,
  // GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
  VKFUNDEFINE(glDebugMessageControl);
  // GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type,
  // GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
  VKFUNDEFINE(glDebugMessageInsert);
  // GLAPI void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const
  // void *userParam);
  VKFUNDEFINE(glDebugMessageCallback);
  // GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize,
  // GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei
  // *lengths, GLchar *messageLog);
  VKFUNDEFINE(glGetDebugMessageLog);
  // GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei
  // length, const GLchar *message);
  VKFUNDEFINE(glPushDebugGroup);
  // GLAPI void APIENTRY glPopDebugGroup (void);
  VKFUNDEFINE(glPopDebugGroup);
  // GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei
  // length, const GLchar *label);
  VKFUNDEFINE(glObjectLabel);
  // GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name,
  // GLsizei bufSize, GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectLabel);
  // GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length,
  // const GLchar *label);
  VKFUNDEFINE(glObjectPtrLabel);
  // GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize,
  // GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectPtrLabel);
  // GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const
  // void *data, GLbitfield flags);
  VKFUNDEFINE(glBufferStorage);
  // GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum
  // format, GLenum type, const void *data);
  VKFUNDEFINE(glClearTexImage);
  // GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint
  // xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glClearTexSubImage);
  // GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei
  // count, const GLuint *buffers);
  VKFUNDEFINE(glBindBuffersBase);
  // GLAPI void APIENTRY glBindBuffersRange (GLenum target, GLuint first,
  // GLsizei count, const GLuint *buffers, const GLintptr *offsets, const
  // GLsizeiptr *sizes);
  VKFUNDEFINE(glBindBuffersRange);
  // GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const
  // GLuint *textures);
  VKFUNDEFINE(glBindTextures);
  // GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const
  // GLuint *samplers);
  VKFUNDEFINE(glBindSamplers);
  // GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const
  // GLuint *textures);
  VKFUNDEFINE(glBindImageTextures);
  // GLAPI void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const
  // GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
  VKFUNDEFINE(glBindVertexBuffers);
  // GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);
  VKFUNDEFINE(glClipControl);
  // GLAPI void APIENTRY glCreateTransformFeedbacks (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glCreateTransformFeedbacks);
  // GLAPI void APIENTRY glTransformFeedbackBufferBase (GLuint xfb, GLuint
  // index, GLuint buffer);
  VKFUNDEFINE(glTransformFeedbackBufferBase);
  // GLAPI void APIENTRY glTransformFeedbackBufferRange (GLuint xfb, GLuint
  // index, GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glTransformFeedbackBufferRange);
  // GLAPI void APIENTRY glGetTransformFeedbackiv (GLuint xfb, GLenum pname,
  // GLint *param);
  VKFUNDEFINE(glGetTransformFeedbackiv);
  // GLAPI void APIENTRY glGetTransformFeedbacki_v (GLuint xfb, GLenum pname,
  // GLuint index, GLint *param);
  VKFUNDEFINE(glGetTransformFeedbacki_v);
  // GLAPI void APIENTRY glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname,
  // GLuint index, GLint64 *param);
  VKFUNDEFINE(glGetTransformFeedbacki64_v);
  // GLAPI void APIENTRY glCreateBuffers (GLsizei n, GLuint *buffers);
  VKFUNDEFINE(glCreateBuffers);
  // GLAPI void APIENTRY glNamedBufferStorage (GLuint buffer, GLsizeiptr size,
  // const void *data, GLbitfield flags);
  VKFUNDEFINE(glNamedBufferStorage);
  // GLAPI void APIENTRY glNamedBufferData (GLuint buffer, GLsizeiptr size,
  // const void *data, GLenum usage);
  VKFUNDEFINE(glNamedBufferData);
  // GLAPI void APIENTRY glNamedBufferSubData (GLuint buffer, GLintptr offset,
  // GLsizeiptr size, const void *data);
  VKFUNDEFINE(glNamedBufferSubData);
  // GLAPI void APIENTRY glCopyNamedBufferSubData (GLuint readBuffer, GLuint
  // writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  VKFUNDEFINE(glCopyNamedBufferSubData);
  // GLAPI void APIENTRY glClearNamedBufferData (GLuint buffer, GLenum
  // internalformat, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glClearNamedBufferData);
  // GLAPI void APIENTRY glClearNamedBufferSubData (GLuint buffer, GLenum
  // internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum
  // type, const void *data);
  VKFUNDEFINE(glClearNamedBufferSubData);
  // GLAPI void *APIENTRY glMapNamedBuffer (GLuint buffer, GLenum access);
  VKFUNDEFINE(glMapNamedBuffer);
  // GLAPI void *APIENTRY glMapNamedBufferRange (GLuint buffer, GLintptr offset,
  // GLsizeiptr length, GLbitfield access);
  VKFUNDEFINE(glMapNamedBufferRange);
  // GLAPI GLboolean APIENTRY glUnmapNamedBuffer (GLuint buffer);
  VKFUNDEFINE(glUnmapNamedBuffer);
  // GLAPI void APIENTRY glFlushMappedNamedBufferRange (GLuint buffer, GLintptr
  // offset, GLsizeiptr length);
  VKFUNDEFINE(glFlushMappedNamedBufferRange);
  // GLAPI void APIENTRY glGetNamedBufferParameteriv (GLuint buffer, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetNamedBufferParameteriv);
  // GLAPI void APIENTRY glGetNamedBufferParameteri64v (GLuint buffer, GLenum
  // pname, GLint64 *params);
  VKFUNDEFINE(glGetNamedBufferParameteri64v);
  // GLAPI void APIENTRY glGetNamedBufferPointerv (GLuint buffer, GLenum pname,
  // void **params);
  VKFUNDEFINE(glGetNamedBufferPointerv);
  // GLAPI void APIENTRY glGetNamedBufferSubData (GLuint buffer, GLintptr
  // offset, GLsizeiptr size, void *data);
  VKFUNDEFINE(glGetNamedBufferSubData);
  // GLAPI void APIENTRY glCreateFramebuffers (GLsizei n, GLuint *framebuffers);
  VKFUNDEFINE(glCreateFramebuffers);
  // GLAPI void APIENTRY glNamedFramebufferRenderbuffer (GLuint framebuffer,
  // GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  VKFUNDEFINE(glNamedFramebufferRenderbuffer);
  // GLAPI void APIENTRY glNamedFramebufferParameteri (GLuint framebuffer,
  // GLenum pname, GLint param);
  VKFUNDEFINE(glNamedFramebufferParameteri);
  // GLAPI void APIENTRY glNamedFramebufferTexture (GLuint framebuffer, GLenum
  // attachment, GLuint texture, GLint level);
  VKFUNDEFINE(glNamedFramebufferTexture);
  // GLAPI void APIENTRY glNamedFramebufferTextureLayer (GLuint framebuffer,
  // GLenum attachment, GLuint texture, GLint level, GLint layer);
  VKFUNDEFINE(glNamedFramebufferTextureLayer);
  // GLAPI void APIENTRY glNamedFramebufferDrawBuffer (GLuint framebuffer,
  // GLenum buf);
  VKFUNDEFINE(glNamedFramebufferDrawBuffer);
  // GLAPI void APIENTRY glNamedFramebufferDrawBuffers (GLuint framebuffer,
  // GLsizei n, const GLenum *bufs);
  VKFUNDEFINE(glNamedFramebufferDrawBuffers);
  // GLAPI void APIENTRY glNamedFramebufferReadBuffer (GLuint framebuffer,
  // GLenum src);
  VKFUNDEFINE(glNamedFramebufferReadBuffer);
  // GLAPI void APIENTRY glInvalidateNamedFramebufferData (GLuint framebuffer,
  // GLsizei numAttachments, const GLenum *attachments);
  VKFUNDEFINE(glInvalidateNamedFramebufferData);
  // GLAPI void APIENTRY glInvalidateNamedFramebufferSubData (GLuint
  // framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x,
  // GLint y, GLsizei width, GLsizei height);
  VKFUNDEFINE(glInvalidateNamedFramebufferSubData);
  // GLAPI void APIENTRY glClearNamedFramebufferiv (GLuint framebuffer, GLenum
  // buffer, GLint drawbuffer, const GLint *value);
  VKFUNDEFINE(glClearNamedFramebufferiv);
  // GLAPI void APIENTRY glClearNamedFramebufferuiv (GLuint framebuffer, GLenum
  // buffer, GLint drawbuffer, const GLuint *value);
  VKFUNDEFINE(glClearNamedFramebufferuiv);
  // GLAPI void APIENTRY glClearNamedFramebufferfv (GLuint framebuffer, GLenum
  // buffer, GLint drawbuffer, const GLfloat *value);
  VKFUNDEFINE(glClearNamedFramebufferfv);
  // GLAPI void APIENTRY glClearNamedFramebufferfi (GLuint framebuffer, GLenum
  // buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
  VKFUNDEFINE(glClearNamedFramebufferfi);
  // GLAPI void APIENTRY glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint
  // drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint
  // dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum
  // filter);
  VKFUNDEFINE(glBlitNamedFramebuffer);
  // GLAPI GLenum APIENTRY glCheckNamedFramebufferStatus (GLuint framebuffer,
  // GLenum target);
  VKFUNDEFINE(glCheckNamedFramebufferStatus);
  // GLAPI void APIENTRY glGetNamedFramebufferParameteriv (GLuint framebuffer,
  // GLenum pname, GLint *param);
  VKFUNDEFINE(glGetNamedFramebufferParameteriv);
  // GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameteriv (GLuint
  // framebuffer, GLenum attachment, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetNamedFramebufferAttachmentParameteriv);
  // GLAPI void APIENTRY glCreateRenderbuffers (GLsizei n, GLuint
  // *renderbuffers);
  VKFUNDEFINE(glCreateRenderbuffers);
  // GLAPI void APIENTRY glNamedRenderbufferStorage (GLuint renderbuffer, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glNamedRenderbufferStorage);
  // GLAPI void APIENTRY glNamedRenderbufferStorageMultisample (GLuint
  // renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glNamedRenderbufferStorageMultisample);
  // GLAPI void APIENTRY glGetNamedRenderbufferParameteriv (GLuint renderbuffer,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetNamedRenderbufferParameteriv);
  // GLAPI void APIENTRY glCreateTextures (GLenum target, GLsizei n, GLuint
  // *textures);
  VKFUNDEFINE(glCreateTextures);
  // GLAPI void APIENTRY glTextureBuffer (GLuint texture, GLenum internalformat,
  // GLuint buffer);
  VKFUNDEFINE(glTextureBuffer);
  // GLAPI void APIENTRY glTextureBufferRange (GLuint texture, GLenum
  // internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glTextureBufferRange);
  // GLAPI void APIENTRY glTextureStorage1D (GLuint texture, GLsizei levels,
  // GLenum internalformat, GLsizei width);
  VKFUNDEFINE(glTextureStorage1D);
  // GLAPI void APIENTRY glTextureStorage2D (GLuint texture, GLsizei levels,
  // GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glTextureStorage2D);
  // GLAPI void APIENTRY glTextureStorage3D (GLuint texture, GLsizei levels,
  // GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
  VKFUNDEFINE(glTextureStorage3D);
  // GLAPI void APIENTRY glTextureStorage2DMultisample (GLuint texture, GLsizei
  // samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean
  // fixedsamplelocations);
  VKFUNDEFINE(glTextureStorage2DMultisample);
  // GLAPI void APIENTRY glTextureStorage3DMultisample (GLuint texture, GLsizei
  // samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei
  // depth, GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTextureStorage3DMultisample);
  // GLAPI void APIENTRY glTextureSubImage1D (GLuint texture, GLint level, GLint
  // xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTextureSubImage1D);
  // GLAPI void APIENTRY glTextureSubImage2D (GLuint texture, GLint level, GLint
  // xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
  // GLenum type, const void *pixels);
  VKFUNDEFINE(glTextureSubImage2D);
  // GLAPI void APIENTRY glTextureSubImage3D (GLuint texture, GLint level, GLint
  // xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTextureSubImage3D);
  // GLAPI void APIENTRY glCompressedTextureSubImage1D (GLuint texture, GLint
  // level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize,
  // const void *data);
  VKFUNDEFINE(glCompressedTextureSubImage1D);
  // GLAPI void APIENTRY glCompressedTextureSubImage2D (GLuint texture, GLint
  // level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum
  // format, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTextureSubImage2D);
  // GLAPI void APIENTRY glCompressedTextureSubImage3D (GLuint texture, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTextureSubImage3D);
  // GLAPI void APIENTRY glCopyTextureSubImage1D (GLuint texture, GLint level,
  // GLint xoffset, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyTextureSubImage1D);
  // GLAPI void APIENTRY glCopyTextureSubImage2D (GLuint texture, GLint level,
  // GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glCopyTextureSubImage2D);
  // GLAPI void APIENTRY glCopyTextureSubImage3D (GLuint texture, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei
  // width, GLsizei height);
  VKFUNDEFINE(glCopyTextureSubImage3D);
  // GLAPI void APIENTRY glTextureParameterf (GLuint texture, GLenum pname,
  // GLfloat param);
  VKFUNDEFINE(glTextureParameterf);
  // GLAPI void APIENTRY glTextureParameterfv (GLuint texture, GLenum pname,
  // const GLfloat *param);
  VKFUNDEFINE(glTextureParameterfv);
  // GLAPI void APIENTRY glTextureParameteri (GLuint texture, GLenum pname,
  // GLint param);
  VKFUNDEFINE(glTextureParameteri);
  // GLAPI void APIENTRY glTextureParameterIiv (GLuint texture, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glTextureParameterIiv);
  // GLAPI void APIENTRY glTextureParameterIuiv (GLuint texture, GLenum pname,
  // const GLuint *params);
  VKFUNDEFINE(glTextureParameterIuiv);
  // GLAPI void APIENTRY glTextureParameteriv (GLuint texture, GLenum pname,
  // const GLint *param);
  VKFUNDEFINE(glTextureParameteriv);
  // GLAPI void APIENTRY glGenerateTextureMipmap (GLuint texture);
  VKFUNDEFINE(glGenerateTextureMipmap);
  // GLAPI void APIENTRY glBindTextureUnit (GLuint unit, GLuint texture);
  VKFUNDEFINE(glBindTextureUnit);
  // GLAPI void APIENTRY glGetTextureImage (GLuint texture, GLint level, GLenum
  // format, GLenum type, GLsizei bufSize, void *pixels);
  VKFUNDEFINE(glGetTextureImage);
  // GLAPI void APIENTRY glGetCompressedTextureImage (GLuint texture, GLint
  // level, GLsizei bufSize, void *pixels);
  VKFUNDEFINE(glGetCompressedTextureImage);
  // GLAPI void APIENTRY glGetTextureLevelParameterfv (GLuint texture, GLint
  // level, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetTextureLevelParameterfv);
  // GLAPI void APIENTRY glGetTextureLevelParameteriv (GLuint texture, GLint
  // level, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetTextureLevelParameteriv);
  // GLAPI void APIENTRY glGetTextureParameterfv (GLuint texture, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetTextureParameterfv);
  // GLAPI void APIENTRY glGetTextureParameterIiv (GLuint texture, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetTextureParameterIiv);
  // GLAPI void APIENTRY glGetTextureParameterIuiv (GLuint texture, GLenum
  // pname, GLuint *params);
  VKFUNDEFINE(glGetTextureParameterIuiv);
  // GLAPI void APIENTRY glGetTextureParameteriv (GLuint texture, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetTextureParameteriv);
  // GLAPI void APIENTRY glCreateVertexArrays (GLsizei n, GLuint *arrays);
  VKFUNDEFINE(glCreateVertexArrays);
  // GLAPI void APIENTRY glDisableVertexArrayAttrib (GLuint vaobj, GLuint
  // index);
  VKFUNDEFINE(glDisableVertexArrayAttrib);
  // GLAPI void APIENTRY glEnableVertexArrayAttrib (GLuint vaobj, GLuint index);
  VKFUNDEFINE(glEnableVertexArrayAttrib);
  // GLAPI void APIENTRY glVertexArrayElementBuffer (GLuint vaobj, GLuint
  // buffer);
  VKFUNDEFINE(glVertexArrayElementBuffer);
  // GLAPI void APIENTRY glVertexArrayVertexBuffer (GLuint vaobj, GLuint
  // bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
  VKFUNDEFINE(glVertexArrayVertexBuffer);
  // GLAPI void APIENTRY glVertexArrayVertexBuffers (GLuint vaobj, GLuint first,
  // GLsizei count, const GLuint *buffers, const GLintptr *offsets, const
  // GLsizei *strides);
  VKFUNDEFINE(glVertexArrayVertexBuffers);
  // GLAPI void APIENTRY glVertexArrayAttribBinding (GLuint vaobj, GLuint
  // attribindex, GLuint bindingindex);
  VKFUNDEFINE(glVertexArrayAttribBinding);
  // GLAPI void APIENTRY glVertexArrayAttribFormat (GLuint vaobj, GLuint
  // attribindex, GLint size, GLenum type, GLboolean normalized, GLuint
  // relativeoffset);
  VKFUNDEFINE(glVertexArrayAttribFormat);
  // GLAPI void APIENTRY glVertexArrayAttribIFormat (GLuint vaobj, GLuint
  // attribindex, GLint size, GLenum type, GLuint relativeoffset);
  VKFUNDEFINE(glVertexArrayAttribIFormat);
  // GLAPI void APIENTRY glVertexArrayAttribLFormat (GLuint vaobj, GLuint
  // attribindex, GLint size, GLenum type, GLuint relativeoffset);
  VKFUNDEFINE(glVertexArrayAttribLFormat);
  // GLAPI void APIENTRY glVertexArrayBindingDivisor (GLuint vaobj, GLuint
  // bindingindex, GLuint divisor);
  VKFUNDEFINE(glVertexArrayBindingDivisor);
  // GLAPI void APIENTRY glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint
  // *param);
  VKFUNDEFINE(glGetVertexArrayiv);
  // GLAPI void APIENTRY glGetVertexArrayIndexediv (GLuint vaobj, GLuint index,
  // GLenum pname, GLint *param);
  VKFUNDEFINE(glGetVertexArrayIndexediv);
  // GLAPI void APIENTRY glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint
  // index, GLenum pname, GLint64 *param);
  VKFUNDEFINE(glGetVertexArrayIndexed64iv);
  // GLAPI void APIENTRY glCreateSamplers (GLsizei n, GLuint *samplers);
  VKFUNDEFINE(glCreateSamplers);
  // GLAPI void APIENTRY glCreateProgramPipelines (GLsizei n, GLuint
  // *pipelines);
  VKFUNDEFINE(glCreateProgramPipelines);
  // GLAPI void APIENTRY glCreateQueries (GLenum target, GLsizei n, GLuint
  // *ids);
  VKFUNDEFINE(glCreateQueries);
  // GLAPI void APIENTRY glGetQueryBufferObjecti64v (GLuint id, GLuint buffer,
  // GLenum pname, GLintptr offset);
  VKFUNDEFINE(glGetQueryBufferObjecti64v);
  // GLAPI void APIENTRY glGetQueryBufferObjectiv (GLuint id, GLuint buffer,
  // GLenum pname, GLintptr offset);
  VKFUNDEFINE(glGetQueryBufferObjectiv);
  // GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer,
  // GLenum pname, GLintptr offset);
  VKFUNDEFINE(glGetQueryBufferObjectui64v);
  // GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer,
  // GLenum pname, GLintptr offset);
  VKFUNDEFINE(glGetQueryBufferObjectuiv);
  // GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);
  VKFUNDEFINE(glMemoryBarrierByRegion);
  // GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
  VKFUNDEFINE(glGetTextureSubImage);
  // GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLsizei bufSize, void *pixels);
  VKFUNDEFINE(glGetCompressedTextureSubImage);
  // GLAPI GLenum APIENTRY glGetGraphicsResetStatus (void);
  VKFUNDEFINE(glGetGraphicsResetStatus);
  // GLAPI void APIENTRY glGetnCompressedTexImage (GLenum target, GLint lod,
  // GLsizei bufSize, void *pixels);
  VKFUNDEFINE(glGetnCompressedTexImage);
  // GLAPI void APIENTRY glGetnTexImage (GLenum target, GLint level, GLenum
  // format, GLenum type, GLsizei bufSize, void *pixels);
  VKFUNDEFINE(glGetnTexImage);
  // GLAPI void APIENTRY glGetnUniformdv (GLuint program, GLint location,
  // GLsizei bufSize, GLdouble *params);
  VKFUNDEFINE(glGetnUniformdv);
  // GLAPI void APIENTRY glGetnUniformfv (GLuint program, GLint location,
  // GLsizei bufSize, GLfloat *params);
  VKFUNDEFINE(glGetnUniformfv);
  // GLAPI void APIENTRY glGetnUniformiv (GLuint program, GLint location,
  // GLsizei bufSize, GLint *params);
  VKFUNDEFINE(glGetnUniformiv);
  // GLAPI void APIENTRY glGetnUniformuiv (GLuint program, GLint location,
  // GLsizei bufSize, GLuint *params);
  VKFUNDEFINE(glGetnUniformuiv);
  // GLAPI void APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei
  // height, GLenum format, GLenum type, GLsizei bufSize, void *data);
  VKFUNDEFINE(glReadnPixels);
  // GLAPI void APIENTRY glGetnMapdv (GLenum target, GLenum query, GLsizei
  // bufSize, GLdouble *v);
  VKFUNDEFINE(glGetnMapdv);
  // GLAPI void APIENTRY glGetnMapfv (GLenum target, GLenum query, GLsizei
  // bufSize, GLfloat *v);
  VKFUNDEFINE(glGetnMapfv);
  // GLAPI void APIENTRY glGetnMapiv (GLenum target, GLenum query, GLsizei
  // bufSize, GLint *v);
  VKFUNDEFINE(glGetnMapiv);
  // GLAPI void APIENTRY glGetnPixelMapfv (GLenum map, GLsizei bufSize, GLfloat
  // *values);
  VKFUNDEFINE(glGetnPixelMapfv);
  // GLAPI void APIENTRY glGetnPixelMapuiv (GLenum map, GLsizei bufSize, GLuint
  // *values);
  VKFUNDEFINE(glGetnPixelMapuiv);
  // GLAPI void APIENTRY glGetnPixelMapusv (GLenum map, GLsizei bufSize,
  // GLushort *values);
  VKFUNDEFINE(glGetnPixelMapusv);
  // GLAPI void APIENTRY glGetnPolygonStipple (GLsizei bufSize, GLubyte
  // *pattern);
  VKFUNDEFINE(glGetnPolygonStipple);
  // GLAPI void APIENTRY glGetnColorTable (GLenum target, GLenum format, GLenum
  // type, GLsizei bufSize, void *table);
  VKFUNDEFINE(glGetnColorTable);
  // GLAPI void APIENTRY glGetnConvolutionFilter (GLenum target, GLenum format,
  // GLenum type, GLsizei bufSize, void *image);
  VKFUNDEFINE(glGetnConvolutionFilter);
  // GLAPI void APIENTRY glGetnSeparableFilter (GLenum target, GLenum format,
  // GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void
  // *column, void *span);
  VKFUNDEFINE(glGetnSeparableFilter);
  // GLAPI void APIENTRY glGetnHistogram (GLenum target, GLboolean reset, GLenum
  // format, GLenum type, GLsizei bufSize, void *values);
  VKFUNDEFINE(glGetnHistogram);
  // GLAPI void APIENTRY glGetnMinmax (GLenum target, GLboolean reset, GLenum
  // format, GLenum type, GLsizei bufSize, void *values);
  VKFUNDEFINE(glGetnMinmax);
  // GLAPI void APIENTRY glTextureBarrier (void);
  VKFUNDEFINE(glTextureBarrier);
  // GLAPI void APIENTRY glSpecializeShader (GLuint shader, const GLchar
  // *pEntryPoint, GLuint numSpecializationConstants, const GLuint
  // *pConstantIndex, const GLuint *pConstantValue);
  VKFUNDEFINE(glSpecializeShader);
  // GLAPI void APIENTRY glMultiDrawArraysIndirectCount (GLenum mode, const void
  // *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawArraysIndirectCount);
  // GLAPI void APIENTRY glMultiDrawElementsIndirectCount (GLenum mode, GLenum
  // type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount,
  // GLsizei stride);
  VKFUNDEFINE(glMultiDrawElementsIndirectCount);
  // GLAPI void APIENTRY glPolygonOffsetClamp (GLfloat factor, GLfloat units,
  // GLfloat clamp);
  VKFUNDEFINE(glPolygonOffsetClamp);
  // GLAPI void APIENTRY glPrimitiveBoundingBoxARB (GLfloat minX, GLfloat minY,
  // GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ,
  // GLfloat maxW);
  VKFUNDEFINE(glPrimitiveBoundingBoxARB);
  // GLAPI GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture);
  VKFUNDEFINE(glGetTextureHandleARB);
  // GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture,
  // GLuint sampler);
  VKFUNDEFINE(glGetTextureSamplerHandleARB);
  // GLAPI void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle);
  VKFUNDEFINE(glMakeTextureHandleResidentARB);
  // GLAPI void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle);
  VKFUNDEFINE(glMakeTextureHandleNonResidentARB);
  // GLAPI GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level,
  // GLboolean layered, GLint layer, GLenum format);
  VKFUNDEFINE(glGetImageHandleARB);
  // GLAPI void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum
  // access);
  VKFUNDEFINE(glMakeImageHandleResidentARB);
  // GLAPI void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle);
  VKFUNDEFINE(glMakeImageHandleNonResidentARB);
  // GLAPI void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64
  // value);
  VKFUNDEFINE(glUniformHandleui64ARB);
  // GLAPI void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count,
  // const GLuint64 *value);
  VKFUNDEFINE(glUniformHandleui64vARB);
  // GLAPI void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint
  // location, GLuint64 value);
  VKFUNDEFINE(glProgramUniformHandleui64ARB);
  // GLAPI void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint
  // location, GLsizei count, const GLuint64 *values);
  VKFUNDEFINE(glProgramUniformHandleui64vARB);
  // GLAPI GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle);
  VKFUNDEFINE(glIsTextureHandleResidentARB);
  // GLAPI GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle);
  VKFUNDEFINE(glIsImageHandleResidentARB);
  // GLAPI void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x);
  VKFUNDEFINE(glVertexAttribL1ui64ARB);
  // GLAPI void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const
  // GLuint64EXT *v);
  VKFUNDEFINE(glVertexAttribL1ui64vARB);
  // GLAPI void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname,
  // GLuint64EXT *params);
  VKFUNDEFINE(glGetVertexAttribLui64vARB);
  // GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context
  // *context, struct _cl_event *event, GLbitfield flags);
  VKFUNDEFINE(glCreateSyncFromCLeventARB);
  // GLAPI void APIENTRY glClampColorARB (GLenum target, GLenum clamp);
  VKFUNDEFINE(glClampColorARB);
  // GLAPI void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x,
  // GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint
  // group_size_y, GLuint group_size_z);
  VKFUNDEFINE(glDispatchComputeGroupSizeARB);
  // GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type,
  // GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
  VKFUNDEFINE(glDebugMessageControlARB);
  // GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type,
  // GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
  VKFUNDEFINE(glDebugMessageInsertARB);
  // GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback,
  // const void *userParam);
  VKFUNDEFINE(glDebugMessageCallbackARB);
  // GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei
  // bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities,
  // GLsizei *lengths, GLchar *messageLog);
  VKFUNDEFINE(glGetDebugMessageLogARB);
  // GLAPI void APIENTRY glDrawBuffersARB (GLsizei n, const GLenum *bufs);
  VKFUNDEFINE(glDrawBuffersARB);
  // GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);
  VKFUNDEFINE(glBlendEquationiARB);
  // GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum
  // modeRGB, GLenum modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparateiARB);
  // GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);
  VKFUNDEFINE(glBlendFunciARB);
  // GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB,
  // GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  VKFUNDEFINE(glBlendFuncSeparateiARB);
  // GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first,
  // GLsizei count, GLsizei primcount);
  VKFUNDEFINE(glDrawArraysInstancedARB);
  // GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count,
  // GLenum type, const void *indices, GLsizei primcount);
  VKFUNDEFINE(glDrawElementsInstancedARB);
  // GLAPI void APIENTRY glProgramStringARB (GLenum target, GLenum format,
  // GLsizei len, const void *string);
  VKFUNDEFINE(glProgramStringARB);
  // GLAPI void APIENTRY glBindProgramARB (GLenum target, GLuint program);
  VKFUNDEFINE(glBindProgramARB);
  // GLAPI void APIENTRY glDeleteProgramsARB (GLsizei n, const GLuint
  // *programs);
  VKFUNDEFINE(glDeleteProgramsARB);
  // GLAPI void APIENTRY glGenProgramsARB (GLsizei n, GLuint *programs);
  VKFUNDEFINE(glGenProgramsARB);
  // GLAPI void APIENTRY glProgramEnvParameter4dARB (GLenum target, GLuint
  // index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glProgramEnvParameter4dARB);
  // GLAPI void APIENTRY glProgramEnvParameter4dvARB (GLenum target, GLuint
  // index, const GLdouble *params);
  VKFUNDEFINE(glProgramEnvParameter4dvARB);
  // GLAPI void APIENTRY glProgramEnvParameter4fARB (GLenum target, GLuint
  // index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glProgramEnvParameter4fARB);
  // GLAPI void APIENTRY glProgramEnvParameter4fvARB (GLenum target, GLuint
  // index, const GLfloat *params);
  VKFUNDEFINE(glProgramEnvParameter4fvARB);
  // GLAPI void APIENTRY glProgramLocalParameter4dARB (GLenum target, GLuint
  // index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glProgramLocalParameter4dARB);
  // GLAPI void APIENTRY glProgramLocalParameter4dvARB (GLenum target, GLuint
  // index, const GLdouble *params);
  VKFUNDEFINE(glProgramLocalParameter4dvARB);
  // GLAPI void APIENTRY glProgramLocalParameter4fARB (GLenum target, GLuint
  // index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glProgramLocalParameter4fARB);
  // GLAPI void APIENTRY glProgramLocalParameter4fvARB (GLenum target, GLuint
  // index, const GLfloat *params);
  VKFUNDEFINE(glProgramLocalParameter4fvARB);
  // GLAPI void APIENTRY glGetProgramEnvParameterdvARB (GLenum target, GLuint
  // index, GLdouble *params);
  VKFUNDEFINE(glGetProgramEnvParameterdvARB);
  // GLAPI void APIENTRY glGetProgramEnvParameterfvARB (GLenum target, GLuint
  // index, GLfloat *params);
  VKFUNDEFINE(glGetProgramEnvParameterfvARB);
  // GLAPI void APIENTRY glGetProgramLocalParameterdvARB (GLenum target, GLuint
  // index, GLdouble *params);
  VKFUNDEFINE(glGetProgramLocalParameterdvARB);
  // GLAPI void APIENTRY glGetProgramLocalParameterfvARB (GLenum target, GLuint
  // index, GLfloat *params);
  VKFUNDEFINE(glGetProgramLocalParameterfvARB);
  // GLAPI void APIENTRY glGetProgramivARB (GLenum target, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetProgramivARB);
  // GLAPI void APIENTRY glGetProgramStringARB (GLenum target, GLenum pname,
  // void *string);
  VKFUNDEFINE(glGetProgramStringARB);
  // GLAPI GLboolean APIENTRY glIsProgramARB (GLuint program);
  VKFUNDEFINE(glIsProgramARB);
  // GLAPI void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname,
  // GLint value);
  VKFUNDEFINE(glProgramParameteriARB);
  // GLAPI void APIENTRY glFramebufferTextureARB (GLenum target, GLenum
  // attachment, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTextureARB);
  // GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum
  // attachment, GLuint texture, GLint level, GLint layer);
  VKFUNDEFINE(glFramebufferTextureLayerARB);
  // GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum
  // attachment, GLuint texture, GLint level, GLenum face);
  VKFUNDEFINE(glFramebufferTextureFaceARB);
  // GLAPI void APIENTRY glSpecializeShaderARB (GLuint shader, const GLchar
  // *pEntryPoint, GLuint numSpecializationConstants, const GLuint
  // *pConstantIndex, const GLuint *pConstantValue);
  VKFUNDEFINE(glSpecializeShaderARB);
  // GLAPI void APIENTRY glUniform1i64ARB (GLint location, GLint64 x);
  VKFUNDEFINE(glUniform1i64ARB);
  // GLAPI void APIENTRY glUniform2i64ARB (GLint location, GLint64 x, GLint64
  // y);
  VKFUNDEFINE(glUniform2i64ARB);
  // GLAPI void APIENTRY glUniform3i64ARB (GLint location, GLint64 x, GLint64 y,
  // GLint64 z);
  VKFUNDEFINE(glUniform3i64ARB);
  // GLAPI void APIENTRY glUniform4i64ARB (GLint location, GLint64 x, GLint64 y,
  // GLint64 z, GLint64 w);
  VKFUNDEFINE(glUniform4i64ARB);
  // GLAPI void APIENTRY glUniform1i64vARB (GLint location, GLsizei count, const
  // GLint64 *value);
  VKFUNDEFINE(glUniform1i64vARB);
  // GLAPI void APIENTRY glUniform2i64vARB (GLint location, GLsizei count, const
  // GLint64 *value);
  VKFUNDEFINE(glUniform2i64vARB);
  // GLAPI void APIENTRY glUniform3i64vARB (GLint location, GLsizei count, const
  // GLint64 *value);
  VKFUNDEFINE(glUniform3i64vARB);
  // GLAPI void APIENTRY glUniform4i64vARB (GLint location, GLsizei count, const
  // GLint64 *value);
  VKFUNDEFINE(glUniform4i64vARB);
  // GLAPI void APIENTRY glUniform1ui64ARB (GLint location, GLuint64 x);
  VKFUNDEFINE(glUniform1ui64ARB);
  // GLAPI void APIENTRY glUniform2ui64ARB (GLint location, GLuint64 x, GLuint64
  // y);
  VKFUNDEFINE(glUniform2ui64ARB);
  // GLAPI void APIENTRY glUniform3ui64ARB (GLint location, GLuint64 x, GLuint64
  // y, GLuint64 z);
  VKFUNDEFINE(glUniform3ui64ARB);
  // GLAPI void APIENTRY glUniform4ui64ARB (GLint location, GLuint64 x, GLuint64
  // y, GLuint64 z, GLuint64 w);
  VKFUNDEFINE(glUniform4ui64ARB);
  // GLAPI void APIENTRY glUniform1ui64vARB (GLint location, GLsizei count,
  // const GLuint64 *value);
  VKFUNDEFINE(glUniform1ui64vARB);
  // GLAPI void APIENTRY glUniform2ui64vARB (GLint location, GLsizei count,
  // const GLuint64 *value);
  VKFUNDEFINE(glUniform2ui64vARB);
  // GLAPI void APIENTRY glUniform3ui64vARB (GLint location, GLsizei count,
  // const GLuint64 *value);
  VKFUNDEFINE(glUniform3ui64vARB);
  // GLAPI void APIENTRY glUniform4ui64vARB (GLint location, GLsizei count,
  // const GLuint64 *value);
  VKFUNDEFINE(glUniform4ui64vARB);
  // GLAPI void APIENTRY glGetUniformi64vARB (GLuint program, GLint location,
  // GLint64 *params);
  VKFUNDEFINE(glGetUniformi64vARB);
  // GLAPI void APIENTRY glGetUniformui64vARB (GLuint program, GLint location,
  // GLuint64 *params);
  VKFUNDEFINE(glGetUniformui64vARB);
  // GLAPI void APIENTRY glGetnUniformi64vARB (GLuint program, GLint location,
  // GLsizei bufSize, GLint64 *params);
  VKFUNDEFINE(glGetnUniformi64vARB);
  // GLAPI void APIENTRY glGetnUniformui64vARB (GLuint program, GLint location,
  // GLsizei bufSize, GLuint64 *params);
  VKFUNDEFINE(glGetnUniformui64vARB);
  // GLAPI void APIENTRY glProgramUniform1i64ARB (GLuint program, GLint
  // location, GLint64 x);
  VKFUNDEFINE(glProgramUniform1i64ARB);
  // GLAPI void APIENTRY glProgramUniform2i64ARB (GLuint program, GLint
  // location, GLint64 x, GLint64 y);
  VKFUNDEFINE(glProgramUniform2i64ARB);
  // GLAPI void APIENTRY glProgramUniform3i64ARB (GLuint program, GLint
  // location, GLint64 x, GLint64 y, GLint64 z);
  VKFUNDEFINE(glProgramUniform3i64ARB);
  // GLAPI void APIENTRY glProgramUniform4i64ARB (GLuint program, GLint
  // location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
  VKFUNDEFINE(glProgramUniform4i64ARB);
  // GLAPI void APIENTRY glProgramUniform1i64vARB (GLuint program, GLint
  // location, GLsizei count, const GLint64 *value);
  VKFUNDEFINE(glProgramUniform1i64vARB);
  // GLAPI void APIENTRY glProgramUniform2i64vARB (GLuint program, GLint
  // location, GLsizei count, const GLint64 *value);
  VKFUNDEFINE(glProgramUniform2i64vARB);
  // GLAPI void APIENTRY glProgramUniform3i64vARB (GLuint program, GLint
  // location, GLsizei count, const GLint64 *value);
  VKFUNDEFINE(glProgramUniform3i64vARB);
  // GLAPI void APIENTRY glProgramUniform4i64vARB (GLuint program, GLint
  // location, GLsizei count, const GLint64 *value);
  VKFUNDEFINE(glProgramUniform4i64vARB);
  // GLAPI void APIENTRY glProgramUniform1ui64ARB (GLuint program, GLint
  // location, GLuint64 x);
  VKFUNDEFINE(glProgramUniform1ui64ARB);
  // GLAPI void APIENTRY glProgramUniform2ui64ARB (GLuint program, GLint
  // location, GLuint64 x, GLuint64 y);
  VKFUNDEFINE(glProgramUniform2ui64ARB);
  // GLAPI void APIENTRY glProgramUniform3ui64ARB (GLuint program, GLint
  // location, GLuint64 x, GLuint64 y, GLuint64 z);
  VKFUNDEFINE(glProgramUniform3ui64ARB);
  // GLAPI void APIENTRY glProgramUniform4ui64ARB (GLuint program, GLint
  // location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
  VKFUNDEFINE(glProgramUniform4ui64ARB);
  // GLAPI void APIENTRY glProgramUniform1ui64vARB (GLuint program, GLint
  // location, GLsizei count, const GLuint64 *value);
  VKFUNDEFINE(glProgramUniform1ui64vARB);
  // GLAPI void APIENTRY glProgramUniform2ui64vARB (GLuint program, GLint
  // location, GLsizei count, const GLuint64 *value);
  VKFUNDEFINE(glProgramUniform2ui64vARB);
  // GLAPI void APIENTRY glProgramUniform3ui64vARB (GLuint program, GLint
  // location, GLsizei count, const GLuint64 *value);
  VKFUNDEFINE(glProgramUniform3ui64vARB);
  // GLAPI void APIENTRY glProgramUniform4ui64vARB (GLuint program, GLint
  // location, GLsizei count, const GLuint64 *value);
  VKFUNDEFINE(glProgramUniform4ui64vARB);
  // GLAPI void APIENTRY glColorTable (GLenum target, GLenum internalformat,
  // GLsizei width, GLenum format, GLenum type, const void *table);
  VKFUNDEFINE(glColorTable);
  // GLAPI void APIENTRY glColorTableParameterfv (GLenum target, GLenum pname,
  // const GLfloat *params);
  VKFUNDEFINE(glColorTableParameterfv);
  // GLAPI void APIENTRY glColorTableParameteriv (GLenum target, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glColorTableParameteriv);
  // GLAPI void APIENTRY glCopyColorTable (GLenum target, GLenum internalformat,
  // GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyColorTable);
  // GLAPI void APIENTRY glGetColorTable (GLenum target, GLenum format, GLenum
  // type, void *table);
  VKFUNDEFINE(glGetColorTable);
  // GLAPI void APIENTRY glGetColorTableParameterfv (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetColorTableParameterfv);
  // GLAPI void APIENTRY glGetColorTableParameteriv (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetColorTableParameteriv);
  // GLAPI void APIENTRY glColorSubTable (GLenum target, GLsizei start, GLsizei
  // count, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glColorSubTable);
  // GLAPI void APIENTRY glCopyColorSubTable (GLenum target, GLsizei start,
  // GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyColorSubTable);
  // GLAPI void APIENTRY glConvolutionFilter1D (GLenum target, GLenum
  // internalformat, GLsizei width, GLenum format, GLenum type, const void
  // *image);
  VKFUNDEFINE(glConvolutionFilter1D);
  // GLAPI void APIENTRY glConvolutionFilter2D (GLenum target, GLenum
  // internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,
  // const void *image);
  VKFUNDEFINE(glConvolutionFilter2D);
  // GLAPI void APIENTRY glConvolutionParameterf (GLenum target, GLenum pname,
  // GLfloat params);
  VKFUNDEFINE(glConvolutionParameterf);
  // GLAPI void APIENTRY glConvolutionParameterfv (GLenum target, GLenum pname,
  // const GLfloat *params);
  VKFUNDEFINE(glConvolutionParameterfv);
  // GLAPI void APIENTRY glConvolutionParameteri (GLenum target, GLenum pname,
  // GLint params);
  VKFUNDEFINE(glConvolutionParameteri);
  // GLAPI void APIENTRY glConvolutionParameteriv (GLenum target, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glConvolutionParameteriv);
  // GLAPI void APIENTRY glCopyConvolutionFilter1D (GLenum target, GLenum
  // internalformat, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyConvolutionFilter1D);
  // GLAPI void APIENTRY glCopyConvolutionFilter2D (GLenum target, GLenum
  // internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyConvolutionFilter2D);
  // GLAPI void APIENTRY glGetConvolutionFilter (GLenum target, GLenum format,
  // GLenum type, void *image);
  VKFUNDEFINE(glGetConvolutionFilter);
  // GLAPI void APIENTRY glGetConvolutionParameterfv (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetConvolutionParameterfv);
  // GLAPI void APIENTRY glGetConvolutionParameteriv (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetConvolutionParameteriv);
  // GLAPI void APIENTRY glGetSeparableFilter (GLenum target, GLenum format,
  // GLenum type, void *row, void *column, void *span);
  VKFUNDEFINE(glGetSeparableFilter);
  // GLAPI void APIENTRY glSeparableFilter2D (GLenum target, GLenum
  // internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,
  // const void *row, const void *column);
  VKFUNDEFINE(glSeparableFilter2D);
  // GLAPI void APIENTRY glGetHistogram (GLenum target, GLboolean reset, GLenum
  // format, GLenum type, void *values);
  VKFUNDEFINE(glGetHistogram);
  // GLAPI void APIENTRY glGetHistogramParameterfv (GLenum target, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetHistogramParameterfv);
  // GLAPI void APIENTRY glGetHistogramParameteriv (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetHistogramParameteriv);
  // GLAPI void APIENTRY glGetMinmax (GLenum target, GLboolean reset, GLenum
  // format, GLenum type, void *values);
  VKFUNDEFINE(glGetMinmax);
  // GLAPI void APIENTRY glGetMinmaxParameterfv (GLenum target, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetMinmaxParameterfv);
  // GLAPI void APIENTRY glGetMinmaxParameteriv (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetMinmaxParameteriv);
  // GLAPI void APIENTRY glHistogram (GLenum target, GLsizei width, GLenum
  // internalformat, GLboolean sink);
  VKFUNDEFINE(glHistogram);
  // GLAPI void APIENTRY glMinmax (GLenum target, GLenum internalformat,
  // GLboolean sink);
  VKFUNDEFINE(glMinmax);
  // GLAPI void APIENTRY glResetHistogram (GLenum target);
  VKFUNDEFINE(glResetHistogram);
  // GLAPI void APIENTRY glResetMinmax (GLenum target);
  VKFUNDEFINE(glResetMinmax);
  // GLAPI void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, const
  // void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawArraysIndirectCountARB);
  // GLAPI void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode,
  // GLenum type, const void *indirect, GLintptr drawcount, GLsizei
  // maxdrawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawElementsIndirectCountARB);
  // GLAPI void APIENTRY glVertexAttribDivisorARB (GLuint index, GLuint
  // divisor);
  VKFUNDEFINE(glVertexAttribDivisorARB);
  // GLAPI void APIENTRY glCurrentPaletteMatrixARB (GLint index);
  VKFUNDEFINE(glCurrentPaletteMatrixARB);
  // GLAPI void APIENTRY glMatrixIndexubvARB (GLint size, const GLubyte
  // *indices);
  VKFUNDEFINE(glMatrixIndexubvARB);
  // GLAPI void APIENTRY glMatrixIndexusvARB (GLint size, const GLushort
  // *indices);
  VKFUNDEFINE(glMatrixIndexusvARB);
  // GLAPI void APIENTRY glMatrixIndexuivARB (GLint size, const GLuint
  // *indices);
  VKFUNDEFINE(glMatrixIndexuivARB);
  // GLAPI void APIENTRY glMatrixIndexPointerARB (GLint size, GLenum type,
  // GLsizei stride, const void *pointer);
  VKFUNDEFINE(glMatrixIndexPointerARB);
  // GLAPI void APIENTRY glSampleCoverageARB (GLfloat value, GLboolean invert);
  VKFUNDEFINE(glSampleCoverageARB);
  // GLAPI void APIENTRY glActiveTextureARB (GLenum texture);
  VKFUNDEFINE(glActiveTextureARB);
  // GLAPI void APIENTRY glClientActiveTextureARB (GLenum texture);
  VKFUNDEFINE(glClientActiveTextureARB);
  // GLAPI void APIENTRY glMultiTexCoord1dARB (GLenum target, GLdouble s);
  VKFUNDEFINE(glMultiTexCoord1dARB);
  // GLAPI void APIENTRY glMultiTexCoord1dvARB (GLenum target, const GLdouble
  // *v);
  VKFUNDEFINE(glMultiTexCoord1dvARB);
  // GLAPI void APIENTRY glMultiTexCoord1fARB (GLenum target, GLfloat s);
  VKFUNDEFINE(glMultiTexCoord1fARB);
  // GLAPI void APIENTRY glMultiTexCoord1fvARB (GLenum target, const GLfloat
  // *v);
  VKFUNDEFINE(glMultiTexCoord1fvARB);
  // GLAPI void APIENTRY glMultiTexCoord1iARB (GLenum target, GLint s);
  VKFUNDEFINE(glMultiTexCoord1iARB);
  // GLAPI void APIENTRY glMultiTexCoord1ivARB (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord1ivARB);
  // GLAPI void APIENTRY glMultiTexCoord1sARB (GLenum target, GLshort s);
  VKFUNDEFINE(glMultiTexCoord1sARB);
  // GLAPI void APIENTRY glMultiTexCoord1svARB (GLenum target, const GLshort
  // *v);
  VKFUNDEFINE(glMultiTexCoord1svARB);
  // GLAPI void APIENTRY glMultiTexCoord2dARB (GLenum target, GLdouble s,
  // GLdouble t);
  VKFUNDEFINE(glMultiTexCoord2dARB);
  // GLAPI void APIENTRY glMultiTexCoord2dvARB (GLenum target, const GLdouble
  // *v);
  VKFUNDEFINE(glMultiTexCoord2dvARB);
  // GLAPI void APIENTRY glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat
  // t);
  VKFUNDEFINE(glMultiTexCoord2fARB);
  // GLAPI void APIENTRY glMultiTexCoord2fvARB (GLenum target, const GLfloat
  // *v);
  VKFUNDEFINE(glMultiTexCoord2fvARB);
  // GLAPI void APIENTRY glMultiTexCoord2iARB (GLenum target, GLint s, GLint t);
  VKFUNDEFINE(glMultiTexCoord2iARB);
  // GLAPI void APIENTRY glMultiTexCoord2ivARB (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord2ivARB);
  // GLAPI void APIENTRY glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort
  // t);
  VKFUNDEFINE(glMultiTexCoord2sARB);
  // GLAPI void APIENTRY glMultiTexCoord2svARB (GLenum target, const GLshort
  // *v);
  VKFUNDEFINE(glMultiTexCoord2svARB);
  // GLAPI void APIENTRY glMultiTexCoord3dARB (GLenum target, GLdouble s,
  // GLdouble t, GLdouble r);
  VKFUNDEFINE(glMultiTexCoord3dARB);
  // GLAPI void APIENTRY glMultiTexCoord3dvARB (GLenum target, const GLdouble
  // *v);
  VKFUNDEFINE(glMultiTexCoord3dvARB);
  // GLAPI void APIENTRY glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat
  // t, GLfloat r);
  VKFUNDEFINE(glMultiTexCoord3fARB);
  // GLAPI void APIENTRY glMultiTexCoord3fvARB (GLenum target, const GLfloat
  // *v);
  VKFUNDEFINE(glMultiTexCoord3fvARB);
  // GLAPI void APIENTRY glMultiTexCoord3iARB (GLenum target, GLint s, GLint t,
  // GLint r);
  VKFUNDEFINE(glMultiTexCoord3iARB);
  // GLAPI void APIENTRY glMultiTexCoord3ivARB (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord3ivARB);
  // GLAPI void APIENTRY glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort
  // t, GLshort r);
  VKFUNDEFINE(glMultiTexCoord3sARB);
  // GLAPI void APIENTRY glMultiTexCoord3svARB (GLenum target, const GLshort
  // *v);
  VKFUNDEFINE(glMultiTexCoord3svARB);
  // GLAPI void APIENTRY glMultiTexCoord4dARB (GLenum target, GLdouble s,
  // GLdouble t, GLdouble r, GLdouble q);
  VKFUNDEFINE(glMultiTexCoord4dARB);
  // GLAPI void APIENTRY glMultiTexCoord4dvARB (GLenum target, const GLdouble
  // *v);
  VKFUNDEFINE(glMultiTexCoord4dvARB);
  // GLAPI void APIENTRY glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat
  // t, GLfloat r, GLfloat q);
  VKFUNDEFINE(glMultiTexCoord4fARB);
  // GLAPI void APIENTRY glMultiTexCoord4fvARB (GLenum target, const GLfloat
  // *v);
  VKFUNDEFINE(glMultiTexCoord4fvARB);
  // GLAPI void APIENTRY glMultiTexCoord4iARB (GLenum target, GLint s, GLint t,
  // GLint r, GLint q);
  VKFUNDEFINE(glMultiTexCoord4iARB);
  // GLAPI void APIENTRY glMultiTexCoord4ivARB (GLenum target, const GLint *v);
  VKFUNDEFINE(glMultiTexCoord4ivARB);
  // GLAPI void APIENTRY glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort
  // t, GLshort r, GLshort q);
  VKFUNDEFINE(glMultiTexCoord4sARB);
  // GLAPI void APIENTRY glMultiTexCoord4svARB (GLenum target, const GLshort
  // *v);
  VKFUNDEFINE(glMultiTexCoord4svARB);
  // GLAPI void APIENTRY glGenQueriesARB (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glGenQueriesARB);
  // GLAPI void APIENTRY glDeleteQueriesARB (GLsizei n, const GLuint *ids);
  VKFUNDEFINE(glDeleteQueriesARB);
  // GLAPI GLboolean APIENTRY glIsQueryARB (GLuint id);
  VKFUNDEFINE(glIsQueryARB);
  // GLAPI void APIENTRY glBeginQueryARB (GLenum target, GLuint id);
  VKFUNDEFINE(glBeginQueryARB);
  // GLAPI void APIENTRY glEndQueryARB (GLenum target);
  VKFUNDEFINE(glEndQueryARB);
  // GLAPI void APIENTRY glGetQueryivARB (GLenum target, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetQueryivARB);
  // GLAPI void APIENTRY glGetQueryObjectivARB (GLuint id, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetQueryObjectivARB);
  // GLAPI void APIENTRY glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint
  // *params);
  VKFUNDEFINE(glGetQueryObjectuivARB);
  // GLAPI void APIENTRY glMaxShaderCompilerThreadsARB (GLuint count);
  VKFUNDEFINE(glMaxShaderCompilerThreadsARB);
  // GLAPI void APIENTRY glPointParameterfARB (GLenum pname, GLfloat param);
  VKFUNDEFINE(glPointParameterfARB);
  // GLAPI void APIENTRY glPointParameterfvARB (GLenum pname, const GLfloat
  // *params);
  VKFUNDEFINE(glPointParameterfvARB);
  // GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);
  VKFUNDEFINE(glGetGraphicsResetStatusARB);
  // GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum
  // format, GLenum type, GLsizei bufSize, void *img);
  VKFUNDEFINE(glGetnTexImageARB);
  // GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width,
  // GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
  VKFUNDEFINE(glReadnPixelsARB);
  // GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod,
  // GLsizei bufSize, void *img);
  VKFUNDEFINE(glGetnCompressedTexImageARB);
  // GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location,
  // GLsizei bufSize, GLfloat *params);
  VKFUNDEFINE(glGetnUniformfvARB);
  // GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location,
  // GLsizei bufSize, GLint *params);
  VKFUNDEFINE(glGetnUniformivARB);
  // GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location,
  // GLsizei bufSize, GLuint *params);
  VKFUNDEFINE(glGetnUniformuivARB);
  // GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location,
  // GLsizei bufSize, GLdouble *params);
  VKFUNDEFINE(glGetnUniformdvARB);
  // GLAPI void APIENTRY glGetnMapdvARB (GLenum target, GLenum query, GLsizei
  // bufSize, GLdouble *v);
  VKFUNDEFINE(glGetnMapdvARB);
  // GLAPI void APIENTRY glGetnMapfvARB (GLenum target, GLenum query, GLsizei
  // bufSize, GLfloat *v);
  VKFUNDEFINE(glGetnMapfvARB);
  // GLAPI void APIENTRY glGetnMapivARB (GLenum target, GLenum query, GLsizei
  // bufSize, GLint *v);
  VKFUNDEFINE(glGetnMapivARB);
  // GLAPI void APIENTRY glGetnPixelMapfvARB (GLenum map, GLsizei bufSize,
  // GLfloat *values);
  VKFUNDEFINE(glGetnPixelMapfvARB);
  // GLAPI void APIENTRY glGetnPixelMapuivARB (GLenum map, GLsizei bufSize,
  // GLuint *values);
  VKFUNDEFINE(glGetnPixelMapuivARB);
  // GLAPI void APIENTRY glGetnPixelMapusvARB (GLenum map, GLsizei bufSize,
  // GLushort *values);
  VKFUNDEFINE(glGetnPixelMapusvARB);
  // GLAPI void APIENTRY glGetnPolygonStippleARB (GLsizei bufSize, GLubyte
  // *pattern);
  VKFUNDEFINE(glGetnPolygonStippleARB);
  // GLAPI void APIENTRY glGetnColorTableARB (GLenum target, GLenum format,
  // GLenum type, GLsizei bufSize, void *table);
  VKFUNDEFINE(glGetnColorTableARB);
  // GLAPI void APIENTRY glGetnConvolutionFilterARB (GLenum target, GLenum
  // format, GLenum type, GLsizei bufSize, void *image);
  VKFUNDEFINE(glGetnConvolutionFilterARB);
  // GLAPI void APIENTRY glGetnSeparableFilterARB (GLenum target, GLenum format,
  // GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void
  // *column, void *span);
  VKFUNDEFINE(glGetnSeparableFilterARB);
  // GLAPI void APIENTRY glGetnHistogramARB (GLenum target, GLboolean reset,
  // GLenum format, GLenum type, GLsizei bufSize, void *values);
  VKFUNDEFINE(glGetnHistogramARB);
  // GLAPI void APIENTRY glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum
  // format, GLenum type, GLsizei bufSize, void *values);
  VKFUNDEFINE(glGetnMinmaxARB);
  // GLAPI void APIENTRY glFramebufferSampleLocationsfvARB (GLenum target,
  // GLuint start, GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glFramebufferSampleLocationsfvARB);
  // GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvARB (GLuint
  // framebuffer, GLuint start, GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glNamedFramebufferSampleLocationsfvARB);
  // GLAPI void APIENTRY glEvaluateDepthValuesARB (void);
  VKFUNDEFINE(glEvaluateDepthValuesARB);
  // GLAPI void APIENTRY glMinSampleShadingARB (GLfloat value);
  VKFUNDEFINE(glMinSampleShadingARB);
  // GLAPI void APIENTRY glDeleteObjectARB (GLhandleARB obj);
  VKFUNDEFINE(glDeleteObjectARB);
  // GLAPI GLhandleARB APIENTRY glGetHandleARB (GLenum pname);
  VKFUNDEFINE(glGetHandleARB);
  // GLAPI void APIENTRY glDetachObjectARB (GLhandleARB containerObj,
  // GLhandleARB attachedObj);
  VKFUNDEFINE(glDetachObjectARB);
  // GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB (GLenum shaderType);
  VKFUNDEFINE(glCreateShaderObjectARB);
  // GLAPI void APIENTRY glShaderSourceARB (GLhandleARB shaderObj, GLsizei
  // count, const GLcharARB **string, const GLint *length);
  VKFUNDEFINE(glShaderSourceARB);
  // GLAPI void APIENTRY glCompileShaderARB (GLhandleARB shaderObj);
  VKFUNDEFINE(glCompileShaderARB);
  // GLAPI GLhandleARB APIENTRY glCreateProgramObjectARB (void);
  VKFUNDEFINE(glCreateProgramObjectARB);
  // GLAPI void APIENTRY glAttachObjectARB (GLhandleARB containerObj,
  // GLhandleARB obj);
  VKFUNDEFINE(glAttachObjectARB);
  // GLAPI void APIENTRY glLinkProgramARB (GLhandleARB programObj);
  VKFUNDEFINE(glLinkProgramARB);
  // GLAPI void APIENTRY glUseProgramObjectARB (GLhandleARB programObj);
  VKFUNDEFINE(glUseProgramObjectARB);
  // GLAPI void APIENTRY glValidateProgramARB (GLhandleARB programObj);
  VKFUNDEFINE(glValidateProgramARB);
  // GLAPI void APIENTRY glUniform1fARB (GLint location, GLfloat v0);
  VKFUNDEFINE(glUniform1fARB);
  // GLAPI void APIENTRY glUniform2fARB (GLint location, GLfloat v0, GLfloat
  // v1);
  VKFUNDEFINE(glUniform2fARB);
  // GLAPI void APIENTRY glUniform3fARB (GLint location, GLfloat v0, GLfloat v1,
  // GLfloat v2);
  VKFUNDEFINE(glUniform3fARB);
  // GLAPI void APIENTRY glUniform4fARB (GLint location, GLfloat v0, GLfloat v1,
  // GLfloat v2, GLfloat v3);
  VKFUNDEFINE(glUniform4fARB);
  // GLAPI void APIENTRY glUniform1iARB (GLint location, GLint v0);
  VKFUNDEFINE(glUniform1iARB);
  // GLAPI void APIENTRY glUniform2iARB (GLint location, GLint v0, GLint v1);
  VKFUNDEFINE(glUniform2iARB);
  // GLAPI void APIENTRY glUniform3iARB (GLint location, GLint v0, GLint v1,
  // GLint v2);
  VKFUNDEFINE(glUniform3iARB);
  // GLAPI void APIENTRY glUniform4iARB (GLint location, GLint v0, GLint v1,
  // GLint v2, GLint v3);
  VKFUNDEFINE(glUniform4iARB);
  // GLAPI void APIENTRY glUniform1fvARB (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform1fvARB);
  // GLAPI void APIENTRY glUniform2fvARB (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform2fvARB);
  // GLAPI void APIENTRY glUniform3fvARB (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform3fvARB);
  // GLAPI void APIENTRY glUniform4fvARB (GLint location, GLsizei count, const
  // GLfloat *value);
  VKFUNDEFINE(glUniform4fvARB);
  // GLAPI void APIENTRY glUniform1ivARB (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform1ivARB);
  // GLAPI void APIENTRY glUniform2ivARB (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform2ivARB);
  // GLAPI void APIENTRY glUniform3ivARB (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform3ivARB);
  // GLAPI void APIENTRY glUniform4ivARB (GLint location, GLsizei count, const
  // GLint *value);
  VKFUNDEFINE(glUniform4ivARB);
  // GLAPI void APIENTRY glUniformMatrix2fvARB (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2fvARB);
  // GLAPI void APIENTRY glUniformMatrix3fvARB (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3fvARB);
  // GLAPI void APIENTRY glUniformMatrix4fvARB (GLint location, GLsizei count,
  // GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4fvARB);
  // GLAPI void APIENTRY glGetObjectParameterfvARB (GLhandleARB obj, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetObjectParameterfvARB);
  // GLAPI void APIENTRY glGetObjectParameterivARB (GLhandleARB obj, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetObjectParameterivARB);
  // GLAPI void APIENTRY glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength,
  // GLsizei *length, GLcharARB *infoLog);
  VKFUNDEFINE(glGetInfoLogARB);
  // GLAPI void APIENTRY glGetAttachedObjectsARB (GLhandleARB containerObj,
  // GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
  VKFUNDEFINE(glGetAttachedObjectsARB);
  // GLAPI GLint APIENTRY glGetUniformLocationARB (GLhandleARB programObj, const
  // GLcharARB *name);
  VKFUNDEFINE(glGetUniformLocationARB);
  // GLAPI void APIENTRY glGetActiveUniformARB (GLhandleARB programObj, GLuint
  // index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type,
  // GLcharARB *name);
  VKFUNDEFINE(glGetActiveUniformARB);
  // GLAPI void APIENTRY glGetUniformfvARB (GLhandleARB programObj, GLint
  // location, GLfloat *params);
  VKFUNDEFINE(glGetUniformfvARB);
  // GLAPI void APIENTRY glGetUniformivARB (GLhandleARB programObj, GLint
  // location, GLint *params);
  VKFUNDEFINE(glGetUniformivARB);
  // GLAPI void APIENTRY glGetShaderSourceARB (GLhandleARB obj, GLsizei
  // maxLength, GLsizei *length, GLcharARB *source);
  VKFUNDEFINE(glGetShaderSourceARB);
  // GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const
  // GLchar *name, GLint stringlen, const GLchar *string);
  VKFUNDEFINE(glNamedStringARB);
  // GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar
  // *name);
  VKFUNDEFINE(glDeleteNamedStringARB);
  // GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei
  // count, const GLchar *const*path, const GLint *length);
  VKFUNDEFINE(glCompileShaderIncludeARB);
  // GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar
  // *name);
  VKFUNDEFINE(glIsNamedStringARB);
  // GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name,
  // GLsizei bufSize, GLint *stringlen, GLchar *string);
  VKFUNDEFINE(glGetNamedStringARB);
  // GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar
  // *name, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetNamedStringivARB);
  // GLAPI void APIENTRY glBufferPageCommitmentARB (GLenum target, GLintptr
  // offset, GLsizeiptr size, GLboolean commit);
  VKFUNDEFINE(glBufferPageCommitmentARB);
  // GLAPI void APIENTRY glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr
  // offset, GLsizeiptr size, GLboolean commit);
  VKFUNDEFINE(glNamedBufferPageCommitmentEXT);
  // GLAPI void APIENTRY glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr
  // offset, GLsizeiptr size, GLboolean commit);
  VKFUNDEFINE(glNamedBufferPageCommitmentARB);
  // GLAPI void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLboolean commit);
  VKFUNDEFINE(glTexPageCommitmentARB);
  // GLAPI void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat,
  // GLuint buffer);
  VKFUNDEFINE(glTexBufferARB);
  // GLAPI void APIENTRY glCompressedTexImage3DARB (GLenum target, GLint level,
  // GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint
  // border, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexImage3DARB);
  // GLAPI void APIENTRY glCompressedTexImage2DARB (GLenum target, GLint level,
  // GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei
  // imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexImage2DARB);
  // GLAPI void APIENTRY glCompressedTexImage1DARB (GLenum target, GLint level,
  // GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize,
  // const void *data);
  VKFUNDEFINE(glCompressedTexImage1DARB);
  // GLAPI void APIENTRY glCompressedTexSubImage3DARB (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexSubImage3DARB);
  // GLAPI void APIENTRY glCompressedTexSubImage2DARB (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum
  // format, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexSubImage2DARB);
  // GLAPI void APIENTRY glCompressedTexSubImage1DARB (GLenum target, GLint
  // level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize,
  // const void *data);
  VKFUNDEFINE(glCompressedTexSubImage1DARB);
  // GLAPI void APIENTRY glGetCompressedTexImageARB (GLenum target, GLint level,
  // void *img);
  VKFUNDEFINE(glGetCompressedTexImageARB);
  // GLAPI void APIENTRY glLoadTransposeMatrixfARB (const GLfloat *m);
  VKFUNDEFINE(glLoadTransposeMatrixfARB);
  // GLAPI void APIENTRY glLoadTransposeMatrixdARB (const GLdouble *m);
  VKFUNDEFINE(glLoadTransposeMatrixdARB);
  // GLAPI void APIENTRY glMultTransposeMatrixfARB (const GLfloat *m);
  VKFUNDEFINE(glMultTransposeMatrixfARB);
  // GLAPI void APIENTRY glMultTransposeMatrixdARB (const GLdouble *m);
  VKFUNDEFINE(glMultTransposeMatrixdARB);
  // GLAPI void APIENTRY glWeightbvARB (GLint size, const GLbyte *weights);
  VKFUNDEFINE(glWeightbvARB);
  // GLAPI void APIENTRY glWeightsvARB (GLint size, const GLshort *weights);
  VKFUNDEFINE(glWeightsvARB);
  // GLAPI void APIENTRY glWeightivARB (GLint size, const GLint *weights);
  VKFUNDEFINE(glWeightivARB);
  // GLAPI void APIENTRY glWeightfvARB (GLint size, const GLfloat *weights);
  VKFUNDEFINE(glWeightfvARB);
  // GLAPI void APIENTRY glWeightdvARB (GLint size, const GLdouble *weights);
  VKFUNDEFINE(glWeightdvARB);
  // GLAPI void APIENTRY glWeightubvARB (GLint size, const GLubyte *weights);
  VKFUNDEFINE(glWeightubvARB);
  // GLAPI void APIENTRY glWeightusvARB (GLint size, const GLushort *weights);
  VKFUNDEFINE(glWeightusvARB);
  // GLAPI void APIENTRY glWeightuivARB (GLint size, const GLuint *weights);
  VKFUNDEFINE(glWeightuivARB);
  // GLAPI void APIENTRY glWeightPointerARB (GLint size, GLenum type, GLsizei
  // stride, const void *pointer);
  VKFUNDEFINE(glWeightPointerARB);
  // GLAPI void APIENTRY glVertexBlendARB (GLint count);
  VKFUNDEFINE(glVertexBlendARB);
  // GLAPI void APIENTRY glBindBufferARB (GLenum target, GLuint buffer);
  VKFUNDEFINE(glBindBufferARB);
  // GLAPI void APIENTRY glDeleteBuffersARB (GLsizei n, const GLuint *buffers);
  VKFUNDEFINE(glDeleteBuffersARB);
  // GLAPI void APIENTRY glGenBuffersARB (GLsizei n, GLuint *buffers);
  VKFUNDEFINE(glGenBuffersARB);
  // GLAPI GLboolean APIENTRY glIsBufferARB (GLuint buffer);
  VKFUNDEFINE(glIsBufferARB);
  // GLAPI void APIENTRY glBufferDataARB (GLenum target, GLsizeiptrARB size,
  // const void *data, GLenum usage);
  VKFUNDEFINE(glBufferDataARB);
  // GLAPI void APIENTRY glBufferSubDataARB (GLenum target, GLintptrARB offset,
  // GLsizeiptrARB size, const void *data);
  VKFUNDEFINE(glBufferSubDataARB);
  // GLAPI void APIENTRY glGetBufferSubDataARB (GLenum target, GLintptrARB
  // offset, GLsizeiptrARB size, void *data);
  VKFUNDEFINE(glGetBufferSubDataARB);
  // GLAPI void *APIENTRY glMapBufferARB (GLenum target, GLenum access);
  VKFUNDEFINE(glMapBufferARB);
  // GLAPI GLboolean APIENTRY glUnmapBufferARB (GLenum target);
  VKFUNDEFINE(glUnmapBufferARB);
  // GLAPI void APIENTRY glGetBufferParameterivARB (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetBufferParameterivARB);
  // GLAPI void APIENTRY glGetBufferPointervARB (GLenum target, GLenum pname,
  // void **params);
  VKFUNDEFINE(glGetBufferPointervARB);
  // GLAPI void APIENTRY glVertexAttrib1dARB (GLuint index, GLdouble x);
  VKFUNDEFINE(glVertexAttrib1dARB);
  // GLAPI void APIENTRY glVertexAttrib1dvARB (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib1dvARB);
  // GLAPI void APIENTRY glVertexAttrib1fARB (GLuint index, GLfloat x);
  VKFUNDEFINE(glVertexAttrib1fARB);
  // GLAPI void APIENTRY glVertexAttrib1fvARB (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib1fvARB);
  // GLAPI void APIENTRY glVertexAttrib1sARB (GLuint index, GLshort x);
  VKFUNDEFINE(glVertexAttrib1sARB);
  // GLAPI void APIENTRY glVertexAttrib1svARB (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib1svARB);
  // GLAPI void APIENTRY glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble
  // y);
  VKFUNDEFINE(glVertexAttrib2dARB);
  // GLAPI void APIENTRY glVertexAttrib2dvARB (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib2dvARB);
  // GLAPI void APIENTRY glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat
  // y);
  VKFUNDEFINE(glVertexAttrib2fARB);
  // GLAPI void APIENTRY glVertexAttrib2fvARB (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib2fvARB);
  // GLAPI void APIENTRY glVertexAttrib2sARB (GLuint index, GLshort x, GLshort
  // y);
  VKFUNDEFINE(glVertexAttrib2sARB);
  // GLAPI void APIENTRY glVertexAttrib2svARB (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib2svARB);
  // GLAPI void APIENTRY glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble
  // y, GLdouble z);
  VKFUNDEFINE(glVertexAttrib3dARB);
  // GLAPI void APIENTRY glVertexAttrib3dvARB (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib3dvARB);
  // GLAPI void APIENTRY glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat
  // y, GLfloat z);
  VKFUNDEFINE(glVertexAttrib3fARB);
  // GLAPI void APIENTRY glVertexAttrib3fvARB (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib3fvARB);
  // GLAPI void APIENTRY glVertexAttrib3sARB (GLuint index, GLshort x, GLshort
  // y, GLshort z);
  VKFUNDEFINE(glVertexAttrib3sARB);
  // GLAPI void APIENTRY glVertexAttrib3svARB (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib3svARB);
  // GLAPI void APIENTRY glVertexAttrib4NbvARB (GLuint index, const GLbyte *v);
  VKFUNDEFINE(glVertexAttrib4NbvARB);
  // GLAPI void APIENTRY glVertexAttrib4NivARB (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttrib4NivARB);
  // GLAPI void APIENTRY glVertexAttrib4NsvARB (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib4NsvARB);
  // GLAPI void APIENTRY glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte
  // y, GLubyte z, GLubyte w);
  VKFUNDEFINE(glVertexAttrib4NubARB);
  // GLAPI void APIENTRY glVertexAttrib4NubvARB (GLuint index, const GLubyte
  // *v);
  VKFUNDEFINE(glVertexAttrib4NubvARB);
  // GLAPI void APIENTRY glVertexAttrib4NuivARB (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttrib4NuivARB);
  // GLAPI void APIENTRY glVertexAttrib4NusvARB (GLuint index, const GLushort
  // *v);
  VKFUNDEFINE(glVertexAttrib4NusvARB);
  // GLAPI void APIENTRY glVertexAttrib4bvARB (GLuint index, const GLbyte *v);
  VKFUNDEFINE(glVertexAttrib4bvARB);
  // GLAPI void APIENTRY glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble
  // y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glVertexAttrib4dARB);
  // GLAPI void APIENTRY glVertexAttrib4dvARB (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib4dvARB);
  // GLAPI void APIENTRY glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat
  // y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glVertexAttrib4fARB);
  // GLAPI void APIENTRY glVertexAttrib4fvARB (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib4fvARB);
  // GLAPI void APIENTRY glVertexAttrib4ivARB (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttrib4ivARB);
  // GLAPI void APIENTRY glVertexAttrib4sARB (GLuint index, GLshort x, GLshort
  // y, GLshort z, GLshort w);
  VKFUNDEFINE(glVertexAttrib4sARB);
  // GLAPI void APIENTRY glVertexAttrib4svARB (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib4svARB);
  // GLAPI void APIENTRY glVertexAttrib4ubvARB (GLuint index, const GLubyte *v);
  VKFUNDEFINE(glVertexAttrib4ubvARB);
  // GLAPI void APIENTRY glVertexAttrib4uivARB (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttrib4uivARB);
  // GLAPI void APIENTRY glVertexAttrib4usvARB (GLuint index, const GLushort
  // *v);
  VKFUNDEFINE(glVertexAttrib4usvARB);
  // GLAPI void APIENTRY glVertexAttribPointerARB (GLuint index, GLint size,
  // GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribPointerARB);
  // GLAPI void APIENTRY glEnableVertexAttribArrayARB (GLuint index);
  VKFUNDEFINE(glEnableVertexAttribArrayARB);
  // GLAPI void APIENTRY glDisableVertexAttribArrayARB (GLuint index);
  VKFUNDEFINE(glDisableVertexAttribArrayARB);
  // GLAPI void APIENTRY glGetVertexAttribdvARB (GLuint index, GLenum pname,
  // GLdouble *params);
  VKFUNDEFINE(glGetVertexAttribdvARB);
  // GLAPI void APIENTRY glGetVertexAttribfvARB (GLuint index, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetVertexAttribfvARB);
  // GLAPI void APIENTRY glGetVertexAttribivARB (GLuint index, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetVertexAttribivARB);
  // GLAPI void APIENTRY glGetVertexAttribPointervARB (GLuint index, GLenum
  // pname, void **pointer);
  VKFUNDEFINE(glGetVertexAttribPointervARB);
  // GLAPI void APIENTRY glBindAttribLocationARB (GLhandleARB programObj, GLuint
  // index, const GLcharARB *name);
  VKFUNDEFINE(glBindAttribLocationARB);
  // GLAPI void APIENTRY glGetActiveAttribARB (GLhandleARB programObj, GLuint
  // index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type,
  // GLcharARB *name);
  VKFUNDEFINE(glGetActiveAttribARB);
  // GLAPI GLint APIENTRY glGetAttribLocationARB (GLhandleARB programObj, const
  // GLcharARB *name);
  VKFUNDEFINE(glGetAttribLocationARB);
  // GLAPI void APIENTRY glDepthRangeArraydvNV (GLuint first, GLsizei count,
  // const GLdouble *v);
  VKFUNDEFINE(glDepthRangeArraydvNV);
  // GLAPI void APIENTRY glDepthRangeIndexeddNV (GLuint index, GLdouble n,
  // GLdouble f);
  VKFUNDEFINE(glDepthRangeIndexeddNV);
  // GLAPI void APIENTRY glWindowPos2dARB (GLdouble x, GLdouble y);
  VKFUNDEFINE(glWindowPos2dARB);
  // GLAPI void APIENTRY glWindowPos2dvARB (const GLdouble *v);
  VKFUNDEFINE(glWindowPos2dvARB);
  // GLAPI void APIENTRY glWindowPos2fARB (GLfloat x, GLfloat y);
  VKFUNDEFINE(glWindowPos2fARB);
  // GLAPI void APIENTRY glWindowPos2fvARB (const GLfloat *v);
  VKFUNDEFINE(glWindowPos2fvARB);
  // GLAPI void APIENTRY glWindowPos2iARB (GLint x, GLint y);
  VKFUNDEFINE(glWindowPos2iARB);
  // GLAPI void APIENTRY glWindowPos2ivARB (const GLint *v);
  VKFUNDEFINE(glWindowPos2ivARB);
  // GLAPI void APIENTRY glWindowPos2sARB (GLshort x, GLshort y);
  VKFUNDEFINE(glWindowPos2sARB);
  // GLAPI void APIENTRY glWindowPos2svARB (const GLshort *v);
  VKFUNDEFINE(glWindowPos2svARB);
  // GLAPI void APIENTRY glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z);
  VKFUNDEFINE(glWindowPos3dARB);
  // GLAPI void APIENTRY glWindowPos3dvARB (const GLdouble *v);
  VKFUNDEFINE(glWindowPos3dvARB);
  // GLAPI void APIENTRY glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glWindowPos3fARB);
  // GLAPI void APIENTRY glWindowPos3fvARB (const GLfloat *v);
  VKFUNDEFINE(glWindowPos3fvARB);
  // GLAPI void APIENTRY glWindowPos3iARB (GLint x, GLint y, GLint z);
  VKFUNDEFINE(glWindowPos3iARB);
  // GLAPI void APIENTRY glWindowPos3ivARB (const GLint *v);
  VKFUNDEFINE(glWindowPos3ivARB);
  // GLAPI void APIENTRY glWindowPos3sARB (GLshort x, GLshort y, GLshort z);
  VKFUNDEFINE(glWindowPos3sARB);
  // GLAPI void APIENTRY glWindowPos3svARB (const GLshort *v);
  VKFUNDEFINE(glWindowPos3svARB);
  // GLAPI void APIENTRY glBlendBarrierKHR (void);
  VKFUNDEFINE(glBlendBarrierKHR);
  // GLAPI void APIENTRY glMaxShaderCompilerThreadsKHR (GLuint count);
  VKFUNDEFINE(glMaxShaderCompilerThreadsKHR);
  // GLAPI void APIENTRY glMultiTexCoord1bOES (GLenum texture, GLbyte s);
  VKFUNDEFINE(glMultiTexCoord1bOES);
  // GLAPI void APIENTRY glMultiTexCoord1bvOES (GLenum texture, const GLbyte
  // *coords);
  VKFUNDEFINE(glMultiTexCoord1bvOES);
  // GLAPI void APIENTRY glMultiTexCoord2bOES (GLenum texture, GLbyte s, GLbyte
  // t);
  VKFUNDEFINE(glMultiTexCoord2bOES);
  // GLAPI void APIENTRY glMultiTexCoord2bvOES (GLenum texture, const GLbyte
  // *coords);
  VKFUNDEFINE(glMultiTexCoord2bvOES);
  // GLAPI void APIENTRY glMultiTexCoord3bOES (GLenum texture, GLbyte s, GLbyte
  // t, GLbyte r);
  VKFUNDEFINE(glMultiTexCoord3bOES);
  // GLAPI void APIENTRY glMultiTexCoord3bvOES (GLenum texture, const GLbyte
  // *coords);
  VKFUNDEFINE(glMultiTexCoord3bvOES);
  // GLAPI void APIENTRY glMultiTexCoord4bOES (GLenum texture, GLbyte s, GLbyte
  // t, GLbyte r, GLbyte q);
  VKFUNDEFINE(glMultiTexCoord4bOES);
  // GLAPI void APIENTRY glMultiTexCoord4bvOES (GLenum texture, const GLbyte
  // *coords);
  VKFUNDEFINE(glMultiTexCoord4bvOES);
  // GLAPI void APIENTRY glTexCoord1bOES (GLbyte s);
  VKFUNDEFINE(glTexCoord1bOES);
  // GLAPI void APIENTRY glTexCoord1bvOES (const GLbyte *coords);
  VKFUNDEFINE(glTexCoord1bvOES);
  // GLAPI void APIENTRY glTexCoord2bOES (GLbyte s, GLbyte t);
  VKFUNDEFINE(glTexCoord2bOES);
  // GLAPI void APIENTRY glTexCoord2bvOES (const GLbyte *coords);
  VKFUNDEFINE(glTexCoord2bvOES);
  // GLAPI void APIENTRY glTexCoord3bOES (GLbyte s, GLbyte t, GLbyte r);
  VKFUNDEFINE(glTexCoord3bOES);
  // GLAPI void APIENTRY glTexCoord3bvOES (const GLbyte *coords);
  VKFUNDEFINE(glTexCoord3bvOES);
  // GLAPI void APIENTRY glTexCoord4bOES (GLbyte s, GLbyte t, GLbyte r, GLbyte
  // q);
  VKFUNDEFINE(glTexCoord4bOES);
  // GLAPI void APIENTRY glTexCoord4bvOES (const GLbyte *coords);
  VKFUNDEFINE(glTexCoord4bvOES);
  // GLAPI void APIENTRY glVertex2bOES (GLbyte x, GLbyte y);
  VKFUNDEFINE(glVertex2bOES);
  // GLAPI void APIENTRY glVertex2bvOES (const GLbyte *coords);
  VKFUNDEFINE(glVertex2bvOES);
  // GLAPI void APIENTRY glVertex3bOES (GLbyte x, GLbyte y, GLbyte z);
  VKFUNDEFINE(glVertex3bOES);
  // GLAPI void APIENTRY glVertex3bvOES (const GLbyte *coords);
  VKFUNDEFINE(glVertex3bvOES);
  // GLAPI void APIENTRY glVertex4bOES (GLbyte x, GLbyte y, GLbyte z, GLbyte w);
  VKFUNDEFINE(glVertex4bOES);
  // GLAPI void APIENTRY glVertex4bvOES (const GLbyte *coords);
  VKFUNDEFINE(glVertex4bvOES);
  // GLAPI void APIENTRY glAlphaFuncxOES (GLenum func, GLfixed ref);
  VKFUNDEFINE(glAlphaFuncxOES);
  // GLAPI void APIENTRY glClearColorxOES (GLfixed red, GLfixed green, GLfixed
  // blue, GLfixed alpha);
  VKFUNDEFINE(glClearColorxOES);
  // GLAPI void APIENTRY glClearDepthxOES (GLfixed depth);
  VKFUNDEFINE(glClearDepthxOES);
  // GLAPI void APIENTRY glClipPlanexOES (GLenum plane, const GLfixed
  // *equation);
  VKFUNDEFINE(glClipPlanexOES);
  // GLAPI void APIENTRY glColor4xOES (GLfixed red, GLfixed green, GLfixed blue,
  // GLfixed alpha);
  VKFUNDEFINE(glColor4xOES);
  // GLAPI void APIENTRY glDepthRangexOES (GLfixed n, GLfixed f);
  VKFUNDEFINE(glDepthRangexOES);
  // GLAPI void APIENTRY glFogxOES (GLenum pname, GLfixed param);
  VKFUNDEFINE(glFogxOES);
  // GLAPI void APIENTRY glFogxvOES (GLenum pname, const GLfixed *param);
  VKFUNDEFINE(glFogxvOES);
  // GLAPI void APIENTRY glFrustumxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed
  // t, GLfixed n, GLfixed f);
  VKFUNDEFINE(glFrustumxOES);
  // GLAPI void APIENTRY glGetClipPlanexOES (GLenum plane, GLfixed *equation);
  VKFUNDEFINE(glGetClipPlanexOES);
  // GLAPI void APIENTRY glGetFixedvOES (GLenum pname, GLfixed *params);
  VKFUNDEFINE(glGetFixedvOES);
  // GLAPI void APIENTRY glGetTexEnvxvOES (GLenum target, GLenum pname, GLfixed
  // *params);
  VKFUNDEFINE(glGetTexEnvxvOES);
  // GLAPI void APIENTRY glGetTexParameterxvOES (GLenum target, GLenum pname,
  // GLfixed *params);
  VKFUNDEFINE(glGetTexParameterxvOES);
  // GLAPI void APIENTRY glLightModelxOES (GLenum pname, GLfixed param);
  VKFUNDEFINE(glLightModelxOES);
  // GLAPI void APIENTRY glLightModelxvOES (GLenum pname, const GLfixed *param);
  VKFUNDEFINE(glLightModelxvOES);
  // GLAPI void APIENTRY glLightxOES (GLenum light, GLenum pname, GLfixed
  // param);
  VKFUNDEFINE(glLightxOES);
  // GLAPI void APIENTRY glLightxvOES (GLenum light, GLenum pname, const GLfixed
  // *params);
  VKFUNDEFINE(glLightxvOES);
  // GLAPI void APIENTRY glLineWidthxOES (GLfixed width);
  VKFUNDEFINE(glLineWidthxOES);
  // GLAPI void APIENTRY glLoadMatrixxOES (const GLfixed *m);
  VKFUNDEFINE(glLoadMatrixxOES);
  // GLAPI void APIENTRY glMaterialxOES (GLenum face, GLenum pname, GLfixed
  // param);
  VKFUNDEFINE(glMaterialxOES);
  // GLAPI void APIENTRY glMaterialxvOES (GLenum face, GLenum pname, const
  // GLfixed *param);
  VKFUNDEFINE(glMaterialxvOES);
  // GLAPI void APIENTRY glMultMatrixxOES (const GLfixed *m);
  VKFUNDEFINE(glMultMatrixxOES);
  // GLAPI void APIENTRY glMultiTexCoord4xOES (GLenum texture, GLfixed s,
  // GLfixed t, GLfixed r, GLfixed q);
  VKFUNDEFINE(glMultiTexCoord4xOES);
  // GLAPI void APIENTRY glNormal3xOES (GLfixed nx, GLfixed ny, GLfixed nz);
  VKFUNDEFINE(glNormal3xOES);
  // GLAPI void APIENTRY glOrthoxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed
  // t, GLfixed n, GLfixed f);
  VKFUNDEFINE(glOrthoxOES);
  // GLAPI void APIENTRY glPointParameterxvOES (GLenum pname, const GLfixed
  // *params);
  VKFUNDEFINE(glPointParameterxvOES);
  // GLAPI void APIENTRY glPointSizexOES (GLfixed size);
  VKFUNDEFINE(glPointSizexOES);
  // GLAPI void APIENTRY glPolygonOffsetxOES (GLfixed factor, GLfixed units);
  VKFUNDEFINE(glPolygonOffsetxOES);
  // GLAPI void APIENTRY glRotatexOES (GLfixed angle, GLfixed x, GLfixed y,
  // GLfixed z);
  VKFUNDEFINE(glRotatexOES);
  // GLAPI void APIENTRY glScalexOES (GLfixed x, GLfixed y, GLfixed z);
  VKFUNDEFINE(glScalexOES);
  // GLAPI void APIENTRY glTexEnvxOES (GLenum target, GLenum pname, GLfixed
  // param);
  VKFUNDEFINE(glTexEnvxOES);
  // GLAPI void APIENTRY glTexEnvxvOES (GLenum target, GLenum pname, const
  // GLfixed *params);
  VKFUNDEFINE(glTexEnvxvOES);
  // GLAPI void APIENTRY glTexParameterxOES (GLenum target, GLenum pname,
  // GLfixed param);
  VKFUNDEFINE(glTexParameterxOES);
  // GLAPI void APIENTRY glTexParameterxvOES (GLenum target, GLenum pname, const
  // GLfixed *params);
  VKFUNDEFINE(glTexParameterxvOES);
  // GLAPI void APIENTRY glTranslatexOES (GLfixed x, GLfixed y, GLfixed z);
  VKFUNDEFINE(glTranslatexOES);
  // GLAPI void APIENTRY glAccumxOES (GLenum op, GLfixed value);
  VKFUNDEFINE(glAccumxOES);
  // GLAPI void APIENTRY glBitmapxOES (GLsizei width, GLsizei height, GLfixed
  // xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
  VKFUNDEFINE(glBitmapxOES);
  // GLAPI void APIENTRY glBlendColorxOES (GLfixed red, GLfixed green, GLfixed
  // blue, GLfixed alpha);
  VKFUNDEFINE(glBlendColorxOES);
  // GLAPI void APIENTRY glClearAccumxOES (GLfixed red, GLfixed green, GLfixed
  // blue, GLfixed alpha);
  VKFUNDEFINE(glClearAccumxOES);
  // GLAPI void APIENTRY glColor3xOES (GLfixed red, GLfixed green, GLfixed
  // blue);
  VKFUNDEFINE(glColor3xOES);
  // GLAPI void APIENTRY glColor3xvOES (const GLfixed *components);
  VKFUNDEFINE(glColor3xvOES);
  // GLAPI void APIENTRY glColor4xvOES (const GLfixed *components);
  VKFUNDEFINE(glColor4xvOES);
  // GLAPI void APIENTRY glConvolutionParameterxOES (GLenum target, GLenum
  // pname, GLfixed param);
  VKFUNDEFINE(glConvolutionParameterxOES);
  // GLAPI void APIENTRY glConvolutionParameterxvOES (GLenum target, GLenum
  // pname, const GLfixed *params);
  VKFUNDEFINE(glConvolutionParameterxvOES);
  // GLAPI void APIENTRY glEvalCoord1xOES (GLfixed u);
  VKFUNDEFINE(glEvalCoord1xOES);
  // GLAPI void APIENTRY glEvalCoord1xvOES (const GLfixed *coords);
  VKFUNDEFINE(glEvalCoord1xvOES);
  // GLAPI void APIENTRY glEvalCoord2xOES (GLfixed u, GLfixed v);
  VKFUNDEFINE(glEvalCoord2xOES);
  // GLAPI void APIENTRY glEvalCoord2xvOES (const GLfixed *coords);
  VKFUNDEFINE(glEvalCoord2xvOES);
  // GLAPI void APIENTRY glFeedbackBufferxOES (GLsizei n, GLenum type, const
  // GLfixed *buffer);
  VKFUNDEFINE(glFeedbackBufferxOES);
  // GLAPI void APIENTRY glGetConvolutionParameterxvOES (GLenum target, GLenum
  // pname, GLfixed *params);
  VKFUNDEFINE(glGetConvolutionParameterxvOES);
  // GLAPI void APIENTRY glGetHistogramParameterxvOES (GLenum target, GLenum
  // pname, GLfixed *params);
  VKFUNDEFINE(glGetHistogramParameterxvOES);
  // GLAPI void APIENTRY glGetLightxOES (GLenum light, GLenum pname, GLfixed
  // *params);
  VKFUNDEFINE(glGetLightxOES);
  // GLAPI void APIENTRY glGetMapxvOES (GLenum target, GLenum query, GLfixed
  // *v);
  VKFUNDEFINE(glGetMapxvOES);
  // GLAPI void APIENTRY glGetMaterialxOES (GLenum face, GLenum pname, GLfixed
  // param);
  VKFUNDEFINE(glGetMaterialxOES);
  // GLAPI void APIENTRY glGetPixelMapxv (GLenum map, GLint size, GLfixed
  // *values);
  VKFUNDEFINE(glGetPixelMapxv);
  // GLAPI void APIENTRY glGetTexGenxvOES (GLenum coord, GLenum pname, GLfixed
  // *params);
  VKFUNDEFINE(glGetTexGenxvOES);
  // GLAPI void APIENTRY glGetTexLevelParameterxvOES (GLenum target, GLint
  // level, GLenum pname, GLfixed *params);
  VKFUNDEFINE(glGetTexLevelParameterxvOES);
  // GLAPI void APIENTRY glIndexxOES (GLfixed component);
  VKFUNDEFINE(glIndexxOES);
  // GLAPI void APIENTRY glIndexxvOES (const GLfixed *component);
  VKFUNDEFINE(glIndexxvOES);
  // GLAPI void APIENTRY glLoadTransposeMatrixxOES (const GLfixed *m);
  VKFUNDEFINE(glLoadTransposeMatrixxOES);
  // GLAPI void APIENTRY glMap1xOES (GLenum target, GLfixed u1, GLfixed u2,
  // GLint stride, GLint order, GLfixed points);
  VKFUNDEFINE(glMap1xOES);
  // GLAPI void APIENTRY glMap2xOES (GLenum target, GLfixed u1, GLfixed u2,
  // GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint
  // vorder, GLfixed points);
  VKFUNDEFINE(glMap2xOES);
  // GLAPI void APIENTRY glMapGrid1xOES (GLint n, GLfixed u1, GLfixed u2);
  VKFUNDEFINE(glMapGrid1xOES);
  // GLAPI void APIENTRY glMapGrid2xOES (GLint n, GLfixed u1, GLfixed u2,
  // GLfixed v1, GLfixed v2);
  VKFUNDEFINE(glMapGrid2xOES);
  // GLAPI void APIENTRY glMultTransposeMatrixxOES (const GLfixed *m);
  VKFUNDEFINE(glMultTransposeMatrixxOES);
  // GLAPI void APIENTRY glMultiTexCoord1xOES (GLenum texture, GLfixed s);
  VKFUNDEFINE(glMultiTexCoord1xOES);
  // GLAPI void APIENTRY glMultiTexCoord1xvOES (GLenum texture, const GLfixed
  // *coords);
  VKFUNDEFINE(glMultiTexCoord1xvOES);
  // GLAPI void APIENTRY glMultiTexCoord2xOES (GLenum texture, GLfixed s,
  // GLfixed t);
  VKFUNDEFINE(glMultiTexCoord2xOES);
  // GLAPI void APIENTRY glMultiTexCoord2xvOES (GLenum texture, const GLfixed
  // *coords);
  VKFUNDEFINE(glMultiTexCoord2xvOES);
  // GLAPI void APIENTRY glMultiTexCoord3xOES (GLenum texture, GLfixed s,
  // GLfixed t, GLfixed r);
  VKFUNDEFINE(glMultiTexCoord3xOES);
  // GLAPI void APIENTRY glMultiTexCoord3xvOES (GLenum texture, const GLfixed
  // *coords);
  VKFUNDEFINE(glMultiTexCoord3xvOES);
  // GLAPI void APIENTRY glMultiTexCoord4xvOES (GLenum texture, const GLfixed
  // *coords);
  VKFUNDEFINE(glMultiTexCoord4xvOES);
  // GLAPI void APIENTRY glNormal3xvOES (const GLfixed *coords);
  VKFUNDEFINE(glNormal3xvOES);
  // GLAPI void APIENTRY glPassThroughxOES (GLfixed token);
  VKFUNDEFINE(glPassThroughxOES);
  // GLAPI void APIENTRY glPixelMapx (GLenum map, GLint size, const GLfixed
  // *values);
  VKFUNDEFINE(glPixelMapx);
  // GLAPI void APIENTRY glPixelStorex (GLenum pname, GLfixed param);
  VKFUNDEFINE(glPixelStorex);
  // GLAPI void APIENTRY glPixelTransferxOES (GLenum pname, GLfixed param);
  VKFUNDEFINE(glPixelTransferxOES);
  // GLAPI void APIENTRY glPixelZoomxOES (GLfixed xfactor, GLfixed yfactor);
  VKFUNDEFINE(glPixelZoomxOES);
  // GLAPI void APIENTRY glPrioritizeTexturesxOES (GLsizei n, const GLuint
  // *textures, const GLfixed *priorities);
  VKFUNDEFINE(glPrioritizeTexturesxOES);
  // GLAPI void APIENTRY glRasterPos2xOES (GLfixed x, GLfixed y);
  VKFUNDEFINE(glRasterPos2xOES);
  // GLAPI void APIENTRY glRasterPos2xvOES (const GLfixed *coords);
  VKFUNDEFINE(glRasterPos2xvOES);
  // GLAPI void APIENTRY glRasterPos3xOES (GLfixed x, GLfixed y, GLfixed z);
  VKFUNDEFINE(glRasterPos3xOES);
  // GLAPI void APIENTRY glRasterPos3xvOES (const GLfixed *coords);
  VKFUNDEFINE(glRasterPos3xvOES);
  // GLAPI void APIENTRY glRasterPos4xOES (GLfixed x, GLfixed y, GLfixed z,
  // GLfixed w);
  VKFUNDEFINE(glRasterPos4xOES);
  // GLAPI void APIENTRY glRasterPos4xvOES (const GLfixed *coords);
  VKFUNDEFINE(glRasterPos4xvOES);
  // GLAPI void APIENTRY glRectxOES (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed
  // y2);
  VKFUNDEFINE(glRectxOES);
  // GLAPI void APIENTRY glRectxvOES (const GLfixed *v1, const GLfixed *v2);
  VKFUNDEFINE(glRectxvOES);
  // GLAPI void APIENTRY glTexCoord1xOES (GLfixed s);
  VKFUNDEFINE(glTexCoord1xOES);
  // GLAPI void APIENTRY glTexCoord1xvOES (const GLfixed *coords);
  VKFUNDEFINE(glTexCoord1xvOES);
  // GLAPI void APIENTRY glTexCoord2xOES (GLfixed s, GLfixed t);
  VKFUNDEFINE(glTexCoord2xOES);
  // GLAPI void APIENTRY glTexCoord2xvOES (const GLfixed *coords);
  VKFUNDEFINE(glTexCoord2xvOES);
  // GLAPI void APIENTRY glTexCoord3xOES (GLfixed s, GLfixed t, GLfixed r);
  VKFUNDEFINE(glTexCoord3xOES);
  // GLAPI void APIENTRY glTexCoord3xvOES (const GLfixed *coords);
  VKFUNDEFINE(glTexCoord3xvOES);
  // GLAPI void APIENTRY glTexCoord4xOES (GLfixed s, GLfixed t, GLfixed r,
  // GLfixed q);
  VKFUNDEFINE(glTexCoord4xOES);
  // GLAPI void APIENTRY glTexCoord4xvOES (const GLfixed *coords);
  VKFUNDEFINE(glTexCoord4xvOES);
  // GLAPI void APIENTRY glTexGenxOES (GLenum coord, GLenum pname, GLfixed
  // param);
  VKFUNDEFINE(glTexGenxOES);
  // GLAPI void APIENTRY glTexGenxvOES (GLenum coord, GLenum pname, const
  // GLfixed *params);
  VKFUNDEFINE(glTexGenxvOES);
  // GLAPI void APIENTRY glVertex2xOES (GLfixed x);
  VKFUNDEFINE(glVertex2xOES);
  // GLAPI void APIENTRY glVertex2xvOES (const GLfixed *coords);
  VKFUNDEFINE(glVertex2xvOES);
  // GLAPI void APIENTRY glVertex3xOES (GLfixed x, GLfixed y);
  VKFUNDEFINE(glVertex3xOES);
  // GLAPI void APIENTRY glVertex3xvOES (const GLfixed *coords);
  VKFUNDEFINE(glVertex3xvOES);
  // GLAPI void APIENTRY glVertex4xOES (GLfixed x, GLfixed y, GLfixed z);
  VKFUNDEFINE(glVertex4xOES);
  // GLAPI void APIENTRY glVertex4xvOES (const GLfixed *coords);
  VKFUNDEFINE(glVertex4xvOES);
  // GLAPI GLbitfield APIENTRY glQueryMatrixxOES (GLfixed *mantissa, GLint
  // *exponent);
  VKFUNDEFINE(glQueryMatrixxOES);
  // GLAPI void APIENTRY glClearDepthfOES (GLclampf depth);
  VKFUNDEFINE(glClearDepthfOES);
  // GLAPI void APIENTRY glClipPlanefOES (GLenum plane, const GLfloat
  // *equation);
  VKFUNDEFINE(glClipPlanefOES);
  // GLAPI void APIENTRY glDepthRangefOES (GLclampf n, GLclampf f);
  VKFUNDEFINE(glDepthRangefOES);
  // GLAPI void APIENTRY glFrustumfOES (GLfloat l, GLfloat r, GLfloat b, GLfloat
  // t, GLfloat n, GLfloat f);
  VKFUNDEFINE(glFrustumfOES);
  // GLAPI void APIENTRY glGetClipPlanefOES (GLenum plane, GLfloat *equation);
  VKFUNDEFINE(glGetClipPlanefOES);
  // GLAPI void APIENTRY glOrthofOES (GLfloat l, GLfloat r, GLfloat b, GLfloat
  // t, GLfloat n, GLfloat f);
  VKFUNDEFINE(glOrthofOES);
  // GLAPI void APIENTRY glTbufferMask3DFX (GLuint mask);
  VKFUNDEFINE(glTbufferMask3DFX);
  // GLAPI void APIENTRY glDebugMessageEnableAMD (GLenum category, GLenum
  // severity, GLsizei count, const GLuint *ids, GLboolean enabled);
  VKFUNDEFINE(glDebugMessageEnableAMD);
  // GLAPI void APIENTRY glDebugMessageInsertAMD (GLenum category, GLenum
  // severity, GLuint id, GLsizei length, const GLchar *buf);
  VKFUNDEFINE(glDebugMessageInsertAMD);
  // GLAPI void APIENTRY glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback,
  // void *userParam);
  VKFUNDEFINE(glDebugMessageCallbackAMD);
  // GLAPI GLuint APIENTRY glGetDebugMessageLogAMD (GLuint count, GLsizei
  // bufSize, GLenum *categories, GLenum *severities, GLuint *ids, GLsizei
  // *lengths, GLchar *message);
  VKFUNDEFINE(glGetDebugMessageLogAMD);
  // GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum
  // dst);
  VKFUNDEFINE(glBlendFuncIndexedAMD);
  // GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum
  // srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  VKFUNDEFINE(glBlendFuncSeparateIndexedAMD);
  // GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode);
  VKFUNDEFINE(glBlendEquationIndexedAMD);
  // GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum
  // modeRGB, GLenum modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparateIndexedAMD);
  // GLAPI void APIENTRY glRenderbufferStorageMultisampleAdvancedAMD (GLenum
  // target, GLsizei samples, GLsizei storageSamples, GLenum internalformat,
  // GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleAdvancedAMD);
  // GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleAdvancedAMD
  // (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glNamedRenderbufferStorageMultisampleAdvancedAMD);
  // GLAPI void APIENTRY glFramebufferSamplePositionsfvAMD (GLenum target,
  // GLuint numsamples, GLuint pixelindex, const GLfloat *values);
  VKFUNDEFINE(glFramebufferSamplePositionsfvAMD);
  // GLAPI void APIENTRY glNamedFramebufferSamplePositionsfvAMD (GLuint
  // framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
  VKFUNDEFINE(glNamedFramebufferSamplePositionsfvAMD);
  // GLAPI void APIENTRY glGetFramebufferParameterfvAMD (GLenum target, GLenum
  // pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat
  // *values);
  VKFUNDEFINE(glGetFramebufferParameterfvAMD);
  // GLAPI void APIENTRY glGetNamedFramebufferParameterfvAMD (GLuint
  // framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei
  // size, GLfloat *values);
  VKFUNDEFINE(glGetNamedFramebufferParameterfvAMD);
  // GLAPI void APIENTRY glUniform1i64NV (GLint location, GLint64EXT x);
  VKFUNDEFINE(glUniform1i64NV);
  // GLAPI void APIENTRY glUniform2i64NV (GLint location, GLint64EXT x,
  // GLint64EXT y);
  VKFUNDEFINE(glUniform2i64NV);
  // GLAPI void APIENTRY glUniform3i64NV (GLint location, GLint64EXT x,
  // GLint64EXT y, GLint64EXT z);
  VKFUNDEFINE(glUniform3i64NV);
  // GLAPI void APIENTRY glUniform4i64NV (GLint location, GLint64EXT x,
  // GLint64EXT y, GLint64EXT z, GLint64EXT w);
  VKFUNDEFINE(glUniform4i64NV);
  // GLAPI void APIENTRY glUniform1i64vNV (GLint location, GLsizei count, const
  // GLint64EXT *value);
  VKFUNDEFINE(glUniform1i64vNV);
  // GLAPI void APIENTRY glUniform2i64vNV (GLint location, GLsizei count, const
  // GLint64EXT *value);
  VKFUNDEFINE(glUniform2i64vNV);
  // GLAPI void APIENTRY glUniform3i64vNV (GLint location, GLsizei count, const
  // GLint64EXT *value);
  VKFUNDEFINE(glUniform3i64vNV);
  // GLAPI void APIENTRY glUniform4i64vNV (GLint location, GLsizei count, const
  // GLint64EXT *value);
  VKFUNDEFINE(glUniform4i64vNV);
  // GLAPI void APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT x);
  VKFUNDEFINE(glUniform1ui64NV);
  // GLAPI void APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT x,
  // GLuint64EXT y);
  VKFUNDEFINE(glUniform2ui64NV);
  // GLAPI void APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT x,
  // GLuint64EXT y, GLuint64EXT z);
  VKFUNDEFINE(glUniform3ui64NV);
  // GLAPI void APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT x,
  // GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  VKFUNDEFINE(glUniform4ui64NV);
  // GLAPI void APIENTRY glUniform1ui64vNV (GLint location, GLsizei count, const
  // GLuint64EXT *value);
  VKFUNDEFINE(glUniform1ui64vNV);
  // GLAPI void APIENTRY glUniform2ui64vNV (GLint location, GLsizei count, const
  // GLuint64EXT *value);
  VKFUNDEFINE(glUniform2ui64vNV);
  // GLAPI void APIENTRY glUniform3ui64vNV (GLint location, GLsizei count, const
  // GLuint64EXT *value);
  VKFUNDEFINE(glUniform3ui64vNV);
  // GLAPI void APIENTRY glUniform4ui64vNV (GLint location, GLsizei count, const
  // GLuint64EXT *value);
  VKFUNDEFINE(glUniform4ui64vNV);
  // GLAPI void APIENTRY glGetUniformi64vNV (GLuint program, GLint location,
  // GLint64EXT *params);
  VKFUNDEFINE(glGetUniformi64vNV);
  // GLAPI void APIENTRY glGetUniformui64vNV (GLuint program, GLint location,
  // GLuint64EXT *params);
  VKFUNDEFINE(glGetUniformui64vNV);
  // GLAPI void APIENTRY glProgramUniform1i64NV (GLuint program, GLint location,
  // GLint64EXT x);
  VKFUNDEFINE(glProgramUniform1i64NV);
  // GLAPI void APIENTRY glProgramUniform2i64NV (GLuint program, GLint location,
  // GLint64EXT x, GLint64EXT y);
  VKFUNDEFINE(glProgramUniform2i64NV);
  // GLAPI void APIENTRY glProgramUniform3i64NV (GLuint program, GLint location,
  // GLint64EXT x, GLint64EXT y, GLint64EXT z);
  VKFUNDEFINE(glProgramUniform3i64NV);
  // GLAPI void APIENTRY glProgramUniform4i64NV (GLuint program, GLint location,
  // GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
  VKFUNDEFINE(glProgramUniform4i64NV);
  // GLAPI void APIENTRY glProgramUniform1i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform1i64vNV);
  // GLAPI void APIENTRY glProgramUniform2i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform2i64vNV);
  // GLAPI void APIENTRY glProgramUniform3i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform3i64vNV);
  // GLAPI void APIENTRY glProgramUniform4i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform4i64vNV);
  // GLAPI void APIENTRY glProgramUniform1ui64NV (GLuint program, GLint
  // location, GLuint64EXT x);
  VKFUNDEFINE(glProgramUniform1ui64NV);
  // GLAPI void APIENTRY glProgramUniform2ui64NV (GLuint program, GLint
  // location, GLuint64EXT x, GLuint64EXT y);
  VKFUNDEFINE(glProgramUniform2ui64NV);
  // GLAPI void APIENTRY glProgramUniform3ui64NV (GLuint program, GLint
  // location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
  VKFUNDEFINE(glProgramUniform3ui64NV);
  // GLAPI void APIENTRY glProgramUniform4ui64NV (GLuint program, GLint
  // location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  VKFUNDEFINE(glProgramUniform4ui64NV);
  // GLAPI void APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform1ui64vNV);
  // GLAPI void APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform2ui64vNV);
  // GLAPI void APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform3ui64vNV);
  // GLAPI void APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform4ui64vNV);
  // GLAPI void APIENTRY glVertexAttribParameteriAMD (GLuint index, GLenum
  // pname, GLint param);
  VKFUNDEFINE(glVertexAttribParameteriAMD);
  // GLAPI void APIENTRY glMultiDrawArraysIndirectAMD (GLenum mode, const void
  // *indirect, GLsizei primcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawArraysIndirectAMD);
  // GLAPI void APIENTRY glMultiDrawElementsIndirectAMD (GLenum mode, GLenum
  // type, const void *indirect, GLsizei primcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawElementsIndirectAMD);
  // GLAPI void APIENTRY glGenNamesAMD (GLenum identifier, GLuint num, GLuint
  // *names);
  VKFUNDEFINE(glGenNamesAMD);
  // GLAPI void APIENTRY glDeleteNamesAMD (GLenum identifier, GLuint num, const
  // GLuint *names);
  VKFUNDEFINE(glDeleteNamesAMD);
  // GLAPI GLboolean APIENTRY glIsNameAMD (GLenum identifier, GLuint name);
  VKFUNDEFINE(glIsNameAMD);
  // GLAPI void APIENTRY glQueryObjectParameteruiAMD (GLenum target, GLuint id,
  // GLenum pname, GLuint param);
  VKFUNDEFINE(glQueryObjectParameteruiAMD);
  // GLAPI void APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei
  // groupsSize, GLuint *groups);
  VKFUNDEFINE(glGetPerfMonitorGroupsAMD);
  // GLAPI void APIENTRY glGetPerfMonitorCountersAMD (GLuint group, GLint
  // *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint
  // *counters);
  VKFUNDEFINE(glGetPerfMonitorCountersAMD);
  // GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei
  // bufSize, GLsizei *length, GLchar *groupString);
  VKFUNDEFINE(glGetPerfMonitorGroupStringAMD);
  // GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint
  // counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
  VKFUNDEFINE(glGetPerfMonitorCounterStringAMD);
  // GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint
  // counter, GLenum pname, void *data);
  VKFUNDEFINE(glGetPerfMonitorCounterInfoAMD);
  // GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors);
  VKFUNDEFINE(glGenPerfMonitorsAMD);
  // GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors);
  VKFUNDEFINE(glDeletePerfMonitorsAMD);
  // GLAPI void APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor,
  // GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
  VKFUNDEFINE(glSelectPerfMonitorCountersAMD);
  // GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint monitor);
  VKFUNDEFINE(glBeginPerfMonitorAMD);
  // GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint monitor);
  VKFUNDEFINE(glEndPerfMonitorAMD);
  // GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum
  // pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
  VKFUNDEFINE(glGetPerfMonitorCounterDataAMD);
  // GLAPI void APIENTRY glSetMultisamplefvAMD (GLenum pname, GLuint index,
  // const GLfloat *val);
  VKFUNDEFINE(glSetMultisamplefvAMD);
  // GLAPI void APIENTRY glTexStorageSparseAMD (GLenum target, GLenum
  // internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei
  // layers, GLbitfield flags);
  VKFUNDEFINE(glTexStorageSparseAMD);
  // GLAPI void APIENTRY glTextureStorageSparseAMD (GLuint texture, GLenum
  // target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei
  // depth, GLsizei layers, GLbitfield flags);
  VKFUNDEFINE(glTextureStorageSparseAMD);
  // GLAPI void APIENTRY glStencilOpValueAMD (GLenum face, GLuint value);
  VKFUNDEFINE(glStencilOpValueAMD);
  // GLAPI void APIENTRY glTessellationFactorAMD (GLfloat factor);
  VKFUNDEFINE(glTessellationFactorAMD);
  // GLAPI void APIENTRY glTessellationModeAMD (GLenum mode);
  VKFUNDEFINE(glTessellationModeAMD);
  // GLAPI void APIENTRY glElementPointerAPPLE (GLenum type, const void
  // *pointer);
  VKFUNDEFINE(glElementPointerAPPLE);
  // GLAPI void APIENTRY glDrawElementArrayAPPLE (GLenum mode, GLint first,
  // GLsizei count);
  VKFUNDEFINE(glDrawElementArrayAPPLE);
  // GLAPI void APIENTRY glDrawRangeElementArrayAPPLE (GLenum mode, GLuint
  // start, GLuint end, GLint first, GLsizei count);
  VKFUNDEFINE(glDrawRangeElementArrayAPPLE);
  // GLAPI void APIENTRY glMultiDrawElementArrayAPPLE (GLenum mode, const GLint
  // *first, const GLsizei *count, GLsizei primcount);
  VKFUNDEFINE(glMultiDrawElementArrayAPPLE);
  // GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint
  // start, GLuint end, const GLint *first, const GLsizei *count, GLsizei
  // primcount);
  VKFUNDEFINE(glMultiDrawRangeElementArrayAPPLE);
  // GLAPI void APIENTRY glGenFencesAPPLE (GLsizei n, GLuint *fences);
  VKFUNDEFINE(glGenFencesAPPLE);
  // GLAPI void APIENTRY glDeleteFencesAPPLE (GLsizei n, const GLuint *fences);
  VKFUNDEFINE(glDeleteFencesAPPLE);
  // GLAPI void APIENTRY glSetFenceAPPLE (GLuint fence);
  VKFUNDEFINE(glSetFenceAPPLE);
  // GLAPI GLboolean APIENTRY glIsFenceAPPLE (GLuint fence);
  VKFUNDEFINE(glIsFenceAPPLE);
  // GLAPI GLboolean APIENTRY glTestFenceAPPLE (GLuint fence);
  VKFUNDEFINE(glTestFenceAPPLE);
  // GLAPI void APIENTRY glFinishFenceAPPLE (GLuint fence);
  VKFUNDEFINE(glFinishFenceAPPLE);
  // GLAPI GLboolean APIENTRY glTestObjectAPPLE (GLenum object, GLuint name);
  VKFUNDEFINE(glTestObjectAPPLE);
  // GLAPI void APIENTRY glFinishObjectAPPLE (GLenum object, GLint name);
  VKFUNDEFINE(glFinishObjectAPPLE);
  // GLAPI void APIENTRY glBufferParameteriAPPLE (GLenum target, GLenum pname,
  // GLint param);
  VKFUNDEFINE(glBufferParameteriAPPLE);
  // GLAPI void APIENTRY glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr
  // offset, GLsizeiptr size);
  VKFUNDEFINE(glFlushMappedBufferRangeAPPLE);
  // GLAPI GLenum APIENTRY glObjectPurgeableAPPLE (GLenum objectType, GLuint
  // name, GLenum option);
  VKFUNDEFINE(glObjectPurgeableAPPLE);
  // GLAPI GLenum APIENTRY glObjectUnpurgeableAPPLE (GLenum objectType, GLuint
  // name, GLenum option);
  VKFUNDEFINE(glObjectUnpurgeableAPPLE);
  // GLAPI void APIENTRY glGetObjectParameterivAPPLE (GLenum objectType, GLuint
  // name, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetObjectParameterivAPPLE);
  // GLAPI void APIENTRY glTextureRangeAPPLE (GLenum target, GLsizei length,
  // const void *pointer);
  VKFUNDEFINE(glTextureRangeAPPLE);
  // GLAPI void APIENTRY glGetTexParameterPointervAPPLE (GLenum target, GLenum
  // pname, void **params);
  VKFUNDEFINE(glGetTexParameterPointervAPPLE);
  // GLAPI void APIENTRY glBindVertexArrayAPPLE (GLuint array);
  VKFUNDEFINE(glBindVertexArrayAPPLE);
  // GLAPI void APIENTRY glDeleteVertexArraysAPPLE (GLsizei n, const GLuint
  // *arrays);
  VKFUNDEFINE(glDeleteVertexArraysAPPLE);
  // GLAPI void APIENTRY glGenVertexArraysAPPLE (GLsizei n, GLuint *arrays);
  VKFUNDEFINE(glGenVertexArraysAPPLE);
  // GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE (GLuint array);
  VKFUNDEFINE(glIsVertexArrayAPPLE);
  // GLAPI void APIENTRY glVertexArrayRangeAPPLE (GLsizei length, void
  // *pointer);
  VKFUNDEFINE(glVertexArrayRangeAPPLE);
  // GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE (GLsizei length, void
  // *pointer);
  VKFUNDEFINE(glFlushVertexArrayRangeAPPLE);
  // GLAPI void APIENTRY glVertexArrayParameteriAPPLE (GLenum pname, GLint
  // param);
  VKFUNDEFINE(glVertexArrayParameteriAPPLE);
  // GLAPI void APIENTRY glEnableVertexAttribAPPLE (GLuint index, GLenum pname);
  VKFUNDEFINE(glEnableVertexAttribAPPLE);
  // GLAPI void APIENTRY glDisableVertexAttribAPPLE (GLuint index, GLenum
  // pname);
  VKFUNDEFINE(glDisableVertexAttribAPPLE);
  // GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint index, GLenum
  // pname);
  VKFUNDEFINE(glIsVertexAttribEnabledAPPLE);
  // GLAPI void APIENTRY glMapVertexAttrib1dAPPLE (GLuint index, GLuint size,
  // GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble
  // *points);
  VKFUNDEFINE(glMapVertexAttrib1dAPPLE);
  // GLAPI void APIENTRY glMapVertexAttrib1fAPPLE (GLuint index, GLuint size,
  // GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
  VKFUNDEFINE(glMapVertexAttrib1fAPPLE);
  // GLAPI void APIENTRY glMapVertexAttrib2dAPPLE (GLuint index, GLuint size,
  // GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1,
  // GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
  VKFUNDEFINE(glMapVertexAttrib2dAPPLE);
  // GLAPI void APIENTRY glMapVertexAttrib2fAPPLE (GLuint index, GLuint size,
  // GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat
  // v2, GLint vstride, GLint vorder, const GLfloat *points);
  VKFUNDEFINE(glMapVertexAttrib2fAPPLE);
  // GLAPI void APIENTRY glDrawBuffersATI (GLsizei n, const GLenum *bufs);
  VKFUNDEFINE(glDrawBuffersATI);
  // GLAPI void APIENTRY glElementPointerATI (GLenum type, const void *pointer);
  VKFUNDEFINE(glElementPointerATI);
  // GLAPI void APIENTRY glDrawElementArrayATI (GLenum mode, GLsizei count);
  VKFUNDEFINE(glDrawElementArrayATI);
  // GLAPI void APIENTRY glDrawRangeElementArrayATI (GLenum mode, GLuint start,
  // GLuint end, GLsizei count);
  VKFUNDEFINE(glDrawRangeElementArrayATI);
  // GLAPI void APIENTRY glTexBumpParameterivATI (GLenum pname, const GLint
  // *param);
  VKFUNDEFINE(glTexBumpParameterivATI);
  // GLAPI void APIENTRY glTexBumpParameterfvATI (GLenum pname, const GLfloat
  // *param);
  VKFUNDEFINE(glTexBumpParameterfvATI);
  // GLAPI void APIENTRY glGetTexBumpParameterivATI (GLenum pname, GLint
  // *param);
  VKFUNDEFINE(glGetTexBumpParameterivATI);
  // GLAPI void APIENTRY glGetTexBumpParameterfvATI (GLenum pname, GLfloat
  // *param);
  VKFUNDEFINE(glGetTexBumpParameterfvATI);
  // GLAPI GLuint APIENTRY glGenFragmentShadersATI (GLuint range);
  VKFUNDEFINE(glGenFragmentShadersATI);
  // GLAPI void APIENTRY glBindFragmentShaderATI (GLuint id);
  VKFUNDEFINE(glBindFragmentShaderATI);
  // GLAPI void APIENTRY glDeleteFragmentShaderATI (GLuint id);
  VKFUNDEFINE(glDeleteFragmentShaderATI);
  // GLAPI void APIENTRY glBeginFragmentShaderATI (void);
  VKFUNDEFINE(glBeginFragmentShaderATI);
  // GLAPI void APIENTRY glEndFragmentShaderATI (void);
  VKFUNDEFINE(glEndFragmentShaderATI);
  // GLAPI void APIENTRY glPassTexCoordATI (GLuint dst, GLuint coord, GLenum
  // swizzle);
  VKFUNDEFINE(glPassTexCoordATI);
  // GLAPI void APIENTRY glSampleMapATI (GLuint dst, GLuint interp, GLenum
  // swizzle);
  VKFUNDEFINE(glSampleMapATI);
  // GLAPI void APIENTRY glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint
  // dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
  VKFUNDEFINE(glColorFragmentOp1ATI);
  // GLAPI void APIENTRY glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint
  // dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint
  // arg2, GLuint arg2Rep, GLuint arg2Mod);
  VKFUNDEFINE(glColorFragmentOp2ATI);
  // GLAPI void APIENTRY glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint
  // dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint
  // arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint
  // arg3Mod);
  VKFUNDEFINE(glColorFragmentOp3ATI);
  // GLAPI void APIENTRY glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint
  // dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
  VKFUNDEFINE(glAlphaFragmentOp1ATI);
  // GLAPI void APIENTRY glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint
  // dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint
  // arg2Rep, GLuint arg2Mod);
  VKFUNDEFINE(glAlphaFragmentOp2ATI);
  // GLAPI void APIENTRY glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint
  // dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint
  // arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
  VKFUNDEFINE(glAlphaFragmentOp3ATI);
  // GLAPI void APIENTRY glSetFragmentShaderConstantATI (GLuint dst, const
  // GLfloat *value);
  VKFUNDEFINE(glSetFragmentShaderConstantATI);
  // GLAPI void *APIENTRY glMapObjectBufferATI (GLuint buffer);
  VKFUNDEFINE(glMapObjectBufferATI);
  // GLAPI void APIENTRY glUnmapObjectBufferATI (GLuint buffer);
  VKFUNDEFINE(glUnmapObjectBufferATI);
  // GLAPI void APIENTRY glPNTrianglesiATI (GLenum pname, GLint param);
  VKFUNDEFINE(glPNTrianglesiATI);
  // GLAPI void APIENTRY glPNTrianglesfATI (GLenum pname, GLfloat param);
  VKFUNDEFINE(glPNTrianglesfATI);
  // GLAPI void APIENTRY glStencilOpSeparateATI (GLenum face, GLenum sfail,
  // GLenum dpfail, GLenum dppass);
  VKFUNDEFINE(glStencilOpSeparateATI);
  // GLAPI void APIENTRY glStencilFuncSeparateATI (GLenum frontfunc, GLenum
  // backfunc, GLint ref, GLuint mask);
  VKFUNDEFINE(glStencilFuncSeparateATI);
  // GLAPI GLuint APIENTRY glNewObjectBufferATI (GLsizei size, const void
  // *pointer, GLenum usage);
  VKFUNDEFINE(glNewObjectBufferATI);
  // GLAPI GLboolean APIENTRY glIsObjectBufferATI (GLuint buffer);
  VKFUNDEFINE(glIsObjectBufferATI);
  // GLAPI void APIENTRY glUpdateObjectBufferATI (GLuint buffer, GLuint offset,
  // GLsizei size, const void *pointer, GLenum preserve);
  VKFUNDEFINE(glUpdateObjectBufferATI);
  // GLAPI void APIENTRY glGetObjectBufferfvATI (GLuint buffer, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetObjectBufferfvATI);
  // GLAPI void APIENTRY glGetObjectBufferivATI (GLuint buffer, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetObjectBufferivATI);
  // GLAPI void APIENTRY glFreeObjectBufferATI (GLuint buffer);
  VKFUNDEFINE(glFreeObjectBufferATI);
  // GLAPI void APIENTRY glArrayObjectATI (GLenum array, GLint size, GLenum
  // type, GLsizei stride, GLuint buffer, GLuint offset);
  VKFUNDEFINE(glArrayObjectATI);
  // GLAPI void APIENTRY glGetArrayObjectfvATI (GLenum array, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetArrayObjectfvATI);
  // GLAPI void APIENTRY glGetArrayObjectivATI (GLenum array, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetArrayObjectivATI);
  // GLAPI void APIENTRY glVariantArrayObjectATI (GLuint id, GLenum type,
  // GLsizei stride, GLuint buffer, GLuint offset);
  VKFUNDEFINE(glVariantArrayObjectATI);
  // GLAPI void APIENTRY glGetVariantArrayObjectfvATI (GLuint id, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetVariantArrayObjectfvATI);
  // GLAPI void APIENTRY glGetVariantArrayObjectivATI (GLuint id, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetVariantArrayObjectivATI);
  // GLAPI void APIENTRY glVertexAttribArrayObjectATI (GLuint index, GLint size,
  // GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint
  // offset);
  VKFUNDEFINE(glVertexAttribArrayObjectATI);
  // GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetVertexAttribArrayObjectfvATI);
  // GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI (GLuint index, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetVertexAttribArrayObjectivATI);
  // GLAPI void APIENTRY glVertexStream1sATI (GLenum stream, GLshort x);
  VKFUNDEFINE(glVertexStream1sATI);
  // GLAPI void APIENTRY glVertexStream1svATI (GLenum stream, const GLshort
  // *coords);
  VKFUNDEFINE(glVertexStream1svATI);
  // GLAPI void APIENTRY glVertexStream1iATI (GLenum stream, GLint x);
  VKFUNDEFINE(glVertexStream1iATI);
  // GLAPI void APIENTRY glVertexStream1ivATI (GLenum stream, const GLint
  // *coords);
  VKFUNDEFINE(glVertexStream1ivATI);
  // GLAPI void APIENTRY glVertexStream1fATI (GLenum stream, GLfloat x);
  VKFUNDEFINE(glVertexStream1fATI);
  // GLAPI void APIENTRY glVertexStream1fvATI (GLenum stream, const GLfloat
  // *coords);
  VKFUNDEFINE(glVertexStream1fvATI);
  // GLAPI void APIENTRY glVertexStream1dATI (GLenum stream, GLdouble x);
  VKFUNDEFINE(glVertexStream1dATI);
  // GLAPI void APIENTRY glVertexStream1dvATI (GLenum stream, const GLdouble
  // *coords);
  VKFUNDEFINE(glVertexStream1dvATI);
  // GLAPI void APIENTRY glVertexStream2sATI (GLenum stream, GLshort x, GLshort
  // y);
  VKFUNDEFINE(glVertexStream2sATI);
  // GLAPI void APIENTRY glVertexStream2svATI (GLenum stream, const GLshort
  // *coords);
  VKFUNDEFINE(glVertexStream2svATI);
  // GLAPI void APIENTRY glVertexStream2iATI (GLenum stream, GLint x, GLint y);
  VKFUNDEFINE(glVertexStream2iATI);
  // GLAPI void APIENTRY glVertexStream2ivATI (GLenum stream, const GLint
  // *coords);
  VKFUNDEFINE(glVertexStream2ivATI);
  // GLAPI void APIENTRY glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat
  // y);
  VKFUNDEFINE(glVertexStream2fATI);
  // GLAPI void APIENTRY glVertexStream2fvATI (GLenum stream, const GLfloat
  // *coords);
  VKFUNDEFINE(glVertexStream2fvATI);
  // GLAPI void APIENTRY glVertexStream2dATI (GLenum stream, GLdouble x,
  // GLdouble y);
  VKFUNDEFINE(glVertexStream2dATI);
  // GLAPI void APIENTRY glVertexStream2dvATI (GLenum stream, const GLdouble
  // *coords);
  VKFUNDEFINE(glVertexStream2dvATI);
  // GLAPI void APIENTRY glVertexStream3sATI (GLenum stream, GLshort x, GLshort
  // y, GLshort z);
  VKFUNDEFINE(glVertexStream3sATI);
  // GLAPI void APIENTRY glVertexStream3svATI (GLenum stream, const GLshort
  // *coords);
  VKFUNDEFINE(glVertexStream3svATI);
  // GLAPI void APIENTRY glVertexStream3iATI (GLenum stream, GLint x, GLint y,
  // GLint z);
  VKFUNDEFINE(glVertexStream3iATI);
  // GLAPI void APIENTRY glVertexStream3ivATI (GLenum stream, const GLint
  // *coords);
  VKFUNDEFINE(glVertexStream3ivATI);
  // GLAPI void APIENTRY glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat
  // y, GLfloat z);
  VKFUNDEFINE(glVertexStream3fATI);
  // GLAPI void APIENTRY glVertexStream3fvATI (GLenum stream, const GLfloat
  // *coords);
  VKFUNDEFINE(glVertexStream3fvATI);
  // GLAPI void APIENTRY glVertexStream3dATI (GLenum stream, GLdouble x,
  // GLdouble y, GLdouble z);
  VKFUNDEFINE(glVertexStream3dATI);
  // GLAPI void APIENTRY glVertexStream3dvATI (GLenum stream, const GLdouble
  // *coords);
  VKFUNDEFINE(glVertexStream3dvATI);
  // GLAPI void APIENTRY glVertexStream4sATI (GLenum stream, GLshort x, GLshort
  // y, GLshort z, GLshort w);
  VKFUNDEFINE(glVertexStream4sATI);
  // GLAPI void APIENTRY glVertexStream4svATI (GLenum stream, const GLshort
  // *coords);
  VKFUNDEFINE(glVertexStream4svATI);
  // GLAPI void APIENTRY glVertexStream4iATI (GLenum stream, GLint x, GLint y,
  // GLint z, GLint w);
  VKFUNDEFINE(glVertexStream4iATI);
  // GLAPI void APIENTRY glVertexStream4ivATI (GLenum stream, const GLint
  // *coords);
  VKFUNDEFINE(glVertexStream4ivATI);
  // GLAPI void APIENTRY glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat
  // y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glVertexStream4fATI);
  // GLAPI void APIENTRY glVertexStream4fvATI (GLenum stream, const GLfloat
  // *coords);
  VKFUNDEFINE(glVertexStream4fvATI);
  // GLAPI void APIENTRY glVertexStream4dATI (GLenum stream, GLdouble x,
  // GLdouble y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glVertexStream4dATI);
  // GLAPI void APIENTRY glVertexStream4dvATI (GLenum stream, const GLdouble
  // *coords);
  VKFUNDEFINE(glVertexStream4dvATI);
  // GLAPI void APIENTRY glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte
  // ny, GLbyte nz);
  VKFUNDEFINE(glNormalStream3bATI);
  // GLAPI void APIENTRY glNormalStream3bvATI (GLenum stream, const GLbyte
  // *coords);
  VKFUNDEFINE(glNormalStream3bvATI);
  // GLAPI void APIENTRY glNormalStream3sATI (GLenum stream, GLshort nx, GLshort
  // ny, GLshort nz);
  VKFUNDEFINE(glNormalStream3sATI);
  // GLAPI void APIENTRY glNormalStream3svATI (GLenum stream, const GLshort
  // *coords);
  VKFUNDEFINE(glNormalStream3svATI);
  // GLAPI void APIENTRY glNormalStream3iATI (GLenum stream, GLint nx, GLint ny,
  // GLint nz);
  VKFUNDEFINE(glNormalStream3iATI);
  // GLAPI void APIENTRY glNormalStream3ivATI (GLenum stream, const GLint
  // *coords);
  VKFUNDEFINE(glNormalStream3ivATI);
  // GLAPI void APIENTRY glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat
  // ny, GLfloat nz);
  VKFUNDEFINE(glNormalStream3fATI);
  // GLAPI void APIENTRY glNormalStream3fvATI (GLenum stream, const GLfloat
  // *coords);
  VKFUNDEFINE(glNormalStream3fvATI);
  // GLAPI void APIENTRY glNormalStream3dATI (GLenum stream, GLdouble nx,
  // GLdouble ny, GLdouble nz);
  VKFUNDEFINE(glNormalStream3dATI);
  // GLAPI void APIENTRY glNormalStream3dvATI (GLenum stream, const GLdouble
  // *coords);
  VKFUNDEFINE(glNormalStream3dvATI);
  // GLAPI void APIENTRY glClientActiveVertexStreamATI (GLenum stream);
  VKFUNDEFINE(glClientActiveVertexStreamATI);
  // GLAPI void APIENTRY glVertexBlendEnviATI (GLenum pname, GLint param);
  VKFUNDEFINE(glVertexBlendEnviATI);
  // GLAPI void APIENTRY glVertexBlendEnvfATI (GLenum pname, GLfloat param);
  VKFUNDEFINE(glVertexBlendEnvfATI);
  // GLAPI void APIENTRY glEGLImageTargetTexStorageEXT (GLenum target,
  // GLeglImageOES image, const GLint* attrib_list);
  VKFUNDEFINE(glEGLImageTargetTexStorageEXT);
  // GLAPI void APIENTRY glEGLImageTargetTextureStorageEXT (GLuint texture,
  // GLeglImageOES image, const GLint* attrib_list);
  VKFUNDEFINE(glEGLImageTargetTextureStorageEXT);
  // GLAPI void APIENTRY glUniformBufferEXT (GLuint program, GLint location,
  // GLuint buffer);
  VKFUNDEFINE(glUniformBufferEXT);
  // GLAPI GLint APIENTRY glGetUniformBufferSizeEXT (GLuint program, GLint
  // location);
  VKFUNDEFINE(glGetUniformBufferSizeEXT);
  // GLAPI GLintptr APIENTRY glGetUniformOffsetEXT (GLuint program, GLint
  // location);
  VKFUNDEFINE(glGetUniformOffsetEXT);
  // GLAPI void APIENTRY glBlendColorEXT (GLfloat red, GLfloat green, GLfloat
  // blue, GLfloat alpha);
  VKFUNDEFINE(glBlendColorEXT);
  // GLAPI void APIENTRY glBlendEquationSeparateEXT (GLenum modeRGB, GLenum
  // modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparateEXT);
  // GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum
  // dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  VKFUNDEFINE(glBlendFuncSeparateEXT);
  // GLAPI void APIENTRY glBlendEquationEXT (GLenum mode);
  VKFUNDEFINE(glBlendEquationEXT);
  // GLAPI void APIENTRY glColorSubTableEXT (GLenum target, GLsizei start,
  // GLsizei count, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glColorSubTableEXT);
  // GLAPI void APIENTRY glCopyColorSubTableEXT (GLenum target, GLsizei start,
  // GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyColorSubTableEXT);
  // GLAPI void APIENTRY glLockArraysEXT (GLint first, GLsizei count);
  VKFUNDEFINE(glLockArraysEXT);
  // GLAPI void APIENTRY glUnlockArraysEXT (void);
  VKFUNDEFINE(glUnlockArraysEXT);
  // GLAPI void APIENTRY glConvolutionFilter1DEXT (GLenum target, GLenum
  // internalformat, GLsizei width, GLenum format, GLenum type, const void
  // *image);
  VKFUNDEFINE(glConvolutionFilter1DEXT);
  // GLAPI void APIENTRY glConvolutionFilter2DEXT (GLenum target, GLenum
  // internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,
  // const void *image);
  VKFUNDEFINE(glConvolutionFilter2DEXT);
  // GLAPI void APIENTRY glConvolutionParameterfEXT (GLenum target, GLenum
  // pname, GLfloat params);
  VKFUNDEFINE(glConvolutionParameterfEXT);
  // GLAPI void APIENTRY glConvolutionParameterfvEXT (GLenum target, GLenum
  // pname, const GLfloat *params);
  VKFUNDEFINE(glConvolutionParameterfvEXT);
  // GLAPI void APIENTRY glConvolutionParameteriEXT (GLenum target, GLenum
  // pname, GLint params);
  VKFUNDEFINE(glConvolutionParameteriEXT);
  // GLAPI void APIENTRY glConvolutionParameterivEXT (GLenum target, GLenum
  // pname, const GLint *params);
  VKFUNDEFINE(glConvolutionParameterivEXT);
  // GLAPI void APIENTRY glCopyConvolutionFilter1DEXT (GLenum target, GLenum
  // internalformat, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyConvolutionFilter1DEXT);
  // GLAPI void APIENTRY glCopyConvolutionFilter2DEXT (GLenum target, GLenum
  // internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyConvolutionFilter2DEXT);
  // GLAPI void APIENTRY glGetConvolutionFilterEXT (GLenum target, GLenum
  // format, GLenum type, void *image);
  VKFUNDEFINE(glGetConvolutionFilterEXT);
  // GLAPI void APIENTRY glGetConvolutionParameterfvEXT (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetConvolutionParameterfvEXT);
  // GLAPI void APIENTRY glGetConvolutionParameterivEXT (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetConvolutionParameterivEXT);
  // GLAPI void APIENTRY glGetSeparableFilterEXT (GLenum target, GLenum format,
  // GLenum type, void *row, void *column, void *span);
  VKFUNDEFINE(glGetSeparableFilterEXT);
  // GLAPI void APIENTRY glSeparableFilter2DEXT (GLenum target, GLenum
  // internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,
  // const void *row, const void *column);
  VKFUNDEFINE(glSeparableFilter2DEXT);
  // GLAPI void APIENTRY glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz);
  VKFUNDEFINE(glTangent3bEXT);
  // GLAPI void APIENTRY glTangent3bvEXT (const GLbyte *v);
  VKFUNDEFINE(glTangent3bvEXT);
  // GLAPI void APIENTRY glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz);
  VKFUNDEFINE(glTangent3dEXT);
  // GLAPI void APIENTRY glTangent3dvEXT (const GLdouble *v);
  VKFUNDEFINE(glTangent3dvEXT);
  // GLAPI void APIENTRY glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz);
  VKFUNDEFINE(glTangent3fEXT);
  // GLAPI void APIENTRY glTangent3fvEXT (const GLfloat *v);
  VKFUNDEFINE(glTangent3fvEXT);
  // GLAPI void APIENTRY glTangent3iEXT (GLint tx, GLint ty, GLint tz);
  VKFUNDEFINE(glTangent3iEXT);
  // GLAPI void APIENTRY glTangent3ivEXT (const GLint *v);
  VKFUNDEFINE(glTangent3ivEXT);
  // GLAPI void APIENTRY glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz);
  VKFUNDEFINE(glTangent3sEXT);
  // GLAPI void APIENTRY glTangent3svEXT (const GLshort *v);
  VKFUNDEFINE(glTangent3svEXT);
  // GLAPI void APIENTRY glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz);
  VKFUNDEFINE(glBinormal3bEXT);
  // GLAPI void APIENTRY glBinormal3bvEXT (const GLbyte *v);
  VKFUNDEFINE(glBinormal3bvEXT);
  // GLAPI void APIENTRY glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble
  // bz);
  VKFUNDEFINE(glBinormal3dEXT);
  // GLAPI void APIENTRY glBinormal3dvEXT (const GLdouble *v);
  VKFUNDEFINE(glBinormal3dvEXT);
  // GLAPI void APIENTRY glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz);
  VKFUNDEFINE(glBinormal3fEXT);
  // GLAPI void APIENTRY glBinormal3fvEXT (const GLfloat *v);
  VKFUNDEFINE(glBinormal3fvEXT);
  // GLAPI void APIENTRY glBinormal3iEXT (GLint bx, GLint by, GLint bz);
  VKFUNDEFINE(glBinormal3iEXT);
  // GLAPI void APIENTRY glBinormal3ivEXT (const GLint *v);
  VKFUNDEFINE(glBinormal3ivEXT);
  // GLAPI void APIENTRY glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz);
  VKFUNDEFINE(glBinormal3sEXT);
  // GLAPI void APIENTRY glBinormal3svEXT (const GLshort *v);
  VKFUNDEFINE(glBinormal3svEXT);
  // GLAPI void APIENTRY glTangentPointerEXT (GLenum type, GLsizei stride, const
  // void *pointer);
  VKFUNDEFINE(glTangentPointerEXT);
  // GLAPI void APIENTRY glBinormalPointerEXT (GLenum type, GLsizei stride,
  // const void *pointer);
  VKFUNDEFINE(glBinormalPointerEXT);
  // GLAPI void APIENTRY glCopyTexImage1DEXT (GLenum target, GLint level, GLenum
  // internalformat, GLint x, GLint y, GLsizei width, GLint border);
  VKFUNDEFINE(glCopyTexImage1DEXT);
  // GLAPI void APIENTRY glCopyTexImage2DEXT (GLenum target, GLint level, GLenum
  // internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint
  // border);
  VKFUNDEFINE(glCopyTexImage2DEXT);
  // GLAPI void APIENTRY glCopyTexSubImage1DEXT (GLenum target, GLint level,
  // GLint xoffset, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyTexSubImage1DEXT);
  // GLAPI void APIENTRY glCopyTexSubImage2DEXT (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glCopyTexSubImage2DEXT);
  // GLAPI void APIENTRY glCopyTexSubImage3DEXT (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei
  // width, GLsizei height);
  VKFUNDEFINE(glCopyTexSubImage3DEXT);
  // GLAPI void APIENTRY glCullParameterdvEXT (GLenum pname, GLdouble *params);
  VKFUNDEFINE(glCullParameterdvEXT);
  // GLAPI void APIENTRY glCullParameterfvEXT (GLenum pname, GLfloat *params);
  VKFUNDEFINE(glCullParameterfvEXT);
  // GLAPI void APIENTRY glLabelObjectEXT (GLenum type, GLuint object, GLsizei
  // length, const GLchar *label);
  VKFUNDEFINE(glLabelObjectEXT);
  // GLAPI void APIENTRY glGetObjectLabelEXT (GLenum type, GLuint object,
  // GLsizei bufSize, GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectLabelEXT);
  // GLAPI void APIENTRY glInsertEventMarkerEXT (GLsizei length, const GLchar
  // *marker);
  VKFUNDEFINE(glInsertEventMarkerEXT);
  // GLAPI void APIENTRY glPushGroupMarkerEXT (GLsizei length, const GLchar
  // *marker);
  VKFUNDEFINE(glPushGroupMarkerEXT);
  // GLAPI void APIENTRY glPopGroupMarkerEXT (void);
  VKFUNDEFINE(glPopGroupMarkerEXT);
  // GLAPI void APIENTRY glDepthBoundsEXT (GLclampd zmin, GLclampd zmax);
  VKFUNDEFINE(glDepthBoundsEXT);
  // GLAPI void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m);
  VKFUNDEFINE(glMatrixLoadfEXT);
  // GLAPI void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m);
  VKFUNDEFINE(glMatrixLoaddEXT);
  // GLAPI void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m);
  VKFUNDEFINE(glMatrixMultfEXT);
  // GLAPI void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m);
  VKFUNDEFINE(glMatrixMultdEXT);
  // GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum mode);
  VKFUNDEFINE(glMatrixLoadIdentityEXT);
  // GLAPI void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat
  // x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glMatrixRotatefEXT);
  // GLAPI void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle,
  // GLdouble x, GLdouble y, GLdouble z);
  VKFUNDEFINE(glMatrixRotatedEXT);
  // GLAPI void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y,
  // GLfloat z);
  VKFUNDEFINE(glMatrixScalefEXT);
  // GLAPI void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y,
  // GLdouble z);
  VKFUNDEFINE(glMatrixScaledEXT);
  // GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat
  // y, GLfloat z);
  VKFUNDEFINE(glMatrixTranslatefEXT);
  // GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x,
  // GLdouble y, GLdouble z);
  VKFUNDEFINE(glMatrixTranslatedEXT);
  // GLAPI void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left,
  // GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble
  // zFar);
  VKFUNDEFINE(glMatrixFrustumEXT);
  // GLAPI void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble
  // right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
  VKFUNDEFINE(glMatrixOrthoEXT);
  // GLAPI void APIENTRY glMatrixPopEXT (GLenum mode);
  VKFUNDEFINE(glMatrixPopEXT);
  // GLAPI void APIENTRY glMatrixPushEXT (GLenum mode);
  VKFUNDEFINE(glMatrixPushEXT);
  // GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield mask);
  VKFUNDEFINE(glClientAttribDefaultEXT);
  // GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask);
  VKFUNDEFINE(glPushClientAttribDefaultEXT);
  // GLAPI void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target,
  // GLenum pname, GLfloat param);
  VKFUNDEFINE(glTextureParameterfEXT);
  // GLAPI void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target,
  // GLenum pname, const GLfloat *params);
  VKFUNDEFINE(glTextureParameterfvEXT);
  // GLAPI void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target,
  // GLenum pname, GLint param);
  VKFUNDEFINE(glTextureParameteriEXT);
  // GLAPI void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target,
  // GLenum pname, const GLint *params);
  VKFUNDEFINE(glTextureParameterivEXT);
  // GLAPI void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target,
  // GLint level, GLint internalformat, GLsizei width, GLint border, GLenum
  // format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTextureImage1DEXT);
  // GLAPI void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target,
  // GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint
  // border, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTextureImage2DEXT);
  // GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target,
  // GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type,
  // const void *pixels);
  VKFUNDEFINE(glTextureSubImage1DEXT);
  // GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target,
  // GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height,
  // GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTextureSubImage2DEXT);
  // GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target,
  // GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint
  // border);
  VKFUNDEFINE(glCopyTextureImage1DEXT);
  // GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target,
  // GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width,
  // GLsizei height, GLint border);
  VKFUNDEFINE(glCopyTextureImage2DEXT);
  // GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum
  // target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyTextureSubImage1DEXT);
  // GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum
  // target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y,
  // GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyTextureSubImage2DEXT);
  // GLAPI void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target,
  // GLint level, GLenum format, GLenum type, void *pixels);
  VKFUNDEFINE(glGetTextureImageEXT);
  // GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum
  // target, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetTextureParameterfvEXT);
  // GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum
  // target, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetTextureParameterivEXT);
  // GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum
  // target, GLint level, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetTextureLevelParameterfvEXT);
  // GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum
  // target, GLint level, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetTextureLevelParameterivEXT);
  // GLAPI void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target,
  // GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei
  // depth, GLint border, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTextureImage3DEXT);
  // GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target,
  // GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width,
  // GLsizei height, GLsizei depth, GLenum format, GLenum type, const void
  // *pixels);
  VKFUNDEFINE(glTextureSubImage3DEXT);
  // GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum
  // target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x,
  // GLint y, GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyTextureSubImage3DEXT);
  // GLAPI void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target,
  // GLuint texture);
  VKFUNDEFINE(glBindMultiTextureEXT);
  // GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size,
  // GLenum type, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glMultiTexCoordPointerEXT);
  // GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target,
  // GLenum pname, GLfloat param);
  VKFUNDEFINE(glMultiTexEnvfEXT);
  // GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target,
  // GLenum pname, const GLfloat *params);
  VKFUNDEFINE(glMultiTexEnvfvEXT);
  // GLAPI void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target,
  // GLenum pname, GLint param);
  VKFUNDEFINE(glMultiTexEnviEXT);
  // GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target,
  // GLenum pname, const GLint *params);
  VKFUNDEFINE(glMultiTexEnvivEXT);
  // GLAPI void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum
  // pname, GLdouble param);
  VKFUNDEFINE(glMultiTexGendEXT);
  // GLAPI void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord,
  // GLenum pname, const GLdouble *params);
  VKFUNDEFINE(glMultiTexGendvEXT);
  // GLAPI void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum
  // pname, GLfloat param);
  VKFUNDEFINE(glMultiTexGenfEXT);
  // GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord,
  // GLenum pname, const GLfloat *params);
  VKFUNDEFINE(glMultiTexGenfvEXT);
  // GLAPI void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum
  // pname, GLint param);
  VKFUNDEFINE(glMultiTexGeniEXT);
  // GLAPI void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord,
  // GLenum pname, const GLint *params);
  VKFUNDEFINE(glMultiTexGenivEXT);
  // GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target,
  // GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetMultiTexEnvfvEXT);
  // GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMultiTexEnvivEXT);
  // GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord,
  // GLenum pname, GLdouble *params);
  VKFUNDEFINE(glGetMultiTexGendvEXT);
  // GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord,
  // GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetMultiTexGenfvEXT);
  // GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMultiTexGenivEXT);
  // GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target,
  // GLenum pname, GLint param);
  VKFUNDEFINE(glMultiTexParameteriEXT);
  // GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum
  // target, GLenum pname, const GLint *params);
  VKFUNDEFINE(glMultiTexParameterivEXT);
  // GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target,
  // GLenum pname, GLfloat param);
  VKFUNDEFINE(glMultiTexParameterfEXT);
  // GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum
  // target, GLenum pname, const GLfloat *params);
  VKFUNDEFINE(glMultiTexParameterfvEXT);
  // GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target,
  // GLint level, GLint internalformat, GLsizei width, GLint border, GLenum
  // format, GLenum type, const void *pixels);
  VKFUNDEFINE(glMultiTexImage1DEXT);
  // GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target,
  // GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint
  // border, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glMultiTexImage2DEXT);
  // GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target,
  // GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type,
  // const void *pixels);
  VKFUNDEFINE(glMultiTexSubImage1DEXT);
  // GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target,
  // GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height,
  // GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glMultiTexSubImage2DEXT);
  // GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum
  // target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei
  // width, GLint border);
  VKFUNDEFINE(glCopyMultiTexImage1DEXT);
  // GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum
  // target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei
  // width, GLsizei height, GLint border);
  VKFUNDEFINE(glCopyMultiTexImage2DEXT);
  // GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum
  // target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyMultiTexSubImage1DEXT);
  // GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum
  // target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y,
  // GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyMultiTexSubImage2DEXT);
  // GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target,
  // GLint level, GLenum format, GLenum type, void *pixels);
  VKFUNDEFINE(glGetMultiTexImageEXT);
  // GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum
  // target, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetMultiTexParameterfvEXT);
  // GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum
  // target, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMultiTexParameterivEXT);
  // GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit,
  // GLenum target, GLint level, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetMultiTexLevelParameterfvEXT);
  // GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit,
  // GLenum target, GLint level, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMultiTexLevelParameterivEXT);
  // GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target,
  // GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei
  // depth, GLint border, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glMultiTexImage3DEXT);
  // GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target,
  // GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width,
  // GLsizei height, GLsizei depth, GLenum format, GLenum type, const void
  // *pixels);
  VKFUNDEFINE(glMultiTexSubImage3DEXT);
  // GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum
  // target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x,
  // GLint y, GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyMultiTexSubImage3DEXT);
  // GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint
  // index);
  VKFUNDEFINE(glEnableClientStateIndexedEXT);
  // GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint
  // index);
  VKFUNDEFINE(glDisableClientStateIndexedEXT);
  // GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index,
  // GLfloat *data);
  VKFUNDEFINE(glGetFloatIndexedvEXT);
  // GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index,
  // GLdouble *data);
  VKFUNDEFINE(glGetDoubleIndexedvEXT);
  // GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index,
  // void **data);
  VKFUNDEFINE(glGetPointerIndexedvEXT);
  // GLAPI void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index);
  VKFUNDEFINE(glEnableIndexedEXT);
  // GLAPI void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index);
  VKFUNDEFINE(glDisableIndexedEXT);
  // GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint
  // index);
  VKFUNDEFINE(glIsEnabledIndexedEXT);
  // GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index,
  // GLint *data);
  VKFUNDEFINE(glGetIntegerIndexedvEXT);
  // GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index,
  // GLboolean *data);
  VKFUNDEFINE(glGetBooleanIndexedvEXT);
  // GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum
  // target, GLint level, GLenum internalformat, GLsizei width, GLsizei height,
  // GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedTextureImage3DEXT);
  // GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum
  // target, GLint level, GLenum internalformat, GLsizei width, GLsizei height,
  // GLint border, GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedTextureImage2DEXT);
  // GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum
  // target, GLint level, GLenum internalformat, GLsizei width, GLint border,
  // GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedTextureImage1DEXT);
  // GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture,
  // GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,
  // GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei
  // imageSize, const void *bits);
  VKFUNDEFINE(glCompressedTextureSubImage3DEXT);
  // GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture,
  // GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,
  // GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedTextureSubImage2DEXT);
  // GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture,
  // GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format,
  // GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedTextureSubImage1DEXT);
  // GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum
  // target, GLint lod, void *img);
  VKFUNDEFINE(glGetCompressedTextureImageEXT);
  // GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum
  // target, GLint level, GLenum internalformat, GLsizei width, GLsizei height,
  // GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedMultiTexImage3DEXT);
  // GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum
  // target, GLint level, GLenum internalformat, GLsizei width, GLsizei height,
  // GLint border, GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedMultiTexImage2DEXT);
  // GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum
  // target, GLint level, GLenum internalformat, GLsizei width, GLint border,
  // GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedMultiTexImage1DEXT);
  // GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit,
  // GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,
  // GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei
  // imageSize, const void *bits);
  VKFUNDEFINE(glCompressedMultiTexSubImage3DEXT);
  // GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit,
  // GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,
  // GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedMultiTexSubImage2DEXT);
  // GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit,
  // GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format,
  // GLsizei imageSize, const void *bits);
  VKFUNDEFINE(glCompressedMultiTexSubImage1DEXT);
  // GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum
  // target, GLint lod, void *img);
  VKFUNDEFINE(glGetCompressedMultiTexImageEXT);
  // GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixLoadTransposefEXT);
  // GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble
  // *m);
  VKFUNDEFINE(glMatrixLoadTransposedEXT);
  // GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixMultTransposefEXT);
  // GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble
  // *m);
  VKFUNDEFINE(glMatrixMultTransposedEXT);
  // GLAPI void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size,
  // const void *data, GLenum usage);
  VKFUNDEFINE(glNamedBufferDataEXT);
  // GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr
  // offset, GLsizeiptr size, const void *data);
  VKFUNDEFINE(glNamedBufferSubDataEXT);
  // GLAPI void *APIENTRY glMapNamedBufferEXT (GLuint buffer, GLenum access);
  VKFUNDEFINE(glMapNamedBufferEXT);
  // GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer);
  VKFUNDEFINE(glUnmapNamedBufferEXT);
  // GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetNamedBufferParameterivEXT);
  // GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum
  // pname, void **params);
  VKFUNDEFINE(glGetNamedBufferPointervEXT);
  // GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr
  // offset, GLsizeiptr size, void *data);
  VKFUNDEFINE(glGetNamedBufferSubDataEXT);
  // GLAPI void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location,
  // GLfloat v0);
  VKFUNDEFINE(glProgramUniform1fEXT);
  // GLAPI void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location,
  // GLfloat v0, GLfloat v1);
  VKFUNDEFINE(glProgramUniform2fEXT);
  // GLAPI void APIENTRY glProgramUniform3fEXT (GLuint program, GLint location,
  // GLfloat v0, GLfloat v1, GLfloat v2);
  VKFUNDEFINE(glProgramUniform3fEXT);
  // GLAPI void APIENTRY glProgramUniform4fEXT (GLuint program, GLint location,
  // GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  VKFUNDEFINE(glProgramUniform4fEXT);
  // GLAPI void APIENTRY glProgramUniform1iEXT (GLuint program, GLint location,
  // GLint v0);
  VKFUNDEFINE(glProgramUniform1iEXT);
  // GLAPI void APIENTRY glProgramUniform2iEXT (GLuint program, GLint location,
  // GLint v0, GLint v1);
  VKFUNDEFINE(glProgramUniform2iEXT);
  // GLAPI void APIENTRY glProgramUniform3iEXT (GLuint program, GLint location,
  // GLint v0, GLint v1, GLint v2);
  VKFUNDEFINE(glProgramUniform3iEXT);
  // GLAPI void APIENTRY glProgramUniform4iEXT (GLuint program, GLint location,
  // GLint v0, GLint v1, GLint v2, GLint v3);
  VKFUNDEFINE(glProgramUniform4iEXT);
  // GLAPI void APIENTRY glProgramUniform1fvEXT (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform1fvEXT);
  // GLAPI void APIENTRY glProgramUniform2fvEXT (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform2fvEXT);
  // GLAPI void APIENTRY glProgramUniform3fvEXT (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform3fvEXT);
  // GLAPI void APIENTRY glProgramUniform4fvEXT (GLuint program, GLint location,
  // GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform4fvEXT);
  // GLAPI void APIENTRY glProgramUniform1ivEXT (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform1ivEXT);
  // GLAPI void APIENTRY glProgramUniform2ivEXT (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform2ivEXT);
  // GLAPI void APIENTRY glProgramUniform3ivEXT (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform3ivEXT);
  // GLAPI void APIENTRY glProgramUniform4ivEXT (GLuint program, GLint location,
  // GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform4ivEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix2fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix3fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix4fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x3fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x2fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x4fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x2fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x4fvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x3fvEXT);
  // GLAPI void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target,
  // GLenum internalformat, GLuint buffer);
  VKFUNDEFINE(glTextureBufferEXT);
  // GLAPI void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target,
  // GLenum internalformat, GLuint buffer);
  VKFUNDEFINE(glMultiTexBufferEXT);
  // GLAPI void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum
  // target, GLenum pname, const GLint *params);
  VKFUNDEFINE(glTextureParameterIivEXT);
  // GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum
  // target, GLenum pname, const GLuint *params);
  VKFUNDEFINE(glTextureParameterIuivEXT);
  // GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum
  // target, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetTextureParameterIivEXT);
  // GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum
  // target, GLenum pname, GLuint *params);
  VKFUNDEFINE(glGetTextureParameterIuivEXT);
  // GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum
  // target, GLenum pname, const GLint *params);
  VKFUNDEFINE(glMultiTexParameterIivEXT);
  // GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum
  // target, GLenum pname, const GLuint *params);
  VKFUNDEFINE(glMultiTexParameterIuivEXT);
  // GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum
  // target, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMultiTexParameterIivEXT);
  // GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum
  // target, GLenum pname, GLuint *params);
  VKFUNDEFINE(glGetMultiTexParameterIuivEXT);
  // GLAPI void APIENTRY glProgramUniform1uiEXT (GLuint program, GLint location,
  // GLuint v0);
  VKFUNDEFINE(glProgramUniform1uiEXT);
  // GLAPI void APIENTRY glProgramUniform2uiEXT (GLuint program, GLint location,
  // GLuint v0, GLuint v1);
  VKFUNDEFINE(glProgramUniform2uiEXT);
  // GLAPI void APIENTRY glProgramUniform3uiEXT (GLuint program, GLint location,
  // GLuint v0, GLuint v1, GLuint v2);
  VKFUNDEFINE(glProgramUniform3uiEXT);
  // GLAPI void APIENTRY glProgramUniform4uiEXT (GLuint program, GLint location,
  // GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  VKFUNDEFINE(glProgramUniform4uiEXT);
  // GLAPI void APIENTRY glProgramUniform1uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform1uivEXT);
  // GLAPI void APIENTRY glProgramUniform2uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform2uivEXT);
  // GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform3uivEXT);
  // GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform4uivEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program,
  // GLenum target, GLuint index, GLsizei count, const GLfloat *params);
  VKFUNDEFINE(glNamedProgramLocalParameters4fvEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program,
  // GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
  VKFUNDEFINE(glNamedProgramLocalParameterI4iEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program,
  // GLenum target, GLuint index, const GLint *params);
  VKFUNDEFINE(glNamedProgramLocalParameterI4ivEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program,
  // GLenum target, GLuint index, GLsizei count, const GLint *params);
  VKFUNDEFINE(glNamedProgramLocalParametersI4ivEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program,
  // GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  VKFUNDEFINE(glNamedProgramLocalParameterI4uiEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program,
  // GLenum target, GLuint index, const GLuint *params);
  VKFUNDEFINE(glNamedProgramLocalParameterI4uivEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program,
  // GLenum target, GLuint index, GLsizei count, const GLuint *params);
  VKFUNDEFINE(glNamedProgramLocalParametersI4uivEXT);
  // GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program,
  // GLenum target, GLuint index, GLint *params);
  VKFUNDEFINE(glGetNamedProgramLocalParameterIivEXT);
  // GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program,
  // GLenum target, GLuint index, GLuint *params);
  VKFUNDEFINE(glGetNamedProgramLocalParameterIuivEXT);
  // GLAPI void APIENTRY glEnableClientStateiEXT (GLenum array, GLuint index);
  VKFUNDEFINE(glEnableClientStateiEXT);
  // GLAPI void APIENTRY glDisableClientStateiEXT (GLenum array, GLuint index);
  VKFUNDEFINE(glDisableClientStateiEXT);
  // GLAPI void APIENTRY glGetFloati_vEXT (GLenum pname, GLuint index, GLfloat
  // *params);
  VKFUNDEFINE(glGetFloati_vEXT);
  // GLAPI void APIENTRY glGetDoublei_vEXT (GLenum pname, GLuint index, GLdouble
  // *params);
  VKFUNDEFINE(glGetDoublei_vEXT);
  // GLAPI void APIENTRY glGetPointeri_vEXT (GLenum pname, GLuint index, void
  // **params);
  VKFUNDEFINE(glGetPointeri_vEXT);
  // GLAPI void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target,
  // GLenum format, GLsizei len, const void *string);
  VKFUNDEFINE(glNamedProgramStringEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program,
  // GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble
  // w);
  VKFUNDEFINE(glNamedProgramLocalParameter4dEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program,
  // GLenum target, GLuint index, const GLdouble *params);
  VKFUNDEFINE(glNamedProgramLocalParameter4dvEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program,
  // GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glNamedProgramLocalParameter4fEXT);
  // GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program,
  // GLenum target, GLuint index, const GLfloat *params);
  VKFUNDEFINE(glNamedProgramLocalParameter4fvEXT);
  // GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program,
  // GLenum target, GLuint index, GLdouble *params);
  VKFUNDEFINE(glGetNamedProgramLocalParameterdvEXT);
  // GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program,
  // GLenum target, GLuint index, GLfloat *params);
  VKFUNDEFINE(glGetNamedProgramLocalParameterfvEXT);
  // GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetNamedProgramivEXT);
  // GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum
  // target, GLenum pname, void *string);
  VKFUNDEFINE(glGetNamedProgramStringEXT);
  // GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer,
  // GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glNamedRenderbufferStorageEXT);
  // GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint
  // renderbuffer, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetNamedRenderbufferParameterivEXT);
  // GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint
  // renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glNamedRenderbufferStorageMultisampleEXT);
  // GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT
  // (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glNamedRenderbufferStorageMultisampleCoverageEXT);
  // GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer,
  // GLenum target);
  VKFUNDEFINE(glCheckNamedFramebufferStatusEXT);
  // GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer,
  // GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  VKFUNDEFINE(glNamedFramebufferTexture1DEXT);
  // GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer,
  // GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  VKFUNDEFINE(glNamedFramebufferTexture2DEXT);
  // GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer,
  // GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint
  // zoffset);
  VKFUNDEFINE(glNamedFramebufferTexture3DEXT);
  // GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer,
  // GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  VKFUNDEFINE(glNamedFramebufferRenderbufferEXT);
  // GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint
  // framebuffer, GLenum attachment, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetNamedFramebufferAttachmentParameterivEXT);
  // GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum
  // target);
  VKFUNDEFINE(glGenerateTextureMipmapEXT);
  // GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum
  // target);
  VKFUNDEFINE(glGenerateMultiTexMipmapEXT);
  // GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum
  // mode);
  VKFUNDEFINE(glFramebufferDrawBufferEXT);
  // GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer,
  // GLsizei n, const GLenum *bufs);
  VKFUNDEFINE(glFramebufferDrawBuffersEXT);
  // GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum
  // mode);
  VKFUNDEFINE(glFramebufferReadBufferEXT);
  // GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferParameterivEXT);
  // GLAPI void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint
  // writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  VKFUNDEFINE(glNamedCopyBufferSubDataEXT);
  // GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer,
  // GLenum attachment, GLuint texture, GLint level);
  VKFUNDEFINE(glNamedFramebufferTextureEXT);
  // GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer,
  // GLenum attachment, GLuint texture, GLint level, GLint layer);
  VKFUNDEFINE(glNamedFramebufferTextureLayerEXT);
  // GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer,
  // GLenum attachment, GLuint texture, GLint level, GLenum face);
  VKFUNDEFINE(glNamedFramebufferTextureFaceEXT);
  // GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum
  // target, GLuint renderbuffer);
  VKFUNDEFINE(glTextureRenderbufferEXT);
  // GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum
  // target, GLuint renderbuffer);
  VKFUNDEFINE(glMultiTexRenderbufferEXT);
  // GLAPI void APIENTRY glVertexArrayVertexOffsetEXT (GLuint vaobj, GLuint
  // buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayVertexOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayColorOffsetEXT (GLuint vaobj, GLuint
  // buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayColorOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayEdgeFlagOffsetEXT (GLuint vaobj, GLuint
  // buffer, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayEdgeFlagOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayIndexOffsetEXT (GLuint vaobj, GLuint
  // buffer, GLenum type, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayIndexOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayNormalOffsetEXT (GLuint vaobj, GLuint
  // buffer, GLenum type, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayNormalOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayTexCoordOffsetEXT (GLuint vaobj, GLuint
  // buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayTexCoordOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayMultiTexCoordOffsetEXT (GLuint vaobj,
  // GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride,
  // GLintptr offset);
  VKFUNDEFINE(glVertexArrayMultiTexCoordOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayFogCoordOffsetEXT (GLuint vaobj, GLuint
  // buffer, GLenum type, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayFogCoordOffsetEXT);
  // GLAPI void APIENTRY glVertexArraySecondaryColorOffsetEXT (GLuint vaobj,
  // GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArraySecondaryColorOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribOffsetEXT (GLuint vaobj,
  // GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized,
  // GLsizei stride, GLintptr offset);
  VKFUNDEFINE(glVertexArrayVertexAttribOffsetEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribIOffsetEXT (GLuint vaobj,
  // GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride,
  // GLintptr offset);
  VKFUNDEFINE(glVertexArrayVertexAttribIOffsetEXT);
  // GLAPI void APIENTRY glEnableVertexArrayEXT (GLuint vaobj, GLenum array);
  VKFUNDEFINE(glEnableVertexArrayEXT);
  // GLAPI void APIENTRY glDisableVertexArrayEXT (GLuint vaobj, GLenum array);
  VKFUNDEFINE(glDisableVertexArrayEXT);
  // GLAPI void APIENTRY glEnableVertexArrayAttribEXT (GLuint vaobj, GLuint
  // index);
  VKFUNDEFINE(glEnableVertexArrayAttribEXT);
  // GLAPI void APIENTRY glDisableVertexArrayAttribEXT (GLuint vaobj, GLuint
  // index);
  VKFUNDEFINE(glDisableVertexArrayAttribEXT);
  // GLAPI void APIENTRY glGetVertexArrayIntegervEXT (GLuint vaobj, GLenum
  // pname, GLint *param);
  VKFUNDEFINE(glGetVertexArrayIntegervEXT);
  // GLAPI void APIENTRY glGetVertexArrayPointervEXT (GLuint vaobj, GLenum
  // pname, void **param);
  VKFUNDEFINE(glGetVertexArrayPointervEXT);
  // GLAPI void APIENTRY glGetVertexArrayIntegeri_vEXT (GLuint vaobj, GLuint
  // index, GLenum pname, GLint *param);
  VKFUNDEFINE(glGetVertexArrayIntegeri_vEXT);
  // GLAPI void APIENTRY glGetVertexArrayPointeri_vEXT (GLuint vaobj, GLuint
  // index, GLenum pname, void **param);
  VKFUNDEFINE(glGetVertexArrayPointeri_vEXT);
  // GLAPI void *APIENTRY glMapNamedBufferRangeEXT (GLuint buffer, GLintptr
  // offset, GLsizeiptr length, GLbitfield access);
  VKFUNDEFINE(glMapNamedBufferRangeEXT);
  // GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer,
  // GLintptr offset, GLsizeiptr length);
  VKFUNDEFINE(glFlushMappedNamedBufferRangeEXT);
  // GLAPI void APIENTRY glNamedBufferStorageEXT (GLuint buffer, GLsizeiptr
  // size, const void *data, GLbitfield flags);
  VKFUNDEFINE(glNamedBufferStorageEXT);
  // GLAPI void APIENTRY glClearNamedBufferDataEXT (GLuint buffer, GLenum
  // internalformat, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glClearNamedBufferDataEXT);
  // GLAPI void APIENTRY glClearNamedBufferSubDataEXT (GLuint buffer, GLenum
  // internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum
  // type, const void *data);
  VKFUNDEFINE(glClearNamedBufferSubDataEXT);
  // GLAPI void APIENTRY glNamedFramebufferParameteriEXT (GLuint framebuffer,
  // GLenum pname, GLint param);
  VKFUNDEFINE(glNamedFramebufferParameteriEXT);
  // GLAPI void APIENTRY glGetNamedFramebufferParameterivEXT (GLuint
  // framebuffer, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetNamedFramebufferParameterivEXT);
  // GLAPI void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location,
  // GLdouble x);
  VKFUNDEFINE(glProgramUniform1dEXT);
  // GLAPI void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location,
  // GLdouble x, GLdouble y);
  VKFUNDEFINE(glProgramUniform2dEXT);
  // GLAPI void APIENTRY glProgramUniform3dEXT (GLuint program, GLint location,
  // GLdouble x, GLdouble y, GLdouble z);
  VKFUNDEFINE(glProgramUniform3dEXT);
  // GLAPI void APIENTRY glProgramUniform4dEXT (GLuint program, GLint location,
  // GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glProgramUniform4dEXT);
  // GLAPI void APIENTRY glProgramUniform1dvEXT (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform1dvEXT);
  // GLAPI void APIENTRY glProgramUniform2dvEXT (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform2dvEXT);
  // GLAPI void APIENTRY glProgramUniform3dvEXT (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform3dvEXT);
  // GLAPI void APIENTRY glProgramUniform4dvEXT (GLuint program, GLint location,
  // GLsizei count, const GLdouble *value);
  VKFUNDEFINE(glProgramUniform4dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix2dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix2dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix3dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix3dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix4dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix4dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix2x3dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix2x3dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix2x4dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix2x4dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix3x2dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix3x2dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix3x4dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix3x4dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix4x2dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix4x2dvEXT);
  // GLAPI void APIENTRY glProgramUniformMatrix4x3dvEXT (GLuint program, GLint
  // location, GLsizei count, GLboolean transpose, const GLdouble *value);
  VKFUNDEFINE(glProgramUniformMatrix4x3dvEXT);
  // GLAPI void APIENTRY glTextureBufferRangeEXT (GLuint texture, GLenum target,
  // GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glTextureBufferRangeEXT);
  // GLAPI void APIENTRY glTextureStorage1DEXT (GLuint texture, GLenum target,
  // GLsizei levels, GLenum internalformat, GLsizei width);
  VKFUNDEFINE(glTextureStorage1DEXT);
  // GLAPI void APIENTRY glTextureStorage2DEXT (GLuint texture, GLenum target,
  // GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glTextureStorage2DEXT);
  // GLAPI void APIENTRY glTextureStorage3DEXT (GLuint texture, GLenum target,
  // GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height,
  // GLsizei depth);
  VKFUNDEFINE(glTextureStorage3DEXT);
  // GLAPI void APIENTRY glTextureStorage2DMultisampleEXT (GLuint texture,
  // GLenum target, GLsizei samples, GLenum internalformat, GLsizei width,
  // GLsizei height, GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTextureStorage2DMultisampleEXT);
  // GLAPI void APIENTRY glTextureStorage3DMultisampleEXT (GLuint texture,
  // GLenum target, GLsizei samples, GLenum internalformat, GLsizei width,
  // GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTextureStorage3DMultisampleEXT);
  // GLAPI void APIENTRY glVertexArrayBindVertexBufferEXT (GLuint vaobj, GLuint
  // bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
  VKFUNDEFINE(glVertexArrayBindVertexBufferEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribFormatEXT (GLuint vaobj,
  // GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint
  // relativeoffset);
  VKFUNDEFINE(glVertexArrayVertexAttribFormatEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribIFormatEXT (GLuint vaobj,
  // GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  VKFUNDEFINE(glVertexArrayVertexAttribIFormatEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribLFormatEXT (GLuint vaobj,
  // GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  VKFUNDEFINE(glVertexArrayVertexAttribLFormatEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribBindingEXT (GLuint vaobj,
  // GLuint attribindex, GLuint bindingindex);
  VKFUNDEFINE(glVertexArrayVertexAttribBindingEXT);
  // GLAPI void APIENTRY glVertexArrayVertexBindingDivisorEXT (GLuint vaobj,
  // GLuint bindingindex, GLuint divisor);
  VKFUNDEFINE(glVertexArrayVertexBindingDivisorEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj,
  // GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride,
  // GLintptr offset);
  VKFUNDEFINE(glVertexArrayVertexAttribLOffsetEXT);
  // GLAPI void APIENTRY glTexturePageCommitmentEXT (GLuint texture, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLboolean commit);
  VKFUNDEFINE(glTexturePageCommitmentEXT);
  // GLAPI void APIENTRY glVertexArrayVertexAttribDivisorEXT (GLuint vaobj,
  // GLuint index, GLuint divisor);
  VKFUNDEFINE(glVertexArrayVertexAttribDivisorEXT);
  // GLAPI void APIENTRY glColorMaskIndexedEXT (GLuint index, GLboolean r,
  // GLboolean g, GLboolean b, GLboolean a);
  VKFUNDEFINE(glColorMaskIndexedEXT);
  // GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start,
  // GLsizei count, GLsizei primcount);
  VKFUNDEFINE(glDrawArraysInstancedEXT);
  // GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count,
  // GLenum type, const void *indices, GLsizei primcount);
  VKFUNDEFINE(glDrawElementsInstancedEXT);
  // GLAPI void APIENTRY glDrawRangeElementsEXT (GLenum mode, GLuint start,
  // GLuint end, GLsizei count, GLenum type, const void *indices);
  VKFUNDEFINE(glDrawRangeElementsEXT);
  // GLAPI void APIENTRY glBufferStorageExternalEXT (GLenum target, GLintptr
  // offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield
  // flags);
  VKFUNDEFINE(glBufferStorageExternalEXT);
  // GLAPI void APIENTRY glNamedBufferStorageExternalEXT (GLuint buffer,
  // GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer,
  // GLbitfield flags);
  VKFUNDEFINE(glNamedBufferStorageExternalEXT);
  // GLAPI void APIENTRY glFogCoordfEXT (GLfloat coord);
  VKFUNDEFINE(glFogCoordfEXT);
  // GLAPI void APIENTRY glFogCoordfvEXT (const GLfloat *coord);
  VKFUNDEFINE(glFogCoordfvEXT);
  // GLAPI void APIENTRY glFogCoorddEXT (GLdouble coord);
  VKFUNDEFINE(glFogCoorddEXT);
  // GLAPI void APIENTRY glFogCoorddvEXT (const GLdouble *coord);
  VKFUNDEFINE(glFogCoorddvEXT);
  // GLAPI void APIENTRY glFogCoordPointerEXT (GLenum type, GLsizei stride,
  // const void *pointer);
  VKFUNDEFINE(glFogCoordPointerEXT);
  // GLAPI void APIENTRY glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint
  // srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1,
  // GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebufferEXT);
  // GLAPI void APIENTRY glBlitFramebufferLayersEXT (GLint srcX0, GLint srcY0,
  // GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint
  // dstY1, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebufferLayersEXT);
  // GLAPI void APIENTRY glBlitFramebufferLayerEXT (GLint srcX0, GLint srcY0,
  // GLint srcX1, GLint srcY1, GLint srcLayer, GLint dstX0, GLint dstY0, GLint
  // dstX1, GLint dstY1, GLint dstLayer, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebufferLayerEXT);
  // GLAPI void APIENTRY glRenderbufferStorageMultisampleEXT (GLenum target,
  // GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleEXT);
  // GLAPI GLboolean APIENTRY glIsRenderbufferEXT (GLuint renderbuffer);
  VKFUNDEFINE(glIsRenderbufferEXT);
  // GLAPI void APIENTRY glBindRenderbufferEXT (GLenum target, GLuint
  // renderbuffer);
  VKFUNDEFINE(glBindRenderbufferEXT);
  // GLAPI void APIENTRY glDeleteRenderbuffersEXT (GLsizei n, const GLuint
  // *renderbuffers);
  VKFUNDEFINE(glDeleteRenderbuffersEXT);
  // GLAPI void APIENTRY glGenRenderbuffersEXT (GLsizei n, GLuint
  // *renderbuffers);
  VKFUNDEFINE(glGenRenderbuffersEXT);
  // GLAPI void APIENTRY glRenderbufferStorageEXT (GLenum target, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorageEXT);
  // GLAPI void APIENTRY glGetRenderbufferParameterivEXT (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetRenderbufferParameterivEXT);
  // GLAPI GLboolean APIENTRY glIsFramebufferEXT (GLuint framebuffer);
  VKFUNDEFINE(glIsFramebufferEXT);
  // GLAPI void APIENTRY glBindFramebufferEXT (GLenum target, GLuint
  // framebuffer);
  VKFUNDEFINE(glBindFramebufferEXT);
  // GLAPI void APIENTRY glDeleteFramebuffersEXT (GLsizei n, const GLuint
  // *framebuffers);
  VKFUNDEFINE(glDeleteFramebuffersEXT);
  // GLAPI void APIENTRY glGenFramebuffersEXT (GLsizei n, GLuint *framebuffers);
  VKFUNDEFINE(glGenFramebuffersEXT);
  // GLAPI GLenum APIENTRY glCheckFramebufferStatusEXT (GLenum target);
  VKFUNDEFINE(glCheckFramebufferStatusEXT);
  // GLAPI void APIENTRY glFramebufferTexture1DEXT (GLenum target, GLenum
  // attachment, GLenum textarget, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTexture1DEXT);
  // GLAPI void APIENTRY glFramebufferTexture2DEXT (GLenum target, GLenum
  // attachment, GLenum textarget, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTexture2DEXT);
  // GLAPI void APIENTRY glFramebufferTexture3DEXT (GLenum target, GLenum
  // attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
  VKFUNDEFINE(glFramebufferTexture3DEXT);
  // GLAPI void APIENTRY glFramebufferRenderbufferEXT (GLenum target, GLenum
  // attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  VKFUNDEFINE(glFramebufferRenderbufferEXT);
  // GLAPI void APIENTRY glGetFramebufferAttachmentParameterivEXT (GLenum
  // target, GLenum attachment, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferAttachmentParameterivEXT);
  // GLAPI void APIENTRY glGenerateMipmapEXT (GLenum target);
  VKFUNDEFINE(glGenerateMipmapEXT);
  // GLAPI void APIENTRY glProgramParameteriEXT (GLuint program, GLenum pname,
  // GLint value);
  VKFUNDEFINE(glProgramParameteriEXT);
  // GLAPI void APIENTRY glProgramEnvParameters4fvEXT (GLenum target, GLuint
  // index, GLsizei count, const GLfloat *params);
  VKFUNDEFINE(glProgramEnvParameters4fvEXT);
  // GLAPI void APIENTRY glProgramLocalParameters4fvEXT (GLenum target, GLuint
  // index, GLsizei count, const GLfloat *params);
  VKFUNDEFINE(glProgramLocalParameters4fvEXT);
  // GLAPI void APIENTRY glGetUniformuivEXT (GLuint program, GLint location,
  // GLuint *params);
  VKFUNDEFINE(glGetUniformuivEXT);
  // GLAPI void APIENTRY glBindFragDataLocationEXT (GLuint program, GLuint
  // color, const GLchar *name);
  VKFUNDEFINE(glBindFragDataLocationEXT);
  // GLAPI GLint APIENTRY glGetFragDataLocationEXT (GLuint program, const GLchar
  // *name);
  VKFUNDEFINE(glGetFragDataLocationEXT);
  // GLAPI void APIENTRY glUniform1uiEXT (GLint location, GLuint v0);
  VKFUNDEFINE(glUniform1uiEXT);
  // GLAPI void APIENTRY glUniform2uiEXT (GLint location, GLuint v0, GLuint v1);
  VKFUNDEFINE(glUniform2uiEXT);
  // GLAPI void APIENTRY glUniform3uiEXT (GLint location, GLuint v0, GLuint v1,
  // GLuint v2);
  VKFUNDEFINE(glUniform3uiEXT);
  // GLAPI void APIENTRY glUniform4uiEXT (GLint location, GLuint v0, GLuint v1,
  // GLuint v2, GLuint v3);
  VKFUNDEFINE(glUniform4uiEXT);
  // GLAPI void APIENTRY glUniform1uivEXT (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform1uivEXT);
  // GLAPI void APIENTRY glUniform2uivEXT (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform2uivEXT);
  // GLAPI void APIENTRY glUniform3uivEXT (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform3uivEXT);
  // GLAPI void APIENTRY glUniform4uivEXT (GLint location, GLsizei count, const
  // GLuint *value);
  VKFUNDEFINE(glUniform4uivEXT);
  // GLAPI void APIENTRY glVertexAttribI1iEXT (GLuint index, GLint x);
  VKFUNDEFINE(glVertexAttribI1iEXT);
  // GLAPI void APIENTRY glVertexAttribI2iEXT (GLuint index, GLint x, GLint y);
  VKFUNDEFINE(glVertexAttribI2iEXT);
  // GLAPI void APIENTRY glVertexAttribI3iEXT (GLuint index, GLint x, GLint y,
  // GLint z);
  VKFUNDEFINE(glVertexAttribI3iEXT);
  // GLAPI void APIENTRY glVertexAttribI4iEXT (GLuint index, GLint x, GLint y,
  // GLint z, GLint w);
  VKFUNDEFINE(glVertexAttribI4iEXT);
  // GLAPI void APIENTRY glVertexAttribI1uiEXT (GLuint index, GLuint x);
  VKFUNDEFINE(glVertexAttribI1uiEXT);
  // GLAPI void APIENTRY glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint
  // y);
  VKFUNDEFINE(glVertexAttribI2uiEXT);
  // GLAPI void APIENTRY glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint
  // y, GLuint z);
  VKFUNDEFINE(glVertexAttribI3uiEXT);
  // GLAPI void APIENTRY glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint
  // y, GLuint z, GLuint w);
  VKFUNDEFINE(glVertexAttribI4uiEXT);
  // GLAPI void APIENTRY glVertexAttribI1ivEXT (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI1ivEXT);
  // GLAPI void APIENTRY glVertexAttribI2ivEXT (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI2ivEXT);
  // GLAPI void APIENTRY glVertexAttribI3ivEXT (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI3ivEXT);
  // GLAPI void APIENTRY glVertexAttribI4ivEXT (GLuint index, const GLint *v);
  VKFUNDEFINE(glVertexAttribI4ivEXT);
  // GLAPI void APIENTRY glVertexAttribI1uivEXT (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI1uivEXT);
  // GLAPI void APIENTRY glVertexAttribI2uivEXT (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI2uivEXT);
  // GLAPI void APIENTRY glVertexAttribI3uivEXT (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI3uivEXT);
  // GLAPI void APIENTRY glVertexAttribI4uivEXT (GLuint index, const GLuint *v);
  VKFUNDEFINE(glVertexAttribI4uivEXT);
  // GLAPI void APIENTRY glVertexAttribI4bvEXT (GLuint index, const GLbyte *v);
  VKFUNDEFINE(glVertexAttribI4bvEXT);
  // GLAPI void APIENTRY glVertexAttribI4svEXT (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttribI4svEXT);
  // GLAPI void APIENTRY glVertexAttribI4ubvEXT (GLuint index, const GLubyte
  // *v);
  VKFUNDEFINE(glVertexAttribI4ubvEXT);
  // GLAPI void APIENTRY glVertexAttribI4usvEXT (GLuint index, const GLushort
  // *v);
  VKFUNDEFINE(glVertexAttribI4usvEXT);
  // GLAPI void APIENTRY glVertexAttribIPointerEXT (GLuint index, GLint size,
  // GLenum type, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribIPointerEXT);
  // GLAPI void APIENTRY glGetVertexAttribIivEXT (GLuint index, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetVertexAttribIivEXT);
  // GLAPI void APIENTRY glGetVertexAttribIuivEXT (GLuint index, GLenum pname,
  // GLuint *params);
  VKFUNDEFINE(glGetVertexAttribIuivEXT);
  // GLAPI void APIENTRY glGetHistogramEXT (GLenum target, GLboolean reset,
  // GLenum format, GLenum type, void *values);
  VKFUNDEFINE(glGetHistogramEXT);
  // GLAPI void APIENTRY glGetHistogramParameterfvEXT (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetHistogramParameterfvEXT);
  // GLAPI void APIENTRY glGetHistogramParameterivEXT (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetHistogramParameterivEXT);
  // GLAPI void APIENTRY glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum
  // format, GLenum type, void *values);
  VKFUNDEFINE(glGetMinmaxEXT);
  // GLAPI void APIENTRY glGetMinmaxParameterfvEXT (GLenum target, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetMinmaxParameterfvEXT);
  // GLAPI void APIENTRY glGetMinmaxParameterivEXT (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetMinmaxParameterivEXT);
  // GLAPI void APIENTRY glHistogramEXT (GLenum target, GLsizei width, GLenum
  // internalformat, GLboolean sink);
  VKFUNDEFINE(glHistogramEXT);
  // GLAPI void APIENTRY glMinmaxEXT (GLenum target, GLenum internalformat,
  // GLboolean sink);
  VKFUNDEFINE(glMinmaxEXT);
  // GLAPI void APIENTRY glResetHistogramEXT (GLenum target);
  VKFUNDEFINE(glResetHistogramEXT);
  // GLAPI void APIENTRY glResetMinmaxEXT (GLenum target);
  VKFUNDEFINE(glResetMinmaxEXT);
  // GLAPI void APIENTRY glIndexFuncEXT (GLenum func, GLclampf ref);
  VKFUNDEFINE(glIndexFuncEXT);
  // GLAPI void APIENTRY glIndexMaterialEXT (GLenum face, GLenum mode);
  VKFUNDEFINE(glIndexMaterialEXT);
  // GLAPI void APIENTRY glApplyTextureEXT (GLenum mode);
  VKFUNDEFINE(glApplyTextureEXT);
  // GLAPI void APIENTRY glTextureLightEXT (GLenum pname);
  VKFUNDEFINE(glTextureLightEXT);
  // GLAPI void APIENTRY glTextureMaterialEXT (GLenum face, GLenum mode);
  VKFUNDEFINE(glTextureMaterialEXT);
  // GLAPI void APIENTRY glGetUnsignedBytevEXT (GLenum pname, GLubyte *data);
  VKFUNDEFINE(glGetUnsignedBytevEXT);
  // GLAPI void APIENTRY glGetUnsignedBytei_vEXT (GLenum target, GLuint index,
  // GLubyte *data);
  VKFUNDEFINE(glGetUnsignedBytei_vEXT);
  // GLAPI void APIENTRY glDeleteMemoryObjectsEXT (GLsizei n, const GLuint
  // *memoryObjects);
  VKFUNDEFINE(glDeleteMemoryObjectsEXT);
  // GLAPI GLboolean APIENTRY glIsMemoryObjectEXT (GLuint memoryObject);
  VKFUNDEFINE(glIsMemoryObjectEXT);
  // GLAPI void APIENTRY glCreateMemoryObjectsEXT (GLsizei n, GLuint
  // *memoryObjects);
  VKFUNDEFINE(glCreateMemoryObjectsEXT);
  // GLAPI void APIENTRY glMemoryObjectParameterivEXT (GLuint memoryObject,
  // GLenum pname, const GLint *params);
  VKFUNDEFINE(glMemoryObjectParameterivEXT);
  // GLAPI void APIENTRY glGetMemoryObjectParameterivEXT (GLuint memoryObject,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMemoryObjectParameterivEXT);
  // GLAPI void APIENTRY glTexStorageMem2DEXT (GLenum target, GLsizei levels,
  // GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory,
  // GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem2DEXT);
  // GLAPI void APIENTRY glTexStorageMem2DMultisampleEXT (GLenum target, GLsizei
  // samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean
  // fixedSampleLocations, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem2DMultisampleEXT);
  // GLAPI void APIENTRY glTexStorageMem3DEXT (GLenum target, GLsizei levels,
  // GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint
  // memory, GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem3DEXT);
  // GLAPI void APIENTRY glTexStorageMem3DMultisampleEXT (GLenum target, GLsizei
  // samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei
  // depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem3DMultisampleEXT);
  // GLAPI void APIENTRY glBufferStorageMemEXT (GLenum target, GLsizeiptr size,
  // GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glBufferStorageMemEXT);
  // GLAPI void APIENTRY glTextureStorageMem2DEXT (GLuint texture, GLsizei
  // levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint
  // memory, GLuint64 offset);
  VKFUNDEFINE(glTextureStorageMem2DEXT);
  // GLAPI void APIENTRY glTextureStorageMem2DMultisampleEXT (GLuint texture,
  // GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height,
  // GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTextureStorageMem2DMultisampleEXT);
  // GLAPI void APIENTRY glTextureStorageMem3DEXT (GLuint texture, GLsizei
  // levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei
  // depth, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTextureStorageMem3DEXT);
  // GLAPI void APIENTRY glTextureStorageMem3DMultisampleEXT (GLuint texture,
  // GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height,
  // GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64
  // offset);
  VKFUNDEFINE(glTextureStorageMem3DMultisampleEXT);
  // GLAPI void APIENTRY glNamedBufferStorageMemEXT (GLuint buffer, GLsizeiptr
  // size, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glNamedBufferStorageMemEXT);
  // GLAPI void APIENTRY glTexStorageMem1DEXT (GLenum target, GLsizei levels,
  // GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem1DEXT);
  // GLAPI void APIENTRY glTextureStorageMem1DEXT (GLuint texture, GLsizei
  // levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64
  // offset);
  VKFUNDEFINE(glTextureStorageMem1DEXT);
  // GLAPI void APIENTRY glImportMemoryFdEXT (GLuint memory, GLuint64 size,
  // GLenum handleType, GLint fd);
  VKFUNDEFINE(glImportMemoryFdEXT);
  // GLAPI void APIENTRY glImportMemoryWin32HandleEXT (GLuint memory, GLuint64
  // size, GLenum handleType, void *handle);
  VKFUNDEFINE(glImportMemoryWin32HandleEXT);
  // GLAPI void APIENTRY glImportMemoryWin32NameEXT (GLuint memory, GLuint64
  // size, GLenum handleType, const void *name);
  VKFUNDEFINE(glImportMemoryWin32NameEXT);
  // GLAPI void APIENTRY glMultiDrawArraysEXT (GLenum mode, const GLint *first,
  // const GLsizei *count, GLsizei primcount);
  VKFUNDEFINE(glMultiDrawArraysEXT);
  // GLAPI void APIENTRY glMultiDrawElementsEXT (GLenum mode, const GLsizei
  // *count, GLenum type, const void *const*indices, GLsizei primcount);
  VKFUNDEFINE(glMultiDrawElementsEXT);
  // GLAPI void APIENTRY glSampleMaskEXT (GLclampf value, GLboolean invert);
  VKFUNDEFINE(glSampleMaskEXT);
  // GLAPI void APIENTRY glSamplePatternEXT (GLenum pattern);
  VKFUNDEFINE(glSamplePatternEXT);
  // GLAPI void APIENTRY glColorTableEXT (GLenum target, GLenum internalFormat,
  // GLsizei width, GLenum format, GLenum type, const void *table);
  VKFUNDEFINE(glColorTableEXT);
  // GLAPI void APIENTRY glGetColorTableEXT (GLenum target, GLenum format,
  // GLenum type, void *data);
  VKFUNDEFINE(glGetColorTableEXT);
  // GLAPI void APIENTRY glGetColorTableParameterivEXT (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetColorTableParameterivEXT);
  // GLAPI void APIENTRY glGetColorTableParameterfvEXT (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetColorTableParameterfvEXT);
  // GLAPI void APIENTRY glPixelTransformParameteriEXT (GLenum target, GLenum
  // pname, GLint param);
  VKFUNDEFINE(glPixelTransformParameteriEXT);
  // GLAPI void APIENTRY glPixelTransformParameterfEXT (GLenum target, GLenum
  // pname, GLfloat param);
  VKFUNDEFINE(glPixelTransformParameterfEXT);
  // GLAPI void APIENTRY glPixelTransformParameterivEXT (GLenum target, GLenum
  // pname, const GLint *params);
  VKFUNDEFINE(glPixelTransformParameterivEXT);
  // GLAPI void APIENTRY glPixelTransformParameterfvEXT (GLenum target, GLenum
  // pname, const GLfloat *params);
  VKFUNDEFINE(glPixelTransformParameterfvEXT);
  // GLAPI void APIENTRY glGetPixelTransformParameterivEXT (GLenum target,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetPixelTransformParameterivEXT);
  // GLAPI void APIENTRY glGetPixelTransformParameterfvEXT (GLenum target,
  // GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetPixelTransformParameterfvEXT);
  // GLAPI void APIENTRY glPointParameterfEXT (GLenum pname, GLfloat param);
  VKFUNDEFINE(glPointParameterfEXT);
  // GLAPI void APIENTRY glPointParameterfvEXT (GLenum pname, const GLfloat
  // *params);
  VKFUNDEFINE(glPointParameterfvEXT);
  // GLAPI void APIENTRY glPolygonOffsetEXT (GLfloat factor, GLfloat bias);
  VKFUNDEFINE(glPolygonOffsetEXT);
  // GLAPI void APIENTRY glPolygonOffsetClampEXT (GLfloat factor, GLfloat units,
  // GLfloat clamp);
  VKFUNDEFINE(glPolygonOffsetClampEXT);
  // GLAPI void APIENTRY glProvokingVertexEXT (GLenum mode);
  VKFUNDEFINE(glProvokingVertexEXT);
  // GLAPI void APIENTRY glRasterSamplesEXT (GLuint samples, GLboolean
  // fixedsamplelocations);
  VKFUNDEFINE(glRasterSamplesEXT);
  // GLAPI void APIENTRY glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte
  // blue);
  VKFUNDEFINE(glSecondaryColor3bEXT);
  // GLAPI void APIENTRY glSecondaryColor3bvEXT (const GLbyte *v);
  VKFUNDEFINE(glSecondaryColor3bvEXT);
  // GLAPI void APIENTRY glSecondaryColor3dEXT (GLdouble red, GLdouble green,
  // GLdouble blue);
  VKFUNDEFINE(glSecondaryColor3dEXT);
  // GLAPI void APIENTRY glSecondaryColor3dvEXT (const GLdouble *v);
  VKFUNDEFINE(glSecondaryColor3dvEXT);
  // GLAPI void APIENTRY glSecondaryColor3fEXT (GLfloat red, GLfloat green,
  // GLfloat blue);
  VKFUNDEFINE(glSecondaryColor3fEXT);
  // GLAPI void APIENTRY glSecondaryColor3fvEXT (const GLfloat *v);
  VKFUNDEFINE(glSecondaryColor3fvEXT);
  // GLAPI void APIENTRY glSecondaryColor3iEXT (GLint red, GLint green, GLint
  // blue);
  VKFUNDEFINE(glSecondaryColor3iEXT);
  // GLAPI void APIENTRY glSecondaryColor3ivEXT (const GLint *v);
  VKFUNDEFINE(glSecondaryColor3ivEXT);
  // GLAPI void APIENTRY glSecondaryColor3sEXT (GLshort red, GLshort green,
  // GLshort blue);
  VKFUNDEFINE(glSecondaryColor3sEXT);
  // GLAPI void APIENTRY glSecondaryColor3svEXT (const GLshort *v);
  VKFUNDEFINE(glSecondaryColor3svEXT);
  // GLAPI void APIENTRY glSecondaryColor3ubEXT (GLubyte red, GLubyte green,
  // GLubyte blue);
  VKFUNDEFINE(glSecondaryColor3ubEXT);
  // GLAPI void APIENTRY glSecondaryColor3ubvEXT (const GLubyte *v);
  VKFUNDEFINE(glSecondaryColor3ubvEXT);
  // GLAPI void APIENTRY glSecondaryColor3uiEXT (GLuint red, GLuint green,
  // GLuint blue);
  VKFUNDEFINE(glSecondaryColor3uiEXT);
  // GLAPI void APIENTRY glSecondaryColor3uivEXT (const GLuint *v);
  VKFUNDEFINE(glSecondaryColor3uivEXT);
  // GLAPI void APIENTRY glSecondaryColor3usEXT (GLushort red, GLushort green,
  // GLushort blue);
  VKFUNDEFINE(glSecondaryColor3usEXT);
  // GLAPI void APIENTRY glSecondaryColor3usvEXT (const GLushort *v);
  VKFUNDEFINE(glSecondaryColor3usvEXT);
  // GLAPI void APIENTRY glSecondaryColorPointerEXT (GLint size, GLenum type,
  // GLsizei stride, const void *pointer);
  VKFUNDEFINE(glSecondaryColorPointerEXT);
  // GLAPI void APIENTRY glGenSemaphoresEXT (GLsizei n, GLuint *semaphores);
  VKFUNDEFINE(glGenSemaphoresEXT);
  // GLAPI void APIENTRY glDeleteSemaphoresEXT (GLsizei n, const GLuint
  // *semaphores);
  VKFUNDEFINE(glDeleteSemaphoresEXT);
  // GLAPI GLboolean APIENTRY glIsSemaphoreEXT (GLuint semaphore);
  VKFUNDEFINE(glIsSemaphoreEXT);
  // GLAPI void APIENTRY glSemaphoreParameterui64vEXT (GLuint semaphore, GLenum
  // pname, const GLuint64 *params);
  VKFUNDEFINE(glSemaphoreParameterui64vEXT);
  // GLAPI void APIENTRY glGetSemaphoreParameterui64vEXT (GLuint semaphore,
  // GLenum pname, GLuint64 *params);
  VKFUNDEFINE(glGetSemaphoreParameterui64vEXT);
  // GLAPI void APIENTRY glWaitSemaphoreEXT (GLuint semaphore, GLuint
  // numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const
  // GLuint *textures, const GLenum *srcLayouts);
  VKFUNDEFINE(glWaitSemaphoreEXT);
  // GLAPI void APIENTRY glSignalSemaphoreEXT (GLuint semaphore, GLuint
  // numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const
  // GLuint *textures, const GLenum *dstLayouts);
  VKFUNDEFINE(glSignalSemaphoreEXT);
  // GLAPI void APIENTRY glImportSemaphoreFdEXT (GLuint semaphore, GLenum
  // handleType, GLint fd);
  VKFUNDEFINE(glImportSemaphoreFdEXT);
  // GLAPI void APIENTRY glImportSemaphoreWin32HandleEXT (GLuint semaphore,
  // GLenum handleType, void *handle);
  VKFUNDEFINE(glImportSemaphoreWin32HandleEXT);
  // GLAPI void APIENTRY glImportSemaphoreWin32NameEXT (GLuint semaphore, GLenum
  // handleType, const void *name);
  VKFUNDEFINE(glImportSemaphoreWin32NameEXT);
  // GLAPI void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program);
  VKFUNDEFINE(glUseShaderProgramEXT);
  // GLAPI void APIENTRY glActiveProgramEXT (GLuint program);
  VKFUNDEFINE(glActiveProgramEXT);
  // GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar
  // *string);
  VKFUNDEFINE(glCreateShaderProgramEXT);
  // GLAPI void APIENTRY glFramebufferFetchBarrierEXT (void);
  VKFUNDEFINE(glFramebufferFetchBarrierEXT);
  // GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture,
  // GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
  VKFUNDEFINE(glBindImageTextureEXT);
  // GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers);
  VKFUNDEFINE(glMemoryBarrierEXT);
  // GLAPI void APIENTRY glStencilClearTagEXT (GLsizei stencilTagBits, GLuint
  // stencilClearTag);
  VKFUNDEFINE(glStencilClearTagEXT);
  // GLAPI void APIENTRY glActiveStencilFaceEXT (GLenum face);
  VKFUNDEFINE(glActiveStencilFaceEXT);
  // GLAPI void APIENTRY glTexSubImage1DEXT (GLenum target, GLint level, GLint
  // xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage1DEXT);
  // GLAPI void APIENTRY glTexSubImage2DEXT (GLenum target, GLint level, GLint
  // xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
  // GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage2DEXT);
  // GLAPI void APIENTRY glTexImage3DEXT (GLenum target, GLint level, GLenum
  // internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border,
  // GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexImage3DEXT);
  // GLAPI void APIENTRY glTexSubImage3DEXT (GLenum target, GLint level, GLint
  // xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage3DEXT);
  // GLAPI void APIENTRY glFramebufferTextureLayerEXT (GLenum target, GLenum
  // attachment, GLuint texture, GLint level, GLint layer);
  VKFUNDEFINE(glFramebufferTextureLayerEXT);
  // GLAPI void APIENTRY glTexBufferEXT (GLenum target, GLenum internalformat,
  // GLuint buffer);
  VKFUNDEFINE(glTexBufferEXT);
  // GLAPI void APIENTRY glTexParameterIivEXT (GLenum target, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glTexParameterIivEXT);
  // GLAPI void APIENTRY glTexParameterIuivEXT (GLenum target, GLenum pname,
  // const GLuint *params);
  VKFUNDEFINE(glTexParameterIuivEXT);
  // GLAPI void APIENTRY glGetTexParameterIivEXT (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetTexParameterIivEXT);
  // GLAPI void APIENTRY glGetTexParameterIuivEXT (GLenum target, GLenum pname,
  // GLuint *params);
  VKFUNDEFINE(glGetTexParameterIuivEXT);
  // GLAPI void APIENTRY glClearColorIiEXT (GLint red, GLint green, GLint blue,
  // GLint alpha);
  VKFUNDEFINE(glClearColorIiEXT);
  // GLAPI void APIENTRY glClearColorIuiEXT (GLuint red, GLuint green, GLuint
  // blue, GLuint alpha);
  VKFUNDEFINE(glClearColorIuiEXT);
  // GLAPI GLboolean APIENTRY glAreTexturesResidentEXT (GLsizei n, const GLuint
  // *textures, GLboolean *residences);
  VKFUNDEFINE(glAreTexturesResidentEXT);
  // GLAPI void APIENTRY glBindTextureEXT (GLenum target, GLuint texture);
  VKFUNDEFINE(glBindTextureEXT);
  // GLAPI void APIENTRY glDeleteTexturesEXT (GLsizei n, const GLuint
  // *textures);
  VKFUNDEFINE(glDeleteTexturesEXT);
  // GLAPI void APIENTRY glGenTexturesEXT (GLsizei n, GLuint *textures);
  VKFUNDEFINE(glGenTexturesEXT);
  // GLAPI GLboolean APIENTRY glIsTextureEXT (GLuint texture);
  VKFUNDEFINE(glIsTextureEXT);
  // GLAPI void APIENTRY glPrioritizeTexturesEXT (GLsizei n, const GLuint
  // *textures, const GLclampf *priorities);
  VKFUNDEFINE(glPrioritizeTexturesEXT);
  // GLAPI void APIENTRY glTextureNormalEXT (GLenum mode);
  VKFUNDEFINE(glTextureNormalEXT);
  // GLAPI void APIENTRY glTexStorage1DEXT (GLenum target, GLsizei levels,
  // GLenum internalformat, GLsizei width);
  VKFUNDEFINE(glTexStorage1DEXT);
  // GLAPI void APIENTRY glTexStorage2DEXT (GLenum target, GLsizei levels,
  // GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glTexStorage2DEXT);
  // GLAPI void APIENTRY glTexStorage3DEXT (GLenum target, GLsizei levels,
  // GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
  VKFUNDEFINE(glTexStorage3DEXT);
  // GLAPI void APIENTRY glGetQueryObjecti64vEXT (GLuint id, GLenum pname,
  // GLint64 *params);
  VKFUNDEFINE(glGetQueryObjecti64vEXT);
  // GLAPI void APIENTRY glGetQueryObjectui64vEXT (GLuint id, GLenum pname,
  // GLuint64 *params);
  VKFUNDEFINE(glGetQueryObjectui64vEXT);
  // GLAPI void APIENTRY glBeginTransformFeedbackEXT (GLenum primitiveMode);
  VKFUNDEFINE(glBeginTransformFeedbackEXT);
  // GLAPI void APIENTRY glEndTransformFeedbackEXT (void);
  VKFUNDEFINE(glEndTransformFeedbackEXT);
  // GLAPI void APIENTRY glBindBufferRangeEXT (GLenum target, GLuint index,
  // GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glBindBufferRangeEXT);
  // GLAPI void APIENTRY glBindBufferOffsetEXT (GLenum target, GLuint index,
  // GLuint buffer, GLintptr offset);
  VKFUNDEFINE(glBindBufferOffsetEXT);
  // GLAPI void APIENTRY glBindBufferBaseEXT (GLenum target, GLuint index,
  // GLuint buffer);
  VKFUNDEFINE(glBindBufferBaseEXT);
  // GLAPI void APIENTRY glTransformFeedbackVaryingsEXT (GLuint program, GLsizei
  // count, const GLchar *const*varyings, GLenum bufferMode);
  VKFUNDEFINE(glTransformFeedbackVaryingsEXT);
  // GLAPI void APIENTRY glGetTransformFeedbackVaryingEXT (GLuint program,
  // GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum
  // *type, GLchar *name);
  VKFUNDEFINE(glGetTransformFeedbackVaryingEXT);
  // GLAPI void APIENTRY glArrayElementEXT (GLint i);
  VKFUNDEFINE(glArrayElementEXT);
  // GLAPI void APIENTRY glColorPointerEXT (GLint size, GLenum type, GLsizei
  // stride, GLsizei count, const void *pointer);
  VKFUNDEFINE(glColorPointerEXT);
  // GLAPI void APIENTRY glDrawArraysEXT (GLenum mode, GLint first, GLsizei
  // count);
  VKFUNDEFINE(glDrawArraysEXT);
  // GLAPI void APIENTRY glEdgeFlagPointerEXT (GLsizei stride, GLsizei count,
  // const GLboolean *pointer);
  VKFUNDEFINE(glEdgeFlagPointerEXT);
  // GLAPI void APIENTRY glGetPointervEXT (GLenum pname, void **params);
  VKFUNDEFINE(glGetPointervEXT);
  // GLAPI void APIENTRY glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei
  // count, const void *pointer);
  VKFUNDEFINE(glIndexPointerEXT);
  // GLAPI void APIENTRY glNormalPointerEXT (GLenum type, GLsizei stride,
  // GLsizei count, const void *pointer);
  VKFUNDEFINE(glNormalPointerEXT);
  // GLAPI void APIENTRY glTexCoordPointerEXT (GLint size, GLenum type, GLsizei
  // stride, GLsizei count, const void *pointer);
  VKFUNDEFINE(glTexCoordPointerEXT);
  // GLAPI void APIENTRY glVertexPointerEXT (GLint size, GLenum type, GLsizei
  // stride, GLsizei count, const void *pointer);
  VKFUNDEFINE(glVertexPointerEXT);
  // GLAPI void APIENTRY glVertexAttribL1dEXT (GLuint index, GLdouble x);
  VKFUNDEFINE(glVertexAttribL1dEXT);
  // GLAPI void APIENTRY glVertexAttribL2dEXT (GLuint index, GLdouble x,
  // GLdouble y);
  VKFUNDEFINE(glVertexAttribL2dEXT);
  // GLAPI void APIENTRY glVertexAttribL3dEXT (GLuint index, GLdouble x,
  // GLdouble y, GLdouble z);
  VKFUNDEFINE(glVertexAttribL3dEXT);
  // GLAPI void APIENTRY glVertexAttribL4dEXT (GLuint index, GLdouble x,
  // GLdouble y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glVertexAttribL4dEXT);
  // GLAPI void APIENTRY glVertexAttribL1dvEXT (GLuint index, const GLdouble
  // *v);
  VKFUNDEFINE(glVertexAttribL1dvEXT);
  // GLAPI void APIENTRY glVertexAttribL2dvEXT (GLuint index, const GLdouble
  // *v);
  VKFUNDEFINE(glVertexAttribL2dvEXT);
  // GLAPI void APIENTRY glVertexAttribL3dvEXT (GLuint index, const GLdouble
  // *v);
  VKFUNDEFINE(glVertexAttribL3dvEXT);
  // GLAPI void APIENTRY glVertexAttribL4dvEXT (GLuint index, const GLdouble
  // *v);
  VKFUNDEFINE(glVertexAttribL4dvEXT);
  // GLAPI void APIENTRY glVertexAttribLPointerEXT (GLuint index, GLint size,
  // GLenum type, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribLPointerEXT);
  // GLAPI void APIENTRY glGetVertexAttribLdvEXT (GLuint index, GLenum pname,
  // GLdouble *params);
  VKFUNDEFINE(glGetVertexAttribLdvEXT);
  // GLAPI void APIENTRY glBeginVertexShaderEXT (void);
  VKFUNDEFINE(glBeginVertexShaderEXT);
  // GLAPI void APIENTRY glEndVertexShaderEXT (void);
  VKFUNDEFINE(glEndVertexShaderEXT);
  // GLAPI void APIENTRY glBindVertexShaderEXT (GLuint id);
  VKFUNDEFINE(glBindVertexShaderEXT);
  // GLAPI GLuint APIENTRY glGenVertexShadersEXT (GLuint range);
  VKFUNDEFINE(glGenVertexShadersEXT);
  // GLAPI void APIENTRY glDeleteVertexShaderEXT (GLuint id);
  VKFUNDEFINE(glDeleteVertexShaderEXT);
  // GLAPI void APIENTRY glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1);
  VKFUNDEFINE(glShaderOp1EXT);
  // GLAPI void APIENTRY glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1,
  // GLuint arg2);
  VKFUNDEFINE(glShaderOp2EXT);
  // GLAPI void APIENTRY glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1,
  // GLuint arg2, GLuint arg3);
  VKFUNDEFINE(glShaderOp3EXT);
  // GLAPI void APIENTRY glSwizzleEXT (GLuint res, GLuint in, GLenum outX,
  // GLenum outY, GLenum outZ, GLenum outW);
  VKFUNDEFINE(glSwizzleEXT);
  // GLAPI void APIENTRY glWriteMaskEXT (GLuint res, GLuint in, GLenum outX,
  // GLenum outY, GLenum outZ, GLenum outW);
  VKFUNDEFINE(glWriteMaskEXT);
  // GLAPI void APIENTRY glInsertComponentEXT (GLuint res, GLuint src, GLuint
  // num);
  VKFUNDEFINE(glInsertComponentEXT);
  // GLAPI void APIENTRY glExtractComponentEXT (GLuint res, GLuint src, GLuint
  // num);
  VKFUNDEFINE(glExtractComponentEXT);
  // GLAPI GLuint APIENTRY glGenSymbolsEXT (GLenum datatype, GLenum storagetype,
  // GLenum range, GLuint components);
  VKFUNDEFINE(glGenSymbolsEXT);
  // GLAPI void APIENTRY glSetInvariantEXT (GLuint id, GLenum type, const void
  // *addr);
  VKFUNDEFINE(glSetInvariantEXT);
  // GLAPI void APIENTRY glSetLocalConstantEXT (GLuint id, GLenum type, const
  // void *addr);
  VKFUNDEFINE(glSetLocalConstantEXT);
  // GLAPI void APIENTRY glVariantbvEXT (GLuint id, const GLbyte *addr);
  VKFUNDEFINE(glVariantbvEXT);
  // GLAPI void APIENTRY glVariantsvEXT (GLuint id, const GLshort *addr);
  VKFUNDEFINE(glVariantsvEXT);
  // GLAPI void APIENTRY glVariantivEXT (GLuint id, const GLint *addr);
  VKFUNDEFINE(glVariantivEXT);
  // GLAPI void APIENTRY glVariantfvEXT (GLuint id, const GLfloat *addr);
  VKFUNDEFINE(glVariantfvEXT);
  // GLAPI void APIENTRY glVariantdvEXT (GLuint id, const GLdouble *addr);
  VKFUNDEFINE(glVariantdvEXT);
  // GLAPI void APIENTRY glVariantubvEXT (GLuint id, const GLubyte *addr);
  VKFUNDEFINE(glVariantubvEXT);
  // GLAPI void APIENTRY glVariantusvEXT (GLuint id, const GLushort *addr);
  VKFUNDEFINE(glVariantusvEXT);
  // GLAPI void APIENTRY glVariantuivEXT (GLuint id, const GLuint *addr);
  VKFUNDEFINE(glVariantuivEXT);
  // GLAPI void APIENTRY glVariantPointerEXT (GLuint id, GLenum type, GLuint
  // stride, const void *addr);
  VKFUNDEFINE(glVariantPointerEXT);
  // GLAPI void APIENTRY glEnableVariantClientStateEXT (GLuint id);
  VKFUNDEFINE(glEnableVariantClientStateEXT);
  // GLAPI void APIENTRY glDisableVariantClientStateEXT (GLuint id);
  VKFUNDEFINE(glDisableVariantClientStateEXT);
  // GLAPI GLuint APIENTRY glBindLightParameterEXT (GLenum light, GLenum value);
  VKFUNDEFINE(glBindLightParameterEXT);
  // GLAPI GLuint APIENTRY glBindMaterialParameterEXT (GLenum face, GLenum
  // value);
  VKFUNDEFINE(glBindMaterialParameterEXT);
  // GLAPI GLuint APIENTRY glBindTexGenParameterEXT (GLenum unit, GLenum coord,
  // GLenum value);
  VKFUNDEFINE(glBindTexGenParameterEXT);
  // GLAPI GLuint APIENTRY glBindTextureUnitParameterEXT (GLenum unit, GLenum
  // value);
  VKFUNDEFINE(glBindTextureUnitParameterEXT);
  // GLAPI GLuint APIENTRY glBindParameterEXT (GLenum value);
  VKFUNDEFINE(glBindParameterEXT);
  // GLAPI GLboolean APIENTRY glIsVariantEnabledEXT (GLuint id, GLenum cap);
  VKFUNDEFINE(glIsVariantEnabledEXT);
  // GLAPI void APIENTRY glGetVariantBooleanvEXT (GLuint id, GLenum value,
  // GLboolean *data);
  VKFUNDEFINE(glGetVariantBooleanvEXT);
  // GLAPI void APIENTRY glGetVariantIntegervEXT (GLuint id, GLenum value, GLint
  // *data);
  VKFUNDEFINE(glGetVariantIntegervEXT);
  // GLAPI void APIENTRY glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat
  // *data);
  VKFUNDEFINE(glGetVariantFloatvEXT);
  // GLAPI void APIENTRY glGetVariantPointervEXT (GLuint id, GLenum value, void
  // **data);
  VKFUNDEFINE(glGetVariantPointervEXT);
  // GLAPI void APIENTRY glGetInvariantBooleanvEXT (GLuint id, GLenum value,
  // GLboolean *data);
  VKFUNDEFINE(glGetInvariantBooleanvEXT);
  // GLAPI void APIENTRY glGetInvariantIntegervEXT (GLuint id, GLenum value,
  // GLint *data);
  VKFUNDEFINE(glGetInvariantIntegervEXT);
  // GLAPI void APIENTRY glGetInvariantFloatvEXT (GLuint id, GLenum value,
  // GLfloat *data);
  VKFUNDEFINE(glGetInvariantFloatvEXT);
  // GLAPI void APIENTRY glGetLocalConstantBooleanvEXT (GLuint id, GLenum value,
  // GLboolean *data);
  VKFUNDEFINE(glGetLocalConstantBooleanvEXT);
  // GLAPI void APIENTRY glGetLocalConstantIntegervEXT (GLuint id, GLenum value,
  // GLint *data);
  VKFUNDEFINE(glGetLocalConstantIntegervEXT);
  // GLAPI void APIENTRY glGetLocalConstantFloatvEXT (GLuint id, GLenum value,
  // GLfloat *data);
  VKFUNDEFINE(glGetLocalConstantFloatvEXT);
  // GLAPI void APIENTRY glVertexWeightfEXT (GLfloat weight);
  VKFUNDEFINE(glVertexWeightfEXT);
  // GLAPI void APIENTRY glVertexWeightfvEXT (const GLfloat *weight);
  VKFUNDEFINE(glVertexWeightfvEXT);
  // GLAPI void APIENTRY glVertexWeightPointerEXT (GLint size, GLenum type,
  // GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexWeightPointerEXT);
  // GLAPI GLboolean APIENTRY glAcquireKeyedMutexWin32EXT (GLuint memory,
  // GLuint64 key, GLuint timeout);
  VKFUNDEFINE(glAcquireKeyedMutexWin32EXT);
  // GLAPI GLboolean APIENTRY glReleaseKeyedMutexWin32EXT (GLuint memory,
  // GLuint64 key);
  VKFUNDEFINE(glReleaseKeyedMutexWin32EXT);
  // GLAPI void APIENTRY glWindowRectanglesEXT (GLenum mode, GLsizei count,
  // const GLint *box);
  VKFUNDEFINE(glWindowRectanglesEXT);
  // GLAPI GLsync APIENTRY glImportSyncEXT (GLenum external_sync_type, GLintptr
  // external_sync, GLbitfield flags);
  VKFUNDEFINE(glImportSyncEXT);
  // GLAPI void APIENTRY glFrameTerminatorGREMEDY (void);
  VKFUNDEFINE(glFrameTerminatorGREMEDY);
  // GLAPI void APIENTRY glStringMarkerGREMEDY (GLsizei len, const void
  // *string);
  VKFUNDEFINE(glStringMarkerGREMEDY);
  // GLAPI void APIENTRY glImageTransformParameteriHP (GLenum target, GLenum
  // pname, GLint param);
  VKFUNDEFINE(glImageTransformParameteriHP);
  // GLAPI void APIENTRY glImageTransformParameterfHP (GLenum target, GLenum
  // pname, GLfloat param);
  VKFUNDEFINE(glImageTransformParameterfHP);
  // GLAPI void APIENTRY glImageTransformParameterivHP (GLenum target, GLenum
  // pname, const GLint *params);
  VKFUNDEFINE(glImageTransformParameterivHP);
  // GLAPI void APIENTRY glImageTransformParameterfvHP (GLenum target, GLenum
  // pname, const GLfloat *params);
  VKFUNDEFINE(glImageTransformParameterfvHP);
  // GLAPI void APIENTRY glGetImageTransformParameterivHP (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetImageTransformParameterivHP);
  // GLAPI void APIENTRY glGetImageTransformParameterfvHP (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetImageTransformParameterfvHP);
  // GLAPI void APIENTRY glMultiModeDrawArraysIBM (const GLenum *mode, const
  // GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
  VKFUNDEFINE(glMultiModeDrawArraysIBM);
  // GLAPI void APIENTRY glMultiModeDrawElementsIBM (const GLenum *mode, const
  // GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount,
  // GLint modestride);
  VKFUNDEFINE(glMultiModeDrawElementsIBM);
  // GLAPI void APIENTRY glFlushStaticDataIBM (GLenum target);
  VKFUNDEFINE(glFlushStaticDataIBM);
  // GLAPI void APIENTRY glColorPointerListIBM (GLint size, GLenum type, GLint
  // stride, const void **pointer, GLint ptrstride);
  VKFUNDEFINE(glColorPointerListIBM);
  // GLAPI void APIENTRY glSecondaryColorPointerListIBM (GLint size, GLenum
  // type, GLint stride, const void **pointer, GLint ptrstride);
  VKFUNDEFINE(glSecondaryColorPointerListIBM);
  // GLAPI void APIENTRY glEdgeFlagPointerListIBM (GLint stride, const GLboolean
  // **pointer, GLint ptrstride);
  VKFUNDEFINE(glEdgeFlagPointerListIBM);
  // GLAPI void APIENTRY glFogCoordPointerListIBM (GLenum type, GLint stride,
  // const void **pointer, GLint ptrstride);
  VKFUNDEFINE(glFogCoordPointerListIBM);
  // GLAPI void APIENTRY glIndexPointerListIBM (GLenum type, GLint stride, const
  // void **pointer, GLint ptrstride);
  VKFUNDEFINE(glIndexPointerListIBM);
  // GLAPI void APIENTRY glNormalPointerListIBM (GLenum type, GLint stride,
  // const void **pointer, GLint ptrstride);
  VKFUNDEFINE(glNormalPointerListIBM);
  // GLAPI void APIENTRY glTexCoordPointerListIBM (GLint size, GLenum type,
  // GLint stride, const void **pointer, GLint ptrstride);
  VKFUNDEFINE(glTexCoordPointerListIBM);
  // GLAPI void APIENTRY glVertexPointerListIBM (GLint size, GLenum type, GLint
  // stride, const void **pointer, GLint ptrstride);
  VKFUNDEFINE(glVertexPointerListIBM);
  // GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum
  // dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  VKFUNDEFINE(glBlendFuncSeparateINGR);
  // GLAPI void APIENTRY glApplyFramebufferAttachmentCMAAINTEL (void);
  VKFUNDEFINE(glApplyFramebufferAttachmentCMAAINTEL);
  // GLAPI void APIENTRY glSyncTextureINTEL (GLuint texture);
  VKFUNDEFINE(glSyncTextureINTEL);
  // GLAPI void APIENTRY glUnmapTexture2DINTEL (GLuint texture, GLint level);
  VKFUNDEFINE(glUnmapTexture2DINTEL);
  // GLAPI void *APIENTRY glMapTexture2DINTEL (GLuint texture, GLint level,
  // GLbitfield access, GLint *stride, GLenum *layout);
  VKFUNDEFINE(glMapTexture2DINTEL);
  // GLAPI void APIENTRY glVertexPointervINTEL (GLint size, GLenum type, const
  // void **pointer);
  VKFUNDEFINE(glVertexPointervINTEL);
  // GLAPI void APIENTRY glNormalPointervINTEL (GLenum type, const void
  // **pointer);
  VKFUNDEFINE(glNormalPointervINTEL);
  // GLAPI void APIENTRY glColorPointervINTEL (GLint size, GLenum type, const
  // void **pointer);
  VKFUNDEFINE(glColorPointervINTEL);
  // GLAPI void APIENTRY glTexCoordPointervINTEL (GLint size, GLenum type, const
  // void **pointer);
  VKFUNDEFINE(glTexCoordPointervINTEL);
  // GLAPI void APIENTRY glBeginPerfQueryINTEL (GLuint queryHandle);
  VKFUNDEFINE(glBeginPerfQueryINTEL);
  // GLAPI void APIENTRY glCreatePerfQueryINTEL (GLuint queryId, GLuint
  // *queryHandle);
  VKFUNDEFINE(glCreatePerfQueryINTEL);
  // GLAPI void APIENTRY glDeletePerfQueryINTEL (GLuint queryHandle);
  VKFUNDEFINE(glDeletePerfQueryINTEL);
  // GLAPI void APIENTRY glEndPerfQueryINTEL (GLuint queryHandle);
  VKFUNDEFINE(glEndPerfQueryINTEL);
  // GLAPI void APIENTRY glGetFirstPerfQueryIdINTEL (GLuint *queryId);
  VKFUNDEFINE(glGetFirstPerfQueryIdINTEL);
  // GLAPI void APIENTRY glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint
  // *nextQueryId);
  VKFUNDEFINE(glGetNextPerfQueryIdINTEL);
  // GLAPI void APIENTRY glGetPerfCounterInfoINTEL (GLuint queryId, GLuint
  // counterId, GLuint counterNameLength, GLchar *counterName, GLuint
  // counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint
  // *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum,
  // GLuint64 *rawCounterMaxValue);
  VKFUNDEFINE(glGetPerfCounterInfoINTEL);
  // GLAPI void APIENTRY glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint
  // flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
  VKFUNDEFINE(glGetPerfQueryDataINTEL);
  // GLAPI void APIENTRY glGetPerfQueryIdByNameINTEL (GLchar *queryName, GLuint
  // *queryId);
  VKFUNDEFINE(glGetPerfQueryIdByNameINTEL);
  // GLAPI void APIENTRY glGetPerfQueryInfoINTEL (GLuint queryId, GLuint
  // queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters,
  // GLuint *noInstances, GLuint *capsMask);
  VKFUNDEFINE(glGetPerfQueryInfoINTEL);
  // GLAPI void APIENTRY glFramebufferParameteriMESA (GLenum target, GLenum
  // pname, GLint param);
  VKFUNDEFINE(glFramebufferParameteriMESA);
  // GLAPI void APIENTRY glGetFramebufferParameterivMESA (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferParameterivMESA);
  // GLAPI void APIENTRY glResizeBuffersMESA (void);
  VKFUNDEFINE(glResizeBuffersMESA);
  // GLAPI void APIENTRY glWindowPos2dMESA (GLdouble x, GLdouble y);
  VKFUNDEFINE(glWindowPos2dMESA);
  // GLAPI void APIENTRY glWindowPos2dvMESA (const GLdouble *v);
  VKFUNDEFINE(glWindowPos2dvMESA);
  // GLAPI void APIENTRY glWindowPos2fMESA (GLfloat x, GLfloat y);
  VKFUNDEFINE(glWindowPos2fMESA);
  // GLAPI void APIENTRY glWindowPos2fvMESA (const GLfloat *v);
  VKFUNDEFINE(glWindowPos2fvMESA);
  // GLAPI void APIENTRY glWindowPos2iMESA (GLint x, GLint y);
  VKFUNDEFINE(glWindowPos2iMESA);
  // GLAPI void APIENTRY glWindowPos2ivMESA (const GLint *v);
  VKFUNDEFINE(glWindowPos2ivMESA);
  // GLAPI void APIENTRY glWindowPos2sMESA (GLshort x, GLshort y);
  VKFUNDEFINE(glWindowPos2sMESA);
  // GLAPI void APIENTRY glWindowPos2svMESA (const GLshort *v);
  VKFUNDEFINE(glWindowPos2svMESA);
  // GLAPI void APIENTRY glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z);
  VKFUNDEFINE(glWindowPos3dMESA);
  // GLAPI void APIENTRY glWindowPos3dvMESA (const GLdouble *v);
  VKFUNDEFINE(glWindowPos3dvMESA);
  // GLAPI void APIENTRY glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glWindowPos3fMESA);
  // GLAPI void APIENTRY glWindowPos3fvMESA (const GLfloat *v);
  VKFUNDEFINE(glWindowPos3fvMESA);
  // GLAPI void APIENTRY glWindowPos3iMESA (GLint x, GLint y, GLint z);
  VKFUNDEFINE(glWindowPos3iMESA);
  // GLAPI void APIENTRY glWindowPos3ivMESA (const GLint *v);
  VKFUNDEFINE(glWindowPos3ivMESA);
  // GLAPI void APIENTRY glWindowPos3sMESA (GLshort x, GLshort y, GLshort z);
  VKFUNDEFINE(glWindowPos3sMESA);
  // GLAPI void APIENTRY glWindowPos3svMESA (const GLshort *v);
  VKFUNDEFINE(glWindowPos3svMESA);
  // GLAPI void APIENTRY glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z,
  // GLdouble w);
  VKFUNDEFINE(glWindowPos4dMESA);
  // GLAPI void APIENTRY glWindowPos4dvMESA (const GLdouble *v);
  VKFUNDEFINE(glWindowPos4dvMESA);
  // GLAPI void APIENTRY glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z,
  // GLfloat w);
  VKFUNDEFINE(glWindowPos4fMESA);
  // GLAPI void APIENTRY glWindowPos4fvMESA (const GLfloat *v);
  VKFUNDEFINE(glWindowPos4fvMESA);
  // GLAPI void APIENTRY glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w);
  VKFUNDEFINE(glWindowPos4iMESA);
  // GLAPI void APIENTRY glWindowPos4ivMESA (const GLint *v);
  VKFUNDEFINE(glWindowPos4ivMESA);
  // GLAPI void APIENTRY glWindowPos4sMESA (GLshort x, GLshort y, GLshort z,
  // GLshort w);
  VKFUNDEFINE(glWindowPos4sMESA);
  // GLAPI void APIENTRY glWindowPos4svMESA (const GLshort *v);
  VKFUNDEFINE(glWindowPos4svMESA);
  // GLAPI void APIENTRY glBeginConditionalRenderNVX (GLuint id);
  VKFUNDEFINE(glBeginConditionalRenderNVX);
  // GLAPI void APIENTRY glEndConditionalRenderNVX (void);
  VKFUNDEFINE(glEndConditionalRenderNVX);
  // GLAPI void APIENTRY glUploadGpuMaskNVX (GLbitfield mask);
  VKFUNDEFINE(glUploadGpuMaskNVX);
  // GLAPI void APIENTRY glMulticastViewportArrayvNVX (GLuint gpu, GLuint first,
  // GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glMulticastViewportArrayvNVX);
  // GLAPI void APIENTRY glMulticastViewportPositionWScaleNVX (GLuint gpu,
  // GLuint index, GLfloat xcoeff, GLfloat ycoeff);
  VKFUNDEFINE(glMulticastViewportPositionWScaleNVX);
  // GLAPI void APIENTRY glMulticastScissorArrayvNVX (GLuint gpu, GLuint first,
  // GLsizei count, const GLint *v);
  VKFUNDEFINE(glMulticastScissorArrayvNVX);
  // GLAPI GLuint APIENTRY glAsyncCopyBufferSubDataNVX (GLsizei
  // waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64
  // *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint
  // readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset,
  // GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint
  // *signalSemaphoreArray, const GLuint64 *signalValueArray);
  VKFUNDEFINE(glAsyncCopyBufferSubDataNVX);
  // GLAPI GLuint APIENTRY glAsyncCopyImageSubDataNVX (GLsizei
  // waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64
  // *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName,
  // GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ,
  // GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY,
  // GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei
  // signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64
  // *signalValueArray);
  VKFUNDEFINE(glAsyncCopyImageSubDataNVX);
  // GLAPI void APIENTRY glLGPUNamedBufferSubDataNVX (GLbitfield gpuMask, GLuint
  // buffer, GLintptr offset, GLsizeiptr size, const void *data);
  VKFUNDEFINE(glLGPUNamedBufferSubDataNVX);
  // GLAPI void APIENTRY glLGPUCopyImageSubDataNVX (GLuint sourceGpu, GLbitfield
  // destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint
  // srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint
  // dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei
  // height, GLsizei depth);
  VKFUNDEFINE(glLGPUCopyImageSubDataNVX);
  // GLAPI void APIENTRY glLGPUInterlockNVX (void);
  VKFUNDEFINE(glLGPUInterlockNVX);
  // GLAPI GLuint APIENTRY glCreateProgressFenceNVX (void);
  VKFUNDEFINE(glCreateProgressFenceNVX);
  // GLAPI void APIENTRY glSignalSemaphoreui64NVX (GLuint signalGpu, GLsizei
  // fenceObjectCount, const GLuint *semaphoreArray, const GLuint64
  // *fenceValueArray);
  VKFUNDEFINE(glSignalSemaphoreui64NVX);
  // GLAPI void APIENTRY glWaitSemaphoreui64NVX (GLuint waitGpu, GLsizei
  // fenceObjectCount, const GLuint *semaphoreArray, const GLuint64
  // *fenceValueArray);
  VKFUNDEFINE(glWaitSemaphoreui64NVX);
  // GLAPI void APIENTRY glClientWaitSemaphoreui64NVX (GLsizei fenceObjectCount,
  // const GLuint *semaphoreArray, const GLuint64 *fenceValueArray);
  VKFUNDEFINE(glClientWaitSemaphoreui64NVX);
  // GLAPI void APIENTRY glAlphaToCoverageDitherControlNV (GLenum mode);
  VKFUNDEFINE(glAlphaToCoverageDitherControlNV);
  // GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessNV (GLenum mode, const
  // void *indirect, GLsizei drawCount, GLsizei stride, GLint
  // vertexBufferCount);
  VKFUNDEFINE(glMultiDrawArraysIndirectBindlessNV);
  // GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessNV (GLenum mode,
  // GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint
  // vertexBufferCount);
  VKFUNDEFINE(glMultiDrawElementsIndirectBindlessNV);
  // GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessCountNV (GLenum mode,
  // const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei
  // stride, GLint vertexBufferCount);
  VKFUNDEFINE(glMultiDrawArraysIndirectBindlessCountNV);
  // GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessCountNV (GLenum
  // mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei
  // maxDrawCount, GLsizei stride, GLint vertexBufferCount);
  VKFUNDEFINE(glMultiDrawElementsIndirectBindlessCountNV);
  // GLAPI GLuint64 APIENTRY glGetTextureHandleNV (GLuint texture);
  VKFUNDEFINE(glGetTextureHandleNV);
  // GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleNV (GLuint texture, GLuint
  // sampler);
  VKFUNDEFINE(glGetTextureSamplerHandleNV);
  // GLAPI void APIENTRY glMakeTextureHandleResidentNV (GLuint64 handle);
  VKFUNDEFINE(glMakeTextureHandleResidentNV);
  // GLAPI void APIENTRY glMakeTextureHandleNonResidentNV (GLuint64 handle);
  VKFUNDEFINE(glMakeTextureHandleNonResidentNV);
  // GLAPI GLuint64 APIENTRY glGetImageHandleNV (GLuint texture, GLint level,
  // GLboolean layered, GLint layer, GLenum format);
  VKFUNDEFINE(glGetImageHandleNV);
  // GLAPI void APIENTRY glMakeImageHandleResidentNV (GLuint64 handle, GLenum
  // access);
  VKFUNDEFINE(glMakeImageHandleResidentNV);
  // GLAPI void APIENTRY glMakeImageHandleNonResidentNV (GLuint64 handle);
  VKFUNDEFINE(glMakeImageHandleNonResidentNV);
  // GLAPI void APIENTRY glUniformHandleui64NV (GLint location, GLuint64 value);
  VKFUNDEFINE(glUniformHandleui64NV);
  // GLAPI void APIENTRY glUniformHandleui64vNV (GLint location, GLsizei count,
  // const GLuint64 *value);
  VKFUNDEFINE(glUniformHandleui64vNV);
  // GLAPI void APIENTRY glProgramUniformHandleui64NV (GLuint program, GLint
  // location, GLuint64 value);
  VKFUNDEFINE(glProgramUniformHandleui64NV);
  // GLAPI void APIENTRY glProgramUniformHandleui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64 *values);
  VKFUNDEFINE(glProgramUniformHandleui64vNV);
  // GLAPI GLboolean APIENTRY glIsTextureHandleResidentNV (GLuint64 handle);
  VKFUNDEFINE(glIsTextureHandleResidentNV);
  // GLAPI GLboolean APIENTRY glIsImageHandleResidentNV (GLuint64 handle);
  VKFUNDEFINE(glIsImageHandleResidentNV);
  // GLAPI void APIENTRY glBlendParameteriNV (GLenum pname, GLint value);
  VKFUNDEFINE(glBlendParameteriNV);
  // GLAPI void APIENTRY glBlendBarrierNV (void);
  VKFUNDEFINE(glBlendBarrierNV);
  // GLAPI void APIENTRY glViewportPositionWScaleNV (GLuint index, GLfloat
  // xcoeff, GLfloat ycoeff);
  VKFUNDEFINE(glViewportPositionWScaleNV);
  // GLAPI void APIENTRY glCreateStatesNV (GLsizei n, GLuint *states);
  VKFUNDEFINE(glCreateStatesNV);
  // GLAPI void APIENTRY glDeleteStatesNV (GLsizei n, const GLuint *states);
  VKFUNDEFINE(glDeleteStatesNV);
  // GLAPI GLboolean APIENTRY glIsStateNV (GLuint state);
  VKFUNDEFINE(glIsStateNV);
  // GLAPI void APIENTRY glStateCaptureNV (GLuint state, GLenum mode);
  VKFUNDEFINE(glStateCaptureNV);
  // GLAPI GLuint APIENTRY glGetCommandHeaderNV (GLenum tokenID, GLuint size);
  VKFUNDEFINE(glGetCommandHeaderNV);
  // GLAPI GLushort APIENTRY glGetStageIndexNV (GLenum shadertype);
  VKFUNDEFINE(glGetStageIndexNV);
  // GLAPI void APIENTRY glDrawCommandsNV (GLenum primitiveMode, GLuint buffer,
  // const GLintptr *indirects, const GLsizei *sizes, GLuint count);
  VKFUNDEFINE(glDrawCommandsNV);
  // GLAPI void APIENTRY glDrawCommandsAddressNV (GLenum primitiveMode, const
  // GLuint64 *indirects, const GLsizei *sizes, GLuint count);
  VKFUNDEFINE(glDrawCommandsAddressNV);
  // GLAPI void APIENTRY glDrawCommandsStatesNV (GLuint buffer, const GLintptr
  // *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos,
  // GLuint count);
  VKFUNDEFINE(glDrawCommandsStatesNV);
  // GLAPI void APIENTRY glDrawCommandsStatesAddressNV (const GLuint64
  // *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos,
  // GLuint count);
  VKFUNDEFINE(glDrawCommandsStatesAddressNV);
  // GLAPI void APIENTRY glCreateCommandListsNV (GLsizei n, GLuint *lists);
  VKFUNDEFINE(glCreateCommandListsNV);
  // GLAPI void APIENTRY glDeleteCommandListsNV (GLsizei n, const GLuint
  // *lists);
  VKFUNDEFINE(glDeleteCommandListsNV);
  // GLAPI GLboolean APIENTRY glIsCommandListNV (GLuint list);
  VKFUNDEFINE(glIsCommandListNV);
  // GLAPI void APIENTRY glListDrawCommandsStatesClientNV (GLuint list, GLuint
  // segment, const void **indirects, const GLsizei *sizes, const GLuint
  // *states, const GLuint *fbos, GLuint count);
  VKFUNDEFINE(glListDrawCommandsStatesClientNV);
  // GLAPI void APIENTRY glCommandListSegmentsNV (GLuint list, GLuint segments);
  VKFUNDEFINE(glCommandListSegmentsNV);
  // GLAPI void APIENTRY glCompileCommandListNV (GLuint list);
  VKFUNDEFINE(glCompileCommandListNV);
  // GLAPI void APIENTRY glCallCommandListNV (GLuint list);
  VKFUNDEFINE(glCallCommandListNV);
  // GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode);
  VKFUNDEFINE(glBeginConditionalRenderNV);
  // GLAPI void APIENTRY glEndConditionalRenderNV (void);
  VKFUNDEFINE(glEndConditionalRenderNV);
  // GLAPI void APIENTRY glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits);
  VKFUNDEFINE(glSubpixelPrecisionBiasNV);
  // GLAPI void APIENTRY glConservativeRasterParameterfNV (GLenum pname, GLfloat
  // value);
  VKFUNDEFINE(glConservativeRasterParameterfNV);
  // GLAPI void APIENTRY glConservativeRasterParameteriNV (GLenum pname, GLint
  // param);
  VKFUNDEFINE(glConservativeRasterParameteriNV);
  // GLAPI void APIENTRY glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget,
  // GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum
  // dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei
  // width, GLsizei height, GLsizei depth);
  VKFUNDEFINE(glCopyImageSubDataNV);
  // GLAPI void APIENTRY glDepthRangedNV (GLdouble zNear, GLdouble zFar);
  VKFUNDEFINE(glDepthRangedNV);
  // GLAPI void APIENTRY glClearDepthdNV (GLdouble depth);
  VKFUNDEFINE(glClearDepthdNV);
  // GLAPI void APIENTRY glDepthBoundsdNV (GLdouble zmin, GLdouble zmax);
  VKFUNDEFINE(glDepthBoundsdNV);
  // GLAPI void APIENTRY glDrawTextureNV (GLuint texture, GLuint sampler,
  // GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0,
  // GLfloat t0, GLfloat s1, GLfloat t1);
  VKFUNDEFINE(glDrawTextureNV);
  // GLAPI void APIENTRY glDrawVkImageNV (GLuint64 vkImage, GLuint sampler,
  // GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0,
  // GLfloat t0, GLfloat s1, GLfloat t1);
  VKFUNDEFINE(glDrawVkImageNV);
  // GLAPI GLVULKANPROCNV APIENTRY glGetVkProcAddrNV (const GLchar *name);
  VKFUNDEFINE(glGetVkProcAddrNV);
  // GLAPI void APIENTRY glWaitVkSemaphoreNV (GLuint64 vkSemaphore);
  VKFUNDEFINE(glWaitVkSemaphoreNV);
  // GLAPI void APIENTRY glSignalVkSemaphoreNV (GLuint64 vkSemaphore);
  VKFUNDEFINE(glSignalVkSemaphoreNV);
  // GLAPI void APIENTRY glSignalVkFenceNV (GLuint64 vkFence);
  VKFUNDEFINE(glSignalVkFenceNV);
  // GLAPI void APIENTRY glMapControlPointsNV (GLenum target, GLuint index,
  // GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder,
  // GLboolean packed, const void *points);
  VKFUNDEFINE(glMapControlPointsNV);
  // GLAPI void APIENTRY glMapParameterivNV (GLenum target, GLenum pname, const
  // GLint *params);
  VKFUNDEFINE(glMapParameterivNV);
  // GLAPI void APIENTRY glMapParameterfvNV (GLenum target, GLenum pname, const
  // GLfloat *params);
  VKFUNDEFINE(glMapParameterfvNV);
  // GLAPI void APIENTRY glGetMapControlPointsNV (GLenum target, GLuint index,
  // GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void
  // *points);
  VKFUNDEFINE(glGetMapControlPointsNV);
  // GLAPI void APIENTRY glGetMapParameterivNV (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetMapParameterivNV);
  // GLAPI void APIENTRY glGetMapParameterfvNV (GLenum target, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetMapParameterfvNV);
  // GLAPI void APIENTRY glGetMapAttribParameterivNV (GLenum target, GLuint
  // index, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMapAttribParameterivNV);
  // GLAPI void APIENTRY glGetMapAttribParameterfvNV (GLenum target, GLuint
  // index, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetMapAttribParameterfvNV);
  // GLAPI void APIENTRY glEvalMapsNV (GLenum target, GLenum mode);
  VKFUNDEFINE(glEvalMapsNV);
  // GLAPI void APIENTRY glGetMultisamplefvNV (GLenum pname, GLuint index,
  // GLfloat *val);
  VKFUNDEFINE(glGetMultisamplefvNV);
  // GLAPI void APIENTRY glSampleMaskIndexedNV (GLuint index, GLbitfield mask);
  VKFUNDEFINE(glSampleMaskIndexedNV);
  // GLAPI void APIENTRY glTexRenderbufferNV (GLenum target, GLuint
  // renderbuffer);
  VKFUNDEFINE(glTexRenderbufferNV);
  // GLAPI void APIENTRY glDeleteFencesNV (GLsizei n, const GLuint *fences);
  VKFUNDEFINE(glDeleteFencesNV);
  // GLAPI void APIENTRY glGenFencesNV (GLsizei n, GLuint *fences);
  VKFUNDEFINE(glGenFencesNV);
  // GLAPI GLboolean APIENTRY glIsFenceNV (GLuint fence);
  VKFUNDEFINE(glIsFenceNV);
  // GLAPI GLboolean APIENTRY glTestFenceNV (GLuint fence);
  VKFUNDEFINE(glTestFenceNV);
  // GLAPI void APIENTRY glGetFenceivNV (GLuint fence, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetFenceivNV);
  // GLAPI void APIENTRY glFinishFenceNV (GLuint fence);
  VKFUNDEFINE(glFinishFenceNV);
  // GLAPI void APIENTRY glSetFenceNV (GLuint fence, GLenum condition);
  VKFUNDEFINE(glSetFenceNV);
  // GLAPI void APIENTRY glFragmentCoverageColorNV (GLuint color);
  VKFUNDEFINE(glFragmentCoverageColorNV);
  // GLAPI void APIENTRY glProgramNamedParameter4fNV (GLuint id, GLsizei len,
  // const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glProgramNamedParameter4fNV);
  // GLAPI void APIENTRY glProgramNamedParameter4fvNV (GLuint id, GLsizei len,
  // const GLubyte *name, const GLfloat *v);
  VKFUNDEFINE(glProgramNamedParameter4fvNV);
  // GLAPI void APIENTRY glProgramNamedParameter4dNV (GLuint id, GLsizei len,
  // const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glProgramNamedParameter4dNV);
  // GLAPI void APIENTRY glProgramNamedParameter4dvNV (GLuint id, GLsizei len,
  // const GLubyte *name, const GLdouble *v);
  VKFUNDEFINE(glProgramNamedParameter4dvNV);
  // GLAPI void APIENTRY glGetProgramNamedParameterfvNV (GLuint id, GLsizei len,
  // const GLubyte *name, GLfloat *params);
  VKFUNDEFINE(glGetProgramNamedParameterfvNV);
  // GLAPI void APIENTRY glGetProgramNamedParameterdvNV (GLuint id, GLsizei len,
  // const GLubyte *name, GLdouble *params);
  VKFUNDEFINE(glGetProgramNamedParameterdvNV);
  // GLAPI void APIENTRY glCoverageModulationTableNV (GLsizei n, const GLfloat
  // *v);
  VKFUNDEFINE(glCoverageModulationTableNV);
  // GLAPI void APIENTRY glGetCoverageModulationTableNV (GLsizei bufSize,
  // GLfloat *v);
  VKFUNDEFINE(glGetCoverageModulationTableNV);
  // GLAPI void APIENTRY glCoverageModulationNV (GLenum components);
  VKFUNDEFINE(glCoverageModulationNV);
  // GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum
  // target, GLsizei coverageSamples, GLsizei colorSamples, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleCoverageNV);
  // GLAPI void APIENTRY glProgramVertexLimitNV (GLenum target, GLint limit);
  VKFUNDEFINE(glProgramVertexLimitNV);
  // GLAPI void APIENTRY glFramebufferTextureEXT (GLenum target, GLenum
  // attachment, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTextureEXT);
  // GLAPI void APIENTRY glFramebufferTextureFaceEXT (GLenum target, GLenum
  // attachment, GLuint texture, GLint level, GLenum face);
  VKFUNDEFINE(glFramebufferTextureFaceEXT);
  // GLAPI void APIENTRY glRenderGpuMaskNV (GLbitfield mask);
  VKFUNDEFINE(glRenderGpuMaskNV);
  // GLAPI void APIENTRY glMulticastBufferSubDataNV (GLbitfield gpuMask, GLuint
  // buffer, GLintptr offset, GLsizeiptr size, const void *data);
  VKFUNDEFINE(glMulticastBufferSubDataNV);
  // GLAPI void APIENTRY glMulticastCopyBufferSubDataNV (GLuint readGpu,
  // GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr
  // readOffset, GLintptr writeOffset, GLsizeiptr size);
  VKFUNDEFINE(glMulticastCopyBufferSubDataNV);
  // GLAPI void APIENTRY glMulticastCopyImageSubDataNV (GLuint srcGpu,
  // GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel,
  // GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint
  // dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei
  // srcHeight, GLsizei srcDepth);
  VKFUNDEFINE(glMulticastCopyImageSubDataNV);
  // GLAPI void APIENTRY glMulticastBlitFramebufferNV (GLuint srcGpu, GLuint
  // dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0,
  // GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glMulticastBlitFramebufferNV);
  // GLAPI void APIENTRY glMulticastFramebufferSampleLocationsfvNV (GLuint gpu,
  // GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glMulticastFramebufferSampleLocationsfvNV);
  // GLAPI void APIENTRY glMulticastBarrierNV (void);
  VKFUNDEFINE(glMulticastBarrierNV);
  // GLAPI void APIENTRY glMulticastWaitSyncNV (GLuint signalGpu, GLbitfield
  // waitGpuMask);
  VKFUNDEFINE(glMulticastWaitSyncNV);
  // GLAPI void APIENTRY glMulticastGetQueryObjectivNV (GLuint gpu, GLuint id,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glMulticastGetQueryObjectivNV);
  // GLAPI void APIENTRY glMulticastGetQueryObjectuivNV (GLuint gpu, GLuint id,
  // GLenum pname, GLuint *params);
  VKFUNDEFINE(glMulticastGetQueryObjectuivNV);
  // GLAPI void APIENTRY glMulticastGetQueryObjecti64vNV (GLuint gpu, GLuint id,
  // GLenum pname, GLint64 *params);
  VKFUNDEFINE(glMulticastGetQueryObjecti64vNV);
  // GLAPI void APIENTRY glMulticastGetQueryObjectui64vNV (GLuint gpu, GLuint
  // id, GLenum pname, GLuint64 *params);
  VKFUNDEFINE(glMulticastGetQueryObjectui64vNV);
  // GLAPI void APIENTRY glProgramLocalParameterI4iNV (GLenum target, GLuint
  // index, GLint x, GLint y, GLint z, GLint w);
  VKFUNDEFINE(glProgramLocalParameterI4iNV);
  // GLAPI void APIENTRY glProgramLocalParameterI4ivNV (GLenum target, GLuint
  // index, const GLint *params);
  VKFUNDEFINE(glProgramLocalParameterI4ivNV);
  // GLAPI void APIENTRY glProgramLocalParametersI4ivNV (GLenum target, GLuint
  // index, GLsizei count, const GLint *params);
  VKFUNDEFINE(glProgramLocalParametersI4ivNV);
  // GLAPI void APIENTRY glProgramLocalParameterI4uiNV (GLenum target, GLuint
  // index, GLuint x, GLuint y, GLuint z, GLuint w);
  VKFUNDEFINE(glProgramLocalParameterI4uiNV);
  // GLAPI void APIENTRY glProgramLocalParameterI4uivNV (GLenum target, GLuint
  // index, const GLuint *params);
  VKFUNDEFINE(glProgramLocalParameterI4uivNV);
  // GLAPI void APIENTRY glProgramLocalParametersI4uivNV (GLenum target, GLuint
  // index, GLsizei count, const GLuint *params);
  VKFUNDEFINE(glProgramLocalParametersI4uivNV);
  // GLAPI void APIENTRY glProgramEnvParameterI4iNV (GLenum target, GLuint
  // index, GLint x, GLint y, GLint z, GLint w);
  VKFUNDEFINE(glProgramEnvParameterI4iNV);
  // GLAPI void APIENTRY glProgramEnvParameterI4ivNV (GLenum target, GLuint
  // index, const GLint *params);
  VKFUNDEFINE(glProgramEnvParameterI4ivNV);
  // GLAPI void APIENTRY glProgramEnvParametersI4ivNV (GLenum target, GLuint
  // index, GLsizei count, const GLint *params);
  VKFUNDEFINE(glProgramEnvParametersI4ivNV);
  // GLAPI void APIENTRY glProgramEnvParameterI4uiNV (GLenum target, GLuint
  // index, GLuint x, GLuint y, GLuint z, GLuint w);
  VKFUNDEFINE(glProgramEnvParameterI4uiNV);
  // GLAPI void APIENTRY glProgramEnvParameterI4uivNV (GLenum target, GLuint
  // index, const GLuint *params);
  VKFUNDEFINE(glProgramEnvParameterI4uivNV);
  // GLAPI void APIENTRY glProgramEnvParametersI4uivNV (GLenum target, GLuint
  // index, GLsizei count, const GLuint *params);
  VKFUNDEFINE(glProgramEnvParametersI4uivNV);
  // GLAPI void APIENTRY glGetProgramLocalParameterIivNV (GLenum target, GLuint
  // index, GLint *params);
  VKFUNDEFINE(glGetProgramLocalParameterIivNV);
  // GLAPI void APIENTRY glGetProgramLocalParameterIuivNV (GLenum target, GLuint
  // index, GLuint *params);
  VKFUNDEFINE(glGetProgramLocalParameterIuivNV);
  // GLAPI void APIENTRY glGetProgramEnvParameterIivNV (GLenum target, GLuint
  // index, GLint *params);
  VKFUNDEFINE(glGetProgramEnvParameterIivNV);
  // GLAPI void APIENTRY glGetProgramEnvParameterIuivNV (GLenum target, GLuint
  // index, GLuint *params);
  VKFUNDEFINE(glGetProgramEnvParameterIuivNV);
  // GLAPI void APIENTRY glProgramSubroutineParametersuivNV (GLenum target,
  // GLsizei count, const GLuint *params);
  VKFUNDEFINE(glProgramSubroutineParametersuivNV);
  // GLAPI void APIENTRY glGetProgramSubroutineParameteruivNV (GLenum target,
  // GLuint index, GLuint *param);
  VKFUNDEFINE(glGetProgramSubroutineParameteruivNV);
  // GLAPI void APIENTRY glVertex2hNV (GLhalfNV x, GLhalfNV y);
  VKFUNDEFINE(glVertex2hNV);
  // GLAPI void APIENTRY glVertex2hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glVertex2hvNV);
  // GLAPI void APIENTRY glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z);
  VKFUNDEFINE(glVertex3hNV);
  // GLAPI void APIENTRY glVertex3hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glVertex3hvNV);
  // GLAPI void APIENTRY glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z,
  // GLhalfNV w);
  VKFUNDEFINE(glVertex4hNV);
  // GLAPI void APIENTRY glVertex4hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glVertex4hvNV);
  // GLAPI void APIENTRY glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
  VKFUNDEFINE(glNormal3hNV);
  // GLAPI void APIENTRY glNormal3hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glNormal3hvNV);
  // GLAPI void APIENTRY glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV
  // blue);
  VKFUNDEFINE(glColor3hNV);
  // GLAPI void APIENTRY glColor3hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glColor3hvNV);
  // GLAPI void APIENTRY glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV
  // blue, GLhalfNV alpha);
  VKFUNDEFINE(glColor4hNV);
  // GLAPI void APIENTRY glColor4hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glColor4hvNV);
  // GLAPI void APIENTRY glTexCoord1hNV (GLhalfNV s);
  VKFUNDEFINE(glTexCoord1hNV);
  // GLAPI void APIENTRY glTexCoord1hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glTexCoord1hvNV);
  // GLAPI void APIENTRY glTexCoord2hNV (GLhalfNV s, GLhalfNV t);
  VKFUNDEFINE(glTexCoord2hNV);
  // GLAPI void APIENTRY glTexCoord2hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glTexCoord2hvNV);
  // GLAPI void APIENTRY glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r);
  VKFUNDEFINE(glTexCoord3hNV);
  // GLAPI void APIENTRY glTexCoord3hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glTexCoord3hvNV);
  // GLAPI void APIENTRY glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r,
  // GLhalfNV q);
  VKFUNDEFINE(glTexCoord4hNV);
  // GLAPI void APIENTRY glTexCoord4hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glTexCoord4hvNV);
  // GLAPI void APIENTRY glMultiTexCoord1hNV (GLenum target, GLhalfNV s);
  VKFUNDEFINE(glMultiTexCoord1hNV);
  // GLAPI void APIENTRY glMultiTexCoord1hvNV (GLenum target, const GLhalfNV
  // *v);
  VKFUNDEFINE(glMultiTexCoord1hvNV);
  // GLAPI void APIENTRY glMultiTexCoord2hNV (GLenum target, GLhalfNV s,
  // GLhalfNV t);
  VKFUNDEFINE(glMultiTexCoord2hNV);
  // GLAPI void APIENTRY glMultiTexCoord2hvNV (GLenum target, const GLhalfNV
  // *v);
  VKFUNDEFINE(glMultiTexCoord2hvNV);
  // GLAPI void APIENTRY glMultiTexCoord3hNV (GLenum target, GLhalfNV s,
  // GLhalfNV t, GLhalfNV r);
  VKFUNDEFINE(glMultiTexCoord3hNV);
  // GLAPI void APIENTRY glMultiTexCoord3hvNV (GLenum target, const GLhalfNV
  // *v);
  VKFUNDEFINE(glMultiTexCoord3hvNV);
  // GLAPI void APIENTRY glMultiTexCoord4hNV (GLenum target, GLhalfNV s,
  // GLhalfNV t, GLhalfNV r, GLhalfNV q);
  VKFUNDEFINE(glMultiTexCoord4hNV);
  // GLAPI void APIENTRY glMultiTexCoord4hvNV (GLenum target, const GLhalfNV
  // *v);
  VKFUNDEFINE(glMultiTexCoord4hvNV);
  // GLAPI void APIENTRY glVertexAttrib1hNV (GLuint index, GLhalfNV x);
  VKFUNDEFINE(glVertexAttrib1hNV);
  // GLAPI void APIENTRY glVertexAttrib1hvNV (GLuint index, const GLhalfNV *v);
  VKFUNDEFINE(glVertexAttrib1hvNV);
  // GLAPI void APIENTRY glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV
  // y);
  VKFUNDEFINE(glVertexAttrib2hNV);
  // GLAPI void APIENTRY glVertexAttrib2hvNV (GLuint index, const GLhalfNV *v);
  VKFUNDEFINE(glVertexAttrib2hvNV);
  // GLAPI void APIENTRY glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV
  // y, GLhalfNV z);
  VKFUNDEFINE(glVertexAttrib3hNV);
  // GLAPI void APIENTRY glVertexAttrib3hvNV (GLuint index, const GLhalfNV *v);
  VKFUNDEFINE(glVertexAttrib3hvNV);
  // GLAPI void APIENTRY glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV
  // y, GLhalfNV z, GLhalfNV w);
  VKFUNDEFINE(glVertexAttrib4hNV);
  // GLAPI void APIENTRY glVertexAttrib4hvNV (GLuint index, const GLhalfNV *v);
  VKFUNDEFINE(glVertexAttrib4hvNV);
  // GLAPI void APIENTRY glVertexAttribs1hvNV (GLuint index, GLsizei n, const
  // GLhalfNV *v);
  VKFUNDEFINE(glVertexAttribs1hvNV);
  // GLAPI void APIENTRY glVertexAttribs2hvNV (GLuint index, GLsizei n, const
  // GLhalfNV *v);
  VKFUNDEFINE(glVertexAttribs2hvNV);
  // GLAPI void APIENTRY glVertexAttribs3hvNV (GLuint index, GLsizei n, const
  // GLhalfNV *v);
  VKFUNDEFINE(glVertexAttribs3hvNV);
  // GLAPI void APIENTRY glVertexAttribs4hvNV (GLuint index, GLsizei n, const
  // GLhalfNV *v);
  VKFUNDEFINE(glVertexAttribs4hvNV);
  // GLAPI void APIENTRY glFogCoordhNV (GLhalfNV fog);
  VKFUNDEFINE(glFogCoordhNV);
  // GLAPI void APIENTRY glFogCoordhvNV (const GLhalfNV *fog);
  VKFUNDEFINE(glFogCoordhvNV);
  // GLAPI void APIENTRY glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green,
  // GLhalfNV blue);
  VKFUNDEFINE(glSecondaryColor3hNV);
  // GLAPI void APIENTRY glSecondaryColor3hvNV (const GLhalfNV *v);
  VKFUNDEFINE(glSecondaryColor3hvNV);
  // GLAPI void APIENTRY glVertexWeighthNV (GLhalfNV weight);
  VKFUNDEFINE(glVertexWeighthNV);
  // GLAPI void APIENTRY glVertexWeighthvNV (const GLhalfNV *weight);
  VKFUNDEFINE(glVertexWeighthvNV);
  // GLAPI void APIENTRY glGetInternalformatSampleivNV (GLenum target, GLenum
  // internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint
  // *params);
  VKFUNDEFINE(glGetInternalformatSampleivNV);
  // GLAPI void APIENTRY glGetMemoryObjectDetachedResourcesuivNV (GLuint memory,
  // GLenum pname, GLint first, GLsizei count, GLuint *params);
  VKFUNDEFINE(glGetMemoryObjectDetachedResourcesuivNV);
  // GLAPI void APIENTRY glResetMemoryObjectParameterNV (GLuint memory, GLenum
  // pname);
  VKFUNDEFINE(glResetMemoryObjectParameterNV);
  // GLAPI void APIENTRY glTexAttachMemoryNV (GLenum target, GLuint memory,
  // GLuint64 offset);
  VKFUNDEFINE(glTexAttachMemoryNV);
  // GLAPI void APIENTRY glBufferAttachMemoryNV (GLenum target, GLuint memory,
  // GLuint64 offset);
  VKFUNDEFINE(glBufferAttachMemoryNV);
  // GLAPI void APIENTRY glTextureAttachMemoryNV (GLuint texture, GLuint memory,
  // GLuint64 offset);
  VKFUNDEFINE(glTextureAttachMemoryNV);
  // GLAPI void APIENTRY glNamedBufferAttachMemoryNV (GLuint buffer, GLuint
  // memory, GLuint64 offset);
  VKFUNDEFINE(glNamedBufferAttachMemoryNV);
  // GLAPI void APIENTRY glBufferPageCommitmentMemNV (GLenum target, GLintptr
  // offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean
  // commit);
  VKFUNDEFINE(glBufferPageCommitmentMemNV);
  // GLAPI void APIENTRY glTexPageCommitmentMemNV (GLenum target, GLint layer,
  // GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width,
  // GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean
  // commit);
  VKFUNDEFINE(glTexPageCommitmentMemNV);
  // GLAPI void APIENTRY glNamedBufferPageCommitmentMemNV (GLuint buffer,
  // GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset,
  // GLboolean commit);
  VKFUNDEFINE(glNamedBufferPageCommitmentMemNV);
  // GLAPI void APIENTRY glTexturePageCommitmentMemNV (GLuint texture, GLint
  // layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei
  // width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset,
  // GLboolean commit);
  VKFUNDEFINE(glTexturePageCommitmentMemNV);
  // GLAPI void APIENTRY glDrawMeshTasksNV (GLuint first, GLuint count);
  VKFUNDEFINE(glDrawMeshTasksNV);
  // GLAPI void APIENTRY glDrawMeshTasksIndirectNV (GLintptr indirect);
  VKFUNDEFINE(glDrawMeshTasksIndirectNV);
  // GLAPI void APIENTRY glMultiDrawMeshTasksIndirectNV (GLintptr indirect,
  // GLsizei drawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawMeshTasksIndirectNV);
  // GLAPI void APIENTRY glMultiDrawMeshTasksIndirectCountNV (GLintptr indirect,
  // GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawMeshTasksIndirectCountNV);
  // GLAPI void APIENTRY glGenOcclusionQueriesNV (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glGenOcclusionQueriesNV);
  // GLAPI void APIENTRY glDeleteOcclusionQueriesNV (GLsizei n, const GLuint
  // *ids);
  VKFUNDEFINE(glDeleteOcclusionQueriesNV);
  // GLAPI GLboolean APIENTRY glIsOcclusionQueryNV (GLuint id);
  VKFUNDEFINE(glIsOcclusionQueryNV);
  // GLAPI void APIENTRY glBeginOcclusionQueryNV (GLuint id);
  VKFUNDEFINE(glBeginOcclusionQueryNV);
  // GLAPI void APIENTRY glEndOcclusionQueryNV (void);
  VKFUNDEFINE(glEndOcclusionQueryNV);
  // GLAPI void APIENTRY glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetOcclusionQueryivNV);
  // GLAPI void APIENTRY glGetOcclusionQueryuivNV (GLuint id, GLenum pname,
  // GLuint *params);
  VKFUNDEFINE(glGetOcclusionQueryuivNV);
  // GLAPI void APIENTRY glProgramBufferParametersfvNV (GLenum target, GLuint
  // bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
  VKFUNDEFINE(glProgramBufferParametersfvNV);
  // GLAPI void APIENTRY glProgramBufferParametersIivNV (GLenum target, GLuint
  // bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
  VKFUNDEFINE(glProgramBufferParametersIivNV);
  // GLAPI void APIENTRY glProgramBufferParametersIuivNV (GLenum target, GLuint
  // bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
  VKFUNDEFINE(glProgramBufferParametersIuivNV);
  // GLAPI GLuint APIENTRY glGenPathsNV (GLsizei range);
  VKFUNDEFINE(glGenPathsNV);
  // GLAPI void APIENTRY glDeletePathsNV (GLuint path, GLsizei range);
  VKFUNDEFINE(glDeletePathsNV);
  // GLAPI GLboolean APIENTRY glIsPathNV (GLuint path);
  VKFUNDEFINE(glIsPathNV);
  // GLAPI void APIENTRY glPathCommandsNV (GLuint path, GLsizei numCommands,
  // const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void
  // *coords);
  VKFUNDEFINE(glPathCommandsNV);
  // GLAPI void APIENTRY glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum
  // coordType, const void *coords);
  VKFUNDEFINE(glPathCoordsNV);
  // GLAPI void APIENTRY glPathSubCommandsNV (GLuint path, GLsizei commandStart,
  // GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands,
  // GLsizei numCoords, GLenum coordType, const void *coords);
  VKFUNDEFINE(glPathSubCommandsNV);
  // GLAPI void APIENTRY glPathSubCoordsNV (GLuint path, GLsizei coordStart,
  // GLsizei numCoords, GLenum coordType, const void *coords);
  VKFUNDEFINE(glPathSubCoordsNV);
  // GLAPI void APIENTRY glPathStringNV (GLuint path, GLenum format, GLsizei
  // length, const void *pathString);
  VKFUNDEFINE(glPathStringNV);
  // GLAPI void APIENTRY glPathGlyphsNV (GLuint firstPathName, GLenum
  // fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs,
  // GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint
  // pathParameterTemplate, GLfloat emScale);
  VKFUNDEFINE(glPathGlyphsNV);
  // GLAPI void APIENTRY glPathGlyphRangeNV (GLuint firstPathName, GLenum
  // fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph,
  // GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint
  // pathParameterTemplate, GLfloat emScale);
  VKFUNDEFINE(glPathGlyphRangeNV);
  // GLAPI void APIENTRY glWeightPathsNV (GLuint resultPath, GLsizei numPaths,
  // const GLuint *paths, const GLfloat *weights);
  VKFUNDEFINE(glWeightPathsNV);
  // GLAPI void APIENTRY glCopyPathNV (GLuint resultPath, GLuint srcPath);
  VKFUNDEFINE(glCopyPathNV);
  // GLAPI void APIENTRY glInterpolatePathsNV (GLuint resultPath, GLuint pathA,
  // GLuint pathB, GLfloat weight);
  VKFUNDEFINE(glInterpolatePathsNV);
  // GLAPI void APIENTRY glTransformPathNV (GLuint resultPath, GLuint srcPath,
  // GLenum transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glTransformPathNV);
  // GLAPI void APIENTRY glPathParameterivNV (GLuint path, GLenum pname, const
  // GLint *value);
  VKFUNDEFINE(glPathParameterivNV);
  // GLAPI void APIENTRY glPathParameteriNV (GLuint path, GLenum pname, GLint
  // value);
  VKFUNDEFINE(glPathParameteriNV);
  // GLAPI void APIENTRY glPathParameterfvNV (GLuint path, GLenum pname, const
  // GLfloat *value);
  VKFUNDEFINE(glPathParameterfvNV);
  // GLAPI void APIENTRY glPathParameterfNV (GLuint path, GLenum pname, GLfloat
  // value);
  VKFUNDEFINE(glPathParameterfNV);
  // GLAPI void APIENTRY glPathDashArrayNV (GLuint path, GLsizei dashCount,
  // const GLfloat *dashArray);
  VKFUNDEFINE(glPathDashArrayNV);
  // GLAPI void APIENTRY glPathStencilFuncNV (GLenum func, GLint ref, GLuint
  // mask);
  VKFUNDEFINE(glPathStencilFuncNV);
  // GLAPI void APIENTRY glPathStencilDepthOffsetNV (GLfloat factor, GLfloat
  // units);
  VKFUNDEFINE(glPathStencilDepthOffsetNV);
  // GLAPI void APIENTRY glStencilFillPathNV (GLuint path, GLenum fillMode,
  // GLuint mask);
  VKFUNDEFINE(glStencilFillPathNV);
  // GLAPI void APIENTRY glStencilStrokePathNV (GLuint path, GLint reference,
  // GLuint mask);
  VKFUNDEFINE(glStencilStrokePathNV);
  // GLAPI void APIENTRY glStencilFillPathInstancedNV (GLsizei numPaths, GLenum
  // pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint
  // mask, GLenum transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glStencilFillPathInstancedNV);
  // GLAPI void APIENTRY glStencilStrokePathInstancedNV (GLsizei numPaths,
  // GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference,
  // GLuint mask, GLenum transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glStencilStrokePathInstancedNV);
  // GLAPI void APIENTRY glPathCoverDepthFuncNV (GLenum func);
  VKFUNDEFINE(glPathCoverDepthFuncNV);
  // GLAPI void APIENTRY glCoverFillPathNV (GLuint path, GLenum coverMode);
  VKFUNDEFINE(glCoverFillPathNV);
  // GLAPI void APIENTRY glCoverStrokePathNV (GLuint path, GLenum coverMode);
  VKFUNDEFINE(glCoverStrokePathNV);
  // GLAPI void APIENTRY glCoverFillPathInstancedNV (GLsizei numPaths, GLenum
  // pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum
  // transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glCoverFillPathInstancedNV);
  // GLAPI void APIENTRY glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum
  // pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum
  // transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glCoverStrokePathInstancedNV);
  // GLAPI void APIENTRY glGetPathParameterivNV (GLuint path, GLenum pname,
  // GLint *value);
  VKFUNDEFINE(glGetPathParameterivNV);
  // GLAPI void APIENTRY glGetPathParameterfvNV (GLuint path, GLenum pname,
  // GLfloat *value);
  VKFUNDEFINE(glGetPathParameterfvNV);
  // GLAPI void APIENTRY glGetPathCommandsNV (GLuint path, GLubyte *commands);
  VKFUNDEFINE(glGetPathCommandsNV);
  // GLAPI void APIENTRY glGetPathCoordsNV (GLuint path, GLfloat *coords);
  VKFUNDEFINE(glGetPathCoordsNV);
  // GLAPI void APIENTRY glGetPathDashArrayNV (GLuint path, GLfloat *dashArray);
  VKFUNDEFINE(glGetPathDashArrayNV);
  // GLAPI void APIENTRY glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei
  // numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei
  // stride, GLfloat *metrics);
  VKFUNDEFINE(glGetPathMetricsNV);
  // GLAPI void APIENTRY glGetPathMetricRangeNV (GLbitfield metricQueryMask,
  // GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
  VKFUNDEFINE(glGetPathMetricRangeNV);
  // GLAPI void APIENTRY glGetPathSpacingNV (GLenum pathListMode, GLsizei
  // numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat
  // advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat
  // *returnedSpacing);
  VKFUNDEFINE(glGetPathSpacingNV);
  // GLAPI GLboolean APIENTRY glIsPointInFillPathNV (GLuint path, GLuint mask,
  // GLfloat x, GLfloat y);
  VKFUNDEFINE(glIsPointInFillPathNV);
  // GLAPI GLboolean APIENTRY glIsPointInStrokePathNV (GLuint path, GLfloat x,
  // GLfloat y);
  VKFUNDEFINE(glIsPointInStrokePathNV);
  // GLAPI GLfloat APIENTRY glGetPathLengthNV (GLuint path, GLsizei
  // startSegment, GLsizei numSegments);
  VKFUNDEFINE(glGetPathLengthNV);
  // GLAPI GLboolean APIENTRY glPointAlongPathNV (GLuint path, GLsizei
  // startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat
  // *y, GLfloat *tangentX, GLfloat *tangentY);
  VKFUNDEFINE(glPointAlongPathNV);
  // GLAPI void APIENTRY glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixLoad3x2fNV);
  // GLAPI void APIENTRY glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixLoad3x3fNV);
  // GLAPI void APIENTRY glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixLoadTranspose3x3fNV);
  // GLAPI void APIENTRY glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixMult3x2fNV);
  // GLAPI void APIENTRY glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixMult3x3fNV);
  // GLAPI void APIENTRY glMatrixMultTranspose3x3fNV (GLenum matrixMode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixMultTranspose3x3fNV);
  // GLAPI void APIENTRY glStencilThenCoverFillPathNV (GLuint path, GLenum
  // fillMode, GLuint mask, GLenum coverMode);
  VKFUNDEFINE(glStencilThenCoverFillPathNV);
  // GLAPI void APIENTRY glStencilThenCoverStrokePathNV (GLuint path, GLint
  // reference, GLuint mask, GLenum coverMode);
  VKFUNDEFINE(glStencilThenCoverStrokePathNV);
  // GLAPI void APIENTRY glStencilThenCoverFillPathInstancedNV (GLsizei
  // numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum
  // fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const
  // GLfloat *transformValues);
  VKFUNDEFINE(glStencilThenCoverFillPathInstancedNV);
  // GLAPI void APIENTRY glStencilThenCoverStrokePathInstancedNV (GLsizei
  // numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint
  // reference, GLuint mask, GLenum coverMode, GLenum transformType, const
  // GLfloat *transformValues);
  VKFUNDEFINE(glStencilThenCoverStrokePathInstancedNV);
  // GLAPI GLenum APIENTRY glPathGlyphIndexRangeNV (GLenum fontTarget, const
  // void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat
  // emScale, GLuint *baseAndCount);
  VKFUNDEFINE(glPathGlyphIndexRangeNV);
  // GLAPI GLenum APIENTRY glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum
  // fontTarget, const void *fontName, GLbitfield fontStyle, GLuint
  // firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat
  // emScale);
  VKFUNDEFINE(glPathGlyphIndexArrayNV);
  // GLAPI GLenum APIENTRY glPathMemoryGlyphIndexArrayNV (GLuint firstPathName,
  // GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei
  // faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint
  // pathParameterTemplate, GLfloat emScale);
  VKFUNDEFINE(glPathMemoryGlyphIndexArrayNV);
  // GLAPI void APIENTRY glProgramPathFragmentInputGenNV (GLuint program, GLint
  // location, GLenum genMode, GLint components, const GLfloat *coeffs);
  VKFUNDEFINE(glProgramPathFragmentInputGenNV);
  // GLAPI void APIENTRY glGetProgramResourcefvNV (GLuint program, GLenum
  // programInterface, GLuint index, GLsizei propCount, const GLenum *props,
  // GLsizei count, GLsizei *length, GLfloat *params);
  VKFUNDEFINE(glGetProgramResourcefvNV);
  // GLAPI void APIENTRY glPathColorGenNV (GLenum color, GLenum genMode, GLenum
  // colorFormat, const GLfloat *coeffs);
  VKFUNDEFINE(glPathColorGenNV);
  // GLAPI void APIENTRY glPathTexGenNV (GLenum texCoordSet, GLenum genMode,
  // GLint components, const GLfloat *coeffs);
  VKFUNDEFINE(glPathTexGenNV);
  // GLAPI void APIENTRY glPathFogGenNV (GLenum genMode);
  VKFUNDEFINE(glPathFogGenNV);
  // GLAPI void APIENTRY glGetPathColorGenivNV (GLenum color, GLenum pname,
  // GLint *value);
  VKFUNDEFINE(glGetPathColorGenivNV);
  // GLAPI void APIENTRY glGetPathColorGenfvNV (GLenum color, GLenum pname,
  // GLfloat *value);
  VKFUNDEFINE(glGetPathColorGenfvNV);
  // GLAPI void APIENTRY glGetPathTexGenivNV (GLenum texCoordSet, GLenum pname,
  // GLint *value);
  VKFUNDEFINE(glGetPathTexGenivNV);
  // GLAPI void APIENTRY glGetPathTexGenfvNV (GLenum texCoordSet, GLenum pname,
  // GLfloat *value);
  VKFUNDEFINE(glGetPathTexGenfvNV);
  // GLAPI void APIENTRY glPixelDataRangeNV (GLenum target, GLsizei length,
  // const void *pointer);
  VKFUNDEFINE(glPixelDataRangeNV);
  // GLAPI void APIENTRY glFlushPixelDataRangeNV (GLenum target);
  VKFUNDEFINE(glFlushPixelDataRangeNV);
  // GLAPI void APIENTRY glPointParameteriNV (GLenum pname, GLint param);
  VKFUNDEFINE(glPointParameteriNV);
  // GLAPI void APIENTRY glPointParameterivNV (GLenum pname, const GLint
  // *params);
  VKFUNDEFINE(glPointParameterivNV);
  // GLAPI void APIENTRY glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT
  // minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum
  // type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint
  // fill1, GLuint key1);
  VKFUNDEFINE(glPresentFrameKeyedNV);
  // GLAPI void APIENTRY glPresentFrameDualFillNV (GLuint video_slot,
  // GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint
  // presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum
  // target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint
  // fill3);
  VKFUNDEFINE(glPresentFrameDualFillNV);
  // GLAPI void APIENTRY glGetVideoivNV (GLuint video_slot, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetVideoivNV);
  // GLAPI void APIENTRY glGetVideouivNV (GLuint video_slot, GLenum pname,
  // GLuint *params);
  VKFUNDEFINE(glGetVideouivNV);
  // GLAPI void APIENTRY glGetVideoi64vNV (GLuint video_slot, GLenum pname,
  // GLint64EXT *params);
  VKFUNDEFINE(glGetVideoi64vNV);
  // GLAPI void APIENTRY glGetVideoui64vNV (GLuint video_slot, GLenum pname,
  // GLuint64EXT *params);
  VKFUNDEFINE(glGetVideoui64vNV);
  // GLAPI void APIENTRY glPrimitiveRestartNV (void);
  VKFUNDEFINE(glPrimitiveRestartNV);
  // GLAPI void APIENTRY glPrimitiveRestartIndexNV (GLuint index);
  VKFUNDEFINE(glPrimitiveRestartIndexNV);
  // GLAPI GLint APIENTRY glQueryResourceNV (GLenum queryType, GLint tagId,
  // GLuint count, GLint *buffer);
  VKFUNDEFINE(glQueryResourceNV);
  // GLAPI void APIENTRY glGenQueryResourceTagNV (GLsizei n, GLint *tagIds);
  VKFUNDEFINE(glGenQueryResourceTagNV);
  // GLAPI void APIENTRY glDeleteQueryResourceTagNV (GLsizei n, const GLint
  // *tagIds);
  VKFUNDEFINE(glDeleteQueryResourceTagNV);
  // GLAPI void APIENTRY glQueryResourceTagNV (GLint tagId, const GLchar
  // *tagString);
  VKFUNDEFINE(glQueryResourceTagNV);
  // GLAPI void APIENTRY glCombinerParameterfvNV (GLenum pname, const GLfloat
  // *params);
  VKFUNDEFINE(glCombinerParameterfvNV);
  // GLAPI void APIENTRY glCombinerParameterfNV (GLenum pname, GLfloat param);
  VKFUNDEFINE(glCombinerParameterfNV);
  // GLAPI void APIENTRY glCombinerParameterivNV (GLenum pname, const GLint
  // *params);
  VKFUNDEFINE(glCombinerParameterivNV);
  // GLAPI void APIENTRY glCombinerParameteriNV (GLenum pname, GLint param);
  VKFUNDEFINE(glCombinerParameteriNV);
  // GLAPI void APIENTRY glCombinerInputNV (GLenum stage, GLenum portion, GLenum
  // variable, GLenum input, GLenum mapping, GLenum componentUsage);
  VKFUNDEFINE(glCombinerInputNV);
  // GLAPI void APIENTRY glCombinerOutputNV (GLenum stage, GLenum portion,
  // GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum
  // bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
  VKFUNDEFINE(glCombinerOutputNV);
  // GLAPI void APIENTRY glFinalCombinerInputNV (GLenum variable, GLenum input,
  // GLenum mapping, GLenum componentUsage);
  VKFUNDEFINE(glFinalCombinerInputNV);
  // GLAPI void APIENTRY glGetCombinerInputParameterfvNV (GLenum stage, GLenum
  // portion, GLenum variable, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetCombinerInputParameterfvNV);
  // GLAPI void APIENTRY glGetCombinerInputParameterivNV (GLenum stage, GLenum
  // portion, GLenum variable, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetCombinerInputParameterivNV);
  // GLAPI void APIENTRY glGetCombinerOutputParameterfvNV (GLenum stage, GLenum
  // portion, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetCombinerOutputParameterfvNV);
  // GLAPI void APIENTRY glGetCombinerOutputParameterivNV (GLenum stage, GLenum
  // portion, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetCombinerOutputParameterivNV);
  // GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV (GLenum variable,
  // GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetFinalCombinerInputParameterfvNV);
  // GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV (GLenum variable,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetFinalCombinerInputParameterivNV);
  // GLAPI void APIENTRY glCombinerStageParameterfvNV (GLenum stage, GLenum
  // pname, const GLfloat *params);
  VKFUNDEFINE(glCombinerStageParameterfvNV);
  // GLAPI void APIENTRY glGetCombinerStageParameterfvNV (GLenum stage, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetCombinerStageParameterfvNV);
  // GLAPI void APIENTRY glFramebufferSampleLocationsfvNV (GLenum target, GLuint
  // start, GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glFramebufferSampleLocationsfvNV);
  // GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvNV (GLuint
  // framebuffer, GLuint start, GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glNamedFramebufferSampleLocationsfvNV);
  // GLAPI void APIENTRY glResolveDepthValuesNV (void);
  VKFUNDEFINE(glResolveDepthValuesNV);
  // GLAPI void APIENTRY glScissorExclusiveNV (GLint x, GLint y, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glScissorExclusiveNV);
  // GLAPI void APIENTRY glScissorExclusiveArrayvNV (GLuint first, GLsizei
  // count, const GLint *v);
  VKFUNDEFINE(glScissorExclusiveArrayvNV);
  // GLAPI void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access);
  VKFUNDEFINE(glMakeBufferResidentNV);
  // GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum target);
  VKFUNDEFINE(glMakeBufferNonResidentNV);
  // GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum target);
  VKFUNDEFINE(glIsBufferResidentNV);
  // GLAPI void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum
  // access);
  VKFUNDEFINE(glMakeNamedBufferResidentNV);
  // GLAPI void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer);
  VKFUNDEFINE(glMakeNamedBufferNonResidentNV);
  // GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer);
  VKFUNDEFINE(glIsNamedBufferResidentNV);
  // GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum
  // pname, GLuint64EXT *params);
  VKFUNDEFINE(glGetBufferParameterui64vNV);
  // GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum
  // pname, GLuint64EXT *params);
  VKFUNDEFINE(glGetNamedBufferParameterui64vNV);
  // GLAPI void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT
  // *result);
  VKFUNDEFINE(glGetIntegerui64vNV);
  // GLAPI void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value);
  VKFUNDEFINE(glUniformui64NV);
  // GLAPI void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const
  // GLuint64EXT *value);
  VKFUNDEFINE(glUniformui64vNV);
  // GLAPI void APIENTRY glProgramUniformui64NV (GLuint program, GLint location,
  // GLuint64EXT value);
  VKFUNDEFINE(glProgramUniformui64NV);
  // GLAPI void APIENTRY glProgramUniformui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniformui64vNV);
  // GLAPI void APIENTRY glBindShadingRateImageNV (GLuint texture);
  VKFUNDEFINE(glBindShadingRateImageNV);
  // GLAPI void APIENTRY glGetShadingRateImagePaletteNV (GLuint viewport, GLuint
  // entry, GLenum *rate);
  VKFUNDEFINE(glGetShadingRateImagePaletteNV);
  // GLAPI void APIENTRY glGetShadingRateSampleLocationivNV (GLenum rate, GLuint
  // samples, GLuint index, GLint *location);
  VKFUNDEFINE(glGetShadingRateSampleLocationivNV);
  // GLAPI void APIENTRY glShadingRateImageBarrierNV (GLboolean synchronize);
  VKFUNDEFINE(glShadingRateImageBarrierNV);
  // GLAPI void APIENTRY glShadingRateImagePaletteNV (GLuint viewport, GLuint
  // first, GLsizei count, const GLenum *rates);
  VKFUNDEFINE(glShadingRateImagePaletteNV);
  // GLAPI void APIENTRY glShadingRateSampleOrderNV (GLenum order);
  VKFUNDEFINE(glShadingRateSampleOrderNV);
  // GLAPI void APIENTRY glShadingRateSampleOrderCustomNV (GLenum rate, GLuint
  // samples, const GLint *locations);
  VKFUNDEFINE(glShadingRateSampleOrderCustomNV);
  // GLAPI void APIENTRY glTextureBarrierNV (void);
  VKFUNDEFINE(glTextureBarrierNV);
  // GLAPI void APIENTRY glTexImage2DMultisampleCoverageNV (GLenum target,
  // GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat,
  // GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
  VKFUNDEFINE(glTexImage2DMultisampleCoverageNV);
  // GLAPI void APIENTRY glTexImage3DMultisampleCoverageNV (GLenum target,
  // GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat,
  // GLsizei width, GLsizei height, GLsizei depth, GLboolean
  // fixedSampleLocations);
  VKFUNDEFINE(glTexImage3DMultisampleCoverageNV);
  // GLAPI void APIENTRY glTextureImage2DMultisampleNV (GLuint texture, GLenum
  // target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei
  // height, GLboolean fixedSampleLocations);
  VKFUNDEFINE(glTextureImage2DMultisampleNV);
  // GLAPI void APIENTRY glTextureImage3DMultisampleNV (GLuint texture, GLenum
  // target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei
  // height, GLsizei depth, GLboolean fixedSampleLocations);
  VKFUNDEFINE(glTextureImage3DMultisampleNV);
  // GLAPI void APIENTRY glTextureImage2DMultisampleCoverageNV (GLuint texture,
  // GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint
  // internalFormat, GLsizei width, GLsizei height, GLboolean
  // fixedSampleLocations);
  VKFUNDEFINE(glTextureImage2DMultisampleCoverageNV);
  // GLAPI void APIENTRY glTextureImage3DMultisampleCoverageNV (GLuint texture,
  // GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint
  // internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean
  // fixedSampleLocations);
  VKFUNDEFINE(glTextureImage3DMultisampleCoverageNV);
  // GLAPI void APIENTRY glCreateSemaphoresNV (GLsizei n, GLuint *semaphores);
  VKFUNDEFINE(glCreateSemaphoresNV);
  // GLAPI void APIENTRY glSemaphoreParameterivNV (GLuint semaphore, GLenum
  // pname, const GLint *params);
  VKFUNDEFINE(glSemaphoreParameterivNV);
  // GLAPI void APIENTRY glGetSemaphoreParameterivNV (GLuint semaphore, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetSemaphoreParameterivNV);
  // GLAPI void APIENTRY glBeginTransformFeedbackNV (GLenum primitiveMode);
  VKFUNDEFINE(glBeginTransformFeedbackNV);
  // GLAPI void APIENTRY glEndTransformFeedbackNV (void);
  VKFUNDEFINE(glEndTransformFeedbackNV);
  // GLAPI void APIENTRY glTransformFeedbackAttribsNV (GLsizei count, const
  // GLint *attribs, GLenum bufferMode);
  VKFUNDEFINE(glTransformFeedbackAttribsNV);
  // GLAPI void APIENTRY glBindBufferRangeNV (GLenum target, GLuint index,
  // GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glBindBufferRangeNV);
  // GLAPI void APIENTRY glBindBufferOffsetNV (GLenum target, GLuint index,
  // GLuint buffer, GLintptr offset);
  VKFUNDEFINE(glBindBufferOffsetNV);
  // GLAPI void APIENTRY glBindBufferBaseNV (GLenum target, GLuint index, GLuint
  // buffer);
  VKFUNDEFINE(glBindBufferBaseNV);
  // GLAPI void APIENTRY glTransformFeedbackVaryingsNV (GLuint program, GLsizei
  // count, const GLint *locations, GLenum bufferMode);
  VKFUNDEFINE(glTransformFeedbackVaryingsNV);
  // GLAPI void APIENTRY glActiveVaryingNV (GLuint program, const GLchar *name);
  VKFUNDEFINE(glActiveVaryingNV);
  // GLAPI GLint APIENTRY glGetVaryingLocationNV (GLuint program, const GLchar
  // *name);
  VKFUNDEFINE(glGetVaryingLocationNV);
  // GLAPI void APIENTRY glGetActiveVaryingNV (GLuint program, GLuint index,
  // GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar
  // *name);
  VKFUNDEFINE(glGetActiveVaryingNV);
  // GLAPI void APIENTRY glGetTransformFeedbackVaryingNV (GLuint program, GLuint
  // index, GLint *location);
  VKFUNDEFINE(glGetTransformFeedbackVaryingNV);
  // GLAPI void APIENTRY glTransformFeedbackStreamAttribsNV (GLsizei count,
  // const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum
  // bufferMode);
  VKFUNDEFINE(glTransformFeedbackStreamAttribsNV);
  // GLAPI void APIENTRY glBindTransformFeedbackNV (GLenum target, GLuint id);
  VKFUNDEFINE(glBindTransformFeedbackNV);
  // GLAPI void APIENTRY glDeleteTransformFeedbacksNV (GLsizei n, const GLuint
  // *ids);
  VKFUNDEFINE(glDeleteTransformFeedbacksNV);
  // GLAPI void APIENTRY glGenTransformFeedbacksNV (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glGenTransformFeedbacksNV);
  // GLAPI GLboolean APIENTRY glIsTransformFeedbackNV (GLuint id);
  VKFUNDEFINE(glIsTransformFeedbackNV);
  // GLAPI void APIENTRY glPauseTransformFeedbackNV (void);
  VKFUNDEFINE(glPauseTransformFeedbackNV);
  // GLAPI void APIENTRY glResumeTransformFeedbackNV (void);
  VKFUNDEFINE(glResumeTransformFeedbackNV);
  // GLAPI void APIENTRY glDrawTransformFeedbackNV (GLenum mode, GLuint id);
  VKFUNDEFINE(glDrawTransformFeedbackNV);
  // GLAPI void APIENTRY glVDPAUInitNV (const void *vdpDevice, const void
  // *getProcAddress);
  VKFUNDEFINE(glVDPAUInitNV);
  // GLAPI void APIENTRY glVDPAUFiniNV (void);
  VKFUNDEFINE(glVDPAUFiniNV);
  // GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceNV (const void
  // *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint
  // *textureNames);
  VKFUNDEFINE(glVDPAURegisterVideoSurfaceNV);
  // GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurfaceNV (const void
  // *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint
  // *textureNames);
  VKFUNDEFINE(glVDPAURegisterOutputSurfaceNV);
  // GLAPI GLboolean APIENTRY glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface);
  VKFUNDEFINE(glVDPAUIsSurfaceNV);
  // GLAPI void APIENTRY glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface);
  VKFUNDEFINE(glVDPAUUnregisterSurfaceNV);
  // GLAPI void APIENTRY glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum
  // pname, GLsizei count, GLsizei *length, GLint *values);
  VKFUNDEFINE(glVDPAUGetSurfaceivNV);
  // GLAPI void APIENTRY glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface,
  // GLenum access);
  VKFUNDEFINE(glVDPAUSurfaceAccessNV);
  // GLAPI void APIENTRY glVDPAUMapSurfacesNV (GLsizei numSurfaces, const
  // GLvdpauSurfaceNV *surfaces);
  VKFUNDEFINE(glVDPAUMapSurfacesNV);
  // GLAPI void APIENTRY glVDPAUUnmapSurfacesNV (GLsizei numSurface, const
  // GLvdpauSurfaceNV *surfaces);
  VKFUNDEFINE(glVDPAUUnmapSurfacesNV);
  // GLAPI GLvdpauSurfaceNV APIENTRY
  // glVDPAURegisterVideoSurfaceWithPictureStructureNV (const void *vdpSurface,
  // GLenum target, GLsizei numTextureNames, const GLuint *textureNames,
  // GLboolean isFrameStructure);
  VKFUNDEFINE(glVDPAURegisterVideoSurfaceWithPictureStructureNV);
  // GLAPI void APIENTRY glFlushVertexArrayRangeNV (void);
  VKFUNDEFINE(glFlushVertexArrayRangeNV);
  // GLAPI void APIENTRY glVertexArrayRangeNV (GLsizei length, const void
  // *pointer);
  VKFUNDEFINE(glVertexArrayRangeNV);
  // GLAPI void APIENTRY glVertexAttribL1i64NV (GLuint index, GLint64EXT x);
  VKFUNDEFINE(glVertexAttribL1i64NV);
  // GLAPI void APIENTRY glVertexAttribL2i64NV (GLuint index, GLint64EXT x,
  // GLint64EXT y);
  VKFUNDEFINE(glVertexAttribL2i64NV);
  // GLAPI void APIENTRY glVertexAttribL3i64NV (GLuint index, GLint64EXT x,
  // GLint64EXT y, GLint64EXT z);
  VKFUNDEFINE(glVertexAttribL3i64NV);
  // GLAPI void APIENTRY glVertexAttribL4i64NV (GLuint index, GLint64EXT x,
  // GLint64EXT y, GLint64EXT z, GLint64EXT w);
  VKFUNDEFINE(glVertexAttribL4i64NV);
  // GLAPI void APIENTRY glVertexAttribL1i64vNV (GLuint index, const GLint64EXT
  // *v);
  VKFUNDEFINE(glVertexAttribL1i64vNV);
  // GLAPI void APIENTRY glVertexAttribL2i64vNV (GLuint index, const GLint64EXT
  // *v);
  VKFUNDEFINE(glVertexAttribL2i64vNV);
  // GLAPI void APIENTRY glVertexAttribL3i64vNV (GLuint index, const GLint64EXT
  // *v);
  VKFUNDEFINE(glVertexAttribL3i64vNV);
  // GLAPI void APIENTRY glVertexAttribL4i64vNV (GLuint index, const GLint64EXT
  // *v);
  VKFUNDEFINE(glVertexAttribL4i64vNV);
  // GLAPI void APIENTRY glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x);
  VKFUNDEFINE(glVertexAttribL1ui64NV);
  // GLAPI void APIENTRY glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x,
  // GLuint64EXT y);
  VKFUNDEFINE(glVertexAttribL2ui64NV);
  // GLAPI void APIENTRY glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x,
  // GLuint64EXT y, GLuint64EXT z);
  VKFUNDEFINE(glVertexAttribL3ui64NV);
  // GLAPI void APIENTRY glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x,
  // GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  VKFUNDEFINE(glVertexAttribL4ui64NV);
  // GLAPI void APIENTRY glVertexAttribL1ui64vNV (GLuint index, const
  // GLuint64EXT *v);
  VKFUNDEFINE(glVertexAttribL1ui64vNV);
  // GLAPI void APIENTRY glVertexAttribL2ui64vNV (GLuint index, const
  // GLuint64EXT *v);
  VKFUNDEFINE(glVertexAttribL2ui64vNV);
  // GLAPI void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const
  // GLuint64EXT *v);
  VKFUNDEFINE(glVertexAttribL3ui64vNV);
  // GLAPI void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const
  // GLuint64EXT *v);
  VKFUNDEFINE(glVertexAttribL4ui64vNV);
  // GLAPI void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname,
  // GLint64EXT *params);
  VKFUNDEFINE(glGetVertexAttribLi64vNV);
  // GLAPI void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname,
  // GLuint64EXT *params);
  VKFUNDEFINE(glGetVertexAttribLui64vNV);
  // GLAPI void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size,
  // GLenum type, GLsizei stride);
  VKFUNDEFINE(glVertexAttribLFormatNV);
  // GLAPI void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index,
  // GLuint64EXT address, GLsizeiptr length);
  VKFUNDEFINE(glBufferAddressRangeNV);
  // GLAPI void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei
  // stride);
  VKFUNDEFINE(glVertexFormatNV);
  // GLAPI void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride);
  VKFUNDEFINE(glNormalFormatNV);
  // GLAPI void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei
  // stride);
  VKFUNDEFINE(glColorFormatNV);
  // GLAPI void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride);
  VKFUNDEFINE(glIndexFormatNV);
  // GLAPI void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei
  // stride);
  VKFUNDEFINE(glTexCoordFormatNV);
  // GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei stride);
  VKFUNDEFINE(glEdgeFlagFormatNV);
  // GLAPI void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type,
  // GLsizei stride);
  VKFUNDEFINE(glSecondaryColorFormatNV);
  // GLAPI void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride);
  VKFUNDEFINE(glFogCoordFormatNV);
  // GLAPI void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size,
  // GLenum type, GLboolean normalized, GLsizei stride);
  VKFUNDEFINE(glVertexAttribFormatNV);
  // GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size,
  // GLenum type, GLsizei stride);
  VKFUNDEFINE(glVertexAttribIFormatNV);
  // GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index,
  // GLuint64EXT *result);
  VKFUNDEFINE(glGetIntegerui64i_vNV);
  // GLAPI GLboolean APIENTRY glAreProgramsResidentNV (GLsizei n, const GLuint
  // *programs, GLboolean *residences);
  VKFUNDEFINE(glAreProgramsResidentNV);
  // GLAPI void APIENTRY glBindProgramNV (GLenum target, GLuint id);
  VKFUNDEFINE(glBindProgramNV);
  // GLAPI void APIENTRY glDeleteProgramsNV (GLsizei n, const GLuint *programs);
  VKFUNDEFINE(glDeleteProgramsNV);
  // GLAPI void APIENTRY glExecuteProgramNV (GLenum target, GLuint id, const
  // GLfloat *params);
  VKFUNDEFINE(glExecuteProgramNV);
  // GLAPI void APIENTRY glGenProgramsNV (GLsizei n, GLuint *programs);
  VKFUNDEFINE(glGenProgramsNV);
  // GLAPI void APIENTRY glGetProgramParameterdvNV (GLenum target, GLuint index,
  // GLenum pname, GLdouble *params);
  VKFUNDEFINE(glGetProgramParameterdvNV);
  // GLAPI void APIENTRY glGetProgramParameterfvNV (GLenum target, GLuint index,
  // GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetProgramParameterfvNV);
  // GLAPI void APIENTRY glGetProgramivNV (GLuint id, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetProgramivNV);
  // GLAPI void APIENTRY glGetProgramStringNV (GLuint id, GLenum pname, GLubyte
  // *program);
  VKFUNDEFINE(glGetProgramStringNV);
  // GLAPI void APIENTRY glGetTrackMatrixivNV (GLenum target, GLuint address,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetTrackMatrixivNV);
  // GLAPI void APIENTRY glGetVertexAttribdvNV (GLuint index, GLenum pname,
  // GLdouble *params);
  VKFUNDEFINE(glGetVertexAttribdvNV);
  // GLAPI void APIENTRY glGetVertexAttribfvNV (GLuint index, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetVertexAttribfvNV);
  // GLAPI void APIENTRY glGetVertexAttribivNV (GLuint index, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetVertexAttribivNV);
  // GLAPI void APIENTRY glGetVertexAttribPointervNV (GLuint index, GLenum
  // pname, void **pointer);
  VKFUNDEFINE(glGetVertexAttribPointervNV);
  // GLAPI GLboolean APIENTRY glIsProgramNV (GLuint id);
  VKFUNDEFINE(glIsProgramNV);
  // GLAPI void APIENTRY glLoadProgramNV (GLenum target, GLuint id, GLsizei len,
  // const GLubyte *program);
  VKFUNDEFINE(glLoadProgramNV);
  // GLAPI void APIENTRY glProgramParameter4dNV (GLenum target, GLuint index,
  // GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glProgramParameter4dNV);
  // GLAPI void APIENTRY glProgramParameter4dvNV (GLenum target, GLuint index,
  // const GLdouble *v);
  VKFUNDEFINE(glProgramParameter4dvNV);
  // GLAPI void APIENTRY glProgramParameter4fNV (GLenum target, GLuint index,
  // GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glProgramParameter4fNV);
  // GLAPI void APIENTRY glProgramParameter4fvNV (GLenum target, GLuint index,
  // const GLfloat *v);
  VKFUNDEFINE(glProgramParameter4fvNV);
  // GLAPI void APIENTRY glProgramParameters4dvNV (GLenum target, GLuint index,
  // GLsizei count, const GLdouble *v);
  VKFUNDEFINE(glProgramParameters4dvNV);
  // GLAPI void APIENTRY glProgramParameters4fvNV (GLenum target, GLuint index,
  // GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glProgramParameters4fvNV);
  // GLAPI void APIENTRY glRequestResidentProgramsNV (GLsizei n, const GLuint
  // *programs);
  VKFUNDEFINE(glRequestResidentProgramsNV);
  // GLAPI void APIENTRY glTrackMatrixNV (GLenum target, GLuint address, GLenum
  // matrix, GLenum transform);
  VKFUNDEFINE(glTrackMatrixNV);
  // GLAPI void APIENTRY glVertexAttribPointerNV (GLuint index, GLint fsize,
  // GLenum type, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribPointerNV);
  // GLAPI void APIENTRY glVertexAttrib1dNV (GLuint index, GLdouble x);
  VKFUNDEFINE(glVertexAttrib1dNV);
  // GLAPI void APIENTRY glVertexAttrib1dvNV (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib1dvNV);
  // GLAPI void APIENTRY glVertexAttrib1fNV (GLuint index, GLfloat x);
  VKFUNDEFINE(glVertexAttrib1fNV);
  // GLAPI void APIENTRY glVertexAttrib1fvNV (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib1fvNV);
  // GLAPI void APIENTRY glVertexAttrib1sNV (GLuint index, GLshort x);
  VKFUNDEFINE(glVertexAttrib1sNV);
  // GLAPI void APIENTRY glVertexAttrib1svNV (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib1svNV);
  // GLAPI void APIENTRY glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble
  // y);
  VKFUNDEFINE(glVertexAttrib2dNV);
  // GLAPI void APIENTRY glVertexAttrib2dvNV (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib2dvNV);
  // GLAPI void APIENTRY glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat
  // y);
  VKFUNDEFINE(glVertexAttrib2fNV);
  // GLAPI void APIENTRY glVertexAttrib2fvNV (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib2fvNV);
  // GLAPI void APIENTRY glVertexAttrib2sNV (GLuint index, GLshort x, GLshort
  // y);
  VKFUNDEFINE(glVertexAttrib2sNV);
  // GLAPI void APIENTRY glVertexAttrib2svNV (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib2svNV);
  // GLAPI void APIENTRY glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble
  // y, GLdouble z);
  VKFUNDEFINE(glVertexAttrib3dNV);
  // GLAPI void APIENTRY glVertexAttrib3dvNV (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib3dvNV);
  // GLAPI void APIENTRY glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y,
  // GLfloat z);
  VKFUNDEFINE(glVertexAttrib3fNV);
  // GLAPI void APIENTRY glVertexAttrib3fvNV (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib3fvNV);
  // GLAPI void APIENTRY glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y,
  // GLshort z);
  VKFUNDEFINE(glVertexAttrib3sNV);
  // GLAPI void APIENTRY glVertexAttrib3svNV (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib3svNV);
  // GLAPI void APIENTRY glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble
  // y, GLdouble z, GLdouble w);
  VKFUNDEFINE(glVertexAttrib4dNV);
  // GLAPI void APIENTRY glVertexAttrib4dvNV (GLuint index, const GLdouble *v);
  VKFUNDEFINE(glVertexAttrib4dvNV);
  // GLAPI void APIENTRY glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y,
  // GLfloat z, GLfloat w);
  VKFUNDEFINE(glVertexAttrib4fNV);
  // GLAPI void APIENTRY glVertexAttrib4fvNV (GLuint index, const GLfloat *v);
  VKFUNDEFINE(glVertexAttrib4fvNV);
  // GLAPI void APIENTRY glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y,
  // GLshort z, GLshort w);
  VKFUNDEFINE(glVertexAttrib4sNV);
  // GLAPI void APIENTRY glVertexAttrib4svNV (GLuint index, const GLshort *v);
  VKFUNDEFINE(glVertexAttrib4svNV);
  // GLAPI void APIENTRY glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte
  // y, GLubyte z, GLubyte w);
  VKFUNDEFINE(glVertexAttrib4ubNV);
  // GLAPI void APIENTRY glVertexAttrib4ubvNV (GLuint index, const GLubyte *v);
  VKFUNDEFINE(glVertexAttrib4ubvNV);
  // GLAPI void APIENTRY glVertexAttribs1dvNV (GLuint index, GLsizei count,
  // const GLdouble *v);
  VKFUNDEFINE(glVertexAttribs1dvNV);
  // GLAPI void APIENTRY glVertexAttribs1fvNV (GLuint index, GLsizei count,
  // const GLfloat *v);
  VKFUNDEFINE(glVertexAttribs1fvNV);
  // GLAPI void APIENTRY glVertexAttribs1svNV (GLuint index, GLsizei count,
  // const GLshort *v);
  VKFUNDEFINE(glVertexAttribs1svNV);
  // GLAPI void APIENTRY glVertexAttribs2dvNV (GLuint index, GLsizei count,
  // const GLdouble *v);
  VKFUNDEFINE(glVertexAttribs2dvNV);
  // GLAPI void APIENTRY glVertexAttribs2fvNV (GLuint index, GLsizei count,
  // const GLfloat *v);
  VKFUNDEFINE(glVertexAttribs2fvNV);
  // GLAPI void APIENTRY glVertexAttribs2svNV (GLuint index, GLsizei count,
  // const GLshort *v);
  VKFUNDEFINE(glVertexAttribs2svNV);
  // GLAPI void APIENTRY glVertexAttribs3dvNV (GLuint index, GLsizei count,
  // const GLdouble *v);
  VKFUNDEFINE(glVertexAttribs3dvNV);
  // GLAPI void APIENTRY glVertexAttribs3fvNV (GLuint index, GLsizei count,
  // const GLfloat *v);
  VKFUNDEFINE(glVertexAttribs3fvNV);
  // GLAPI void APIENTRY glVertexAttribs3svNV (GLuint index, GLsizei count,
  // const GLshort *v);
  VKFUNDEFINE(glVertexAttribs3svNV);
  // GLAPI void APIENTRY glVertexAttribs4dvNV (GLuint index, GLsizei count,
  // const GLdouble *v);
  VKFUNDEFINE(glVertexAttribs4dvNV);
  // GLAPI void APIENTRY glVertexAttribs4fvNV (GLuint index, GLsizei count,
  // const GLfloat *v);
  VKFUNDEFINE(glVertexAttribs4fvNV);
  // GLAPI void APIENTRY glVertexAttribs4svNV (GLuint index, GLsizei count,
  // const GLshort *v);
  VKFUNDEFINE(glVertexAttribs4svNV);
  // GLAPI void APIENTRY glVertexAttribs4ubvNV (GLuint index, GLsizei count,
  // const GLubyte *v);
  VKFUNDEFINE(glVertexAttribs4ubvNV);
  // GLAPI void APIENTRY glBeginVideoCaptureNV (GLuint video_capture_slot);
  VKFUNDEFINE(glBeginVideoCaptureNV);
  // GLAPI void APIENTRY glBindVideoCaptureStreamBufferNV (GLuint
  // video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB
  // offset);
  VKFUNDEFINE(glBindVideoCaptureStreamBufferNV);
  // GLAPI void APIENTRY glBindVideoCaptureStreamTextureNV (GLuint
  // video_capture_slot, GLuint stream, GLenum frame_region, GLenum target,
  // GLuint texture);
  VKFUNDEFINE(glBindVideoCaptureStreamTextureNV);
  // GLAPI void APIENTRY glEndVideoCaptureNV (GLuint video_capture_slot);
  VKFUNDEFINE(glEndVideoCaptureNV);
  // GLAPI void APIENTRY glGetVideoCaptureivNV (GLuint video_capture_slot,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetVideoCaptureivNV);
  // GLAPI void APIENTRY glGetVideoCaptureStreamivNV (GLuint video_capture_slot,
  // GLuint stream, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetVideoCaptureStreamivNV);
  // GLAPI void APIENTRY glGetVideoCaptureStreamfvNV (GLuint video_capture_slot,
  // GLuint stream, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetVideoCaptureStreamfvNV);
  // GLAPI void APIENTRY glGetVideoCaptureStreamdvNV (GLuint video_capture_slot,
  // GLuint stream, GLenum pname, GLdouble *params);
  VKFUNDEFINE(glGetVideoCaptureStreamdvNV);
  // GLAPI GLenum APIENTRY glVideoCaptureNV (GLuint video_capture_slot, GLuint
  // *sequence_num, GLuint64EXT *capture_time);
  VKFUNDEFINE(glVideoCaptureNV);
  // GLAPI void APIENTRY glVideoCaptureStreamParameterivNV (GLuint
  // video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
  VKFUNDEFINE(glVideoCaptureStreamParameterivNV);
  // GLAPI void APIENTRY glVideoCaptureStreamParameterfvNV (GLuint
  // video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
  VKFUNDEFINE(glVideoCaptureStreamParameterfvNV);
  // GLAPI void APIENTRY glVideoCaptureStreamParameterdvNV (GLuint
  // video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
  VKFUNDEFINE(glVideoCaptureStreamParameterdvNV);
  // GLAPI void APIENTRY glViewportSwizzleNV (GLuint index, GLenum swizzlex,
  // GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
  VKFUNDEFINE(glViewportSwizzleNV);
  // GLAPI void APIENTRY glFramebufferTextureMultiviewOVR (GLenum target, GLenum
  // attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei
  // numViews);
  VKFUNDEFINE(glFramebufferTextureMultiviewOVR);
  // GLAPI void APIENTRY glHintPGI (GLenum target, GLint mode);
  VKFUNDEFINE(glHintPGI);
  // GLAPI void APIENTRY glDetailTexFuncSGIS (GLenum target, GLsizei n, const
  // GLfloat *points);
  VKFUNDEFINE(glDetailTexFuncSGIS);
  // GLAPI void APIENTRY glGetDetailTexFuncSGIS (GLenum target, GLfloat
  // *points);
  VKFUNDEFINE(glGetDetailTexFuncSGIS);
  // GLAPI void APIENTRY glFogFuncSGIS (GLsizei n, const GLfloat *points);
  VKFUNDEFINE(glFogFuncSGIS);
  // GLAPI void APIENTRY glGetFogFuncSGIS (GLfloat *points);
  VKFUNDEFINE(glGetFogFuncSGIS);
  // GLAPI void APIENTRY glSampleMaskSGIS (GLclampf value, GLboolean invert);
  VKFUNDEFINE(glSampleMaskSGIS);
  // GLAPI void APIENTRY glSamplePatternSGIS (GLenum pattern);
  VKFUNDEFINE(glSamplePatternSGIS);
  // GLAPI void APIENTRY glPixelTexGenParameteriSGIS (GLenum pname, GLint
  // param);
  VKFUNDEFINE(glPixelTexGenParameteriSGIS);
  // GLAPI void APIENTRY glPixelTexGenParameterivSGIS (GLenum pname, const GLint
  // *params);
  VKFUNDEFINE(glPixelTexGenParameterivSGIS);
  // GLAPI void APIENTRY glPixelTexGenParameterfSGIS (GLenum pname, GLfloat
  // param);
  VKFUNDEFINE(glPixelTexGenParameterfSGIS);
  // GLAPI void APIENTRY glPixelTexGenParameterfvSGIS (GLenum pname, const
  // GLfloat *params);
  VKFUNDEFINE(glPixelTexGenParameterfvSGIS);
  // GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS (GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetPixelTexGenParameterivSGIS);
  // GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat
  // *params);
  VKFUNDEFINE(glGetPixelTexGenParameterfvSGIS);
  // GLAPI void APIENTRY glPointParameterfSGIS (GLenum pname, GLfloat param);
  VKFUNDEFINE(glPointParameterfSGIS);
  // GLAPI void APIENTRY glPointParameterfvSGIS (GLenum pname, const GLfloat
  // *params);
  VKFUNDEFINE(glPointParameterfvSGIS);
  // GLAPI void APIENTRY glSharpenTexFuncSGIS (GLenum target, GLsizei n, const
  // GLfloat *points);
  VKFUNDEFINE(glSharpenTexFuncSGIS);
  // GLAPI void APIENTRY glGetSharpenTexFuncSGIS (GLenum target, GLfloat
  // *points);
  VKFUNDEFINE(glGetSharpenTexFuncSGIS);
  // GLAPI void APIENTRY glTexImage4DSGIS (GLenum target, GLint level, GLenum
  // internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei
  // size4d, GLint border, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexImage4DSGIS);
  // GLAPI void APIENTRY glTexSubImage4DSGIS (GLenum target, GLint level, GLint
  // xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width,
  // GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type,
  // const void *pixels);
  VKFUNDEFINE(glTexSubImage4DSGIS);
  // GLAPI void APIENTRY glTextureColorMaskSGIS (GLboolean red, GLboolean green,
  // GLboolean blue, GLboolean alpha);
  VKFUNDEFINE(glTextureColorMaskSGIS);
  // GLAPI void APIENTRY glGetTexFilterFuncSGIS (GLenum target, GLenum filter,
  // GLfloat *weights);
  VKFUNDEFINE(glGetTexFilterFuncSGIS);
  // GLAPI void APIENTRY glTexFilterFuncSGIS (GLenum target, GLenum filter,
  // GLsizei n, const GLfloat *weights);
  VKFUNDEFINE(glTexFilterFuncSGIS);
  // GLAPI void APIENTRY glAsyncMarkerSGIX (GLuint marker);
  VKFUNDEFINE(glAsyncMarkerSGIX);
  // GLAPI GLint APIENTRY glFinishAsyncSGIX (GLuint *markerp);
  VKFUNDEFINE(glFinishAsyncSGIX);
  // GLAPI GLint APIENTRY glPollAsyncSGIX (GLuint *markerp);
  VKFUNDEFINE(glPollAsyncSGIX);
  // GLAPI GLuint APIENTRY glGenAsyncMarkersSGIX (GLsizei range);
  VKFUNDEFINE(glGenAsyncMarkersSGIX);
  // GLAPI void APIENTRY glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei
  // range);
  VKFUNDEFINE(glDeleteAsyncMarkersSGIX);
  // GLAPI GLboolean APIENTRY glIsAsyncMarkerSGIX (GLuint marker);
  VKFUNDEFINE(glIsAsyncMarkerSGIX);
  // GLAPI void APIENTRY glFlushRasterSGIX (void);
  VKFUNDEFINE(glFlushRasterSGIX);
  // GLAPI void APIENTRY glFragmentColorMaterialSGIX (GLenum face, GLenum mode);
  VKFUNDEFINE(glFragmentColorMaterialSGIX);
  // GLAPI void APIENTRY glFragmentLightfSGIX (GLenum light, GLenum pname,
  // GLfloat param);
  VKFUNDEFINE(glFragmentLightfSGIX);
  // GLAPI void APIENTRY glFragmentLightfvSGIX (GLenum light, GLenum pname,
  // const GLfloat *params);
  VKFUNDEFINE(glFragmentLightfvSGIX);
  // GLAPI void APIENTRY glFragmentLightiSGIX (GLenum light, GLenum pname, GLint
  // param);
  VKFUNDEFINE(glFragmentLightiSGIX);
  // GLAPI void APIENTRY glFragmentLightivSGIX (GLenum light, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glFragmentLightivSGIX);
  // GLAPI void APIENTRY glFragmentLightModelfSGIX (GLenum pname, GLfloat
  // param);
  VKFUNDEFINE(glFragmentLightModelfSGIX);
  // GLAPI void APIENTRY glFragmentLightModelfvSGIX (GLenum pname, const GLfloat
  // *params);
  VKFUNDEFINE(glFragmentLightModelfvSGIX);
  // GLAPI void APIENTRY glFragmentLightModeliSGIX (GLenum pname, GLint param);
  VKFUNDEFINE(glFragmentLightModeliSGIX);
  // GLAPI void APIENTRY glFragmentLightModelivSGIX (GLenum pname, const GLint
  // *params);
  VKFUNDEFINE(glFragmentLightModelivSGIX);
  // GLAPI void APIENTRY glFragmentMaterialfSGIX (GLenum face, GLenum pname,
  // GLfloat param);
  VKFUNDEFINE(glFragmentMaterialfSGIX);
  // GLAPI void APIENTRY glFragmentMaterialfvSGIX (GLenum face, GLenum pname,
  // const GLfloat *params);
  VKFUNDEFINE(glFragmentMaterialfvSGIX);
  // GLAPI void APIENTRY glFragmentMaterialiSGIX (GLenum face, GLenum pname,
  // GLint param);
  VKFUNDEFINE(glFragmentMaterialiSGIX);
  // GLAPI void APIENTRY glFragmentMaterialivSGIX (GLenum face, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glFragmentMaterialivSGIX);
  // GLAPI void APIENTRY glGetFragmentLightfvSGIX (GLenum light, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetFragmentLightfvSGIX);
  // GLAPI void APIENTRY glGetFragmentLightivSGIX (GLenum light, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetFragmentLightivSGIX);
  // GLAPI void APIENTRY glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetFragmentMaterialfvSGIX);
  // GLAPI void APIENTRY glGetFragmentMaterialivSGIX (GLenum face, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetFragmentMaterialivSGIX);
  // GLAPI void APIENTRY glLightEnviSGIX (GLenum pname, GLint param);
  VKFUNDEFINE(glLightEnviSGIX);
  // GLAPI void APIENTRY glFrameZoomSGIX (GLint factor);
  VKFUNDEFINE(glFrameZoomSGIX);
  // GLAPI void APIENTRY glIglooInterfaceSGIX (GLenum pname, const void
  // *params);
  VKFUNDEFINE(glIglooInterfaceSGIX);
  // GLAPI GLint APIENTRY glGetInstrumentsSGIX (void);
  VKFUNDEFINE(glGetInstrumentsSGIX);
  // GLAPI void APIENTRY glInstrumentsBufferSGIX (GLsizei size, GLint *buffer);
  VKFUNDEFINE(glInstrumentsBufferSGIX);
  // GLAPI GLint APIENTRY glPollInstrumentsSGIX (GLint *marker_p);
  VKFUNDEFINE(glPollInstrumentsSGIX);
  // GLAPI void APIENTRY glReadInstrumentsSGIX (GLint marker);
  VKFUNDEFINE(glReadInstrumentsSGIX);
  // GLAPI void APIENTRY glStartInstrumentsSGIX (void);
  VKFUNDEFINE(glStartInstrumentsSGIX);
  // GLAPI void APIENTRY glStopInstrumentsSGIX (GLint marker);
  VKFUNDEFINE(glStopInstrumentsSGIX);
  // GLAPI void APIENTRY glGetListParameterfvSGIX (GLuint list, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetListParameterfvSGIX);
  // GLAPI void APIENTRY glGetListParameterivSGIX (GLuint list, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetListParameterivSGIX);
  // GLAPI void APIENTRY glListParameterfSGIX (GLuint list, GLenum pname,
  // GLfloat param);
  VKFUNDEFINE(glListParameterfSGIX);
  // GLAPI void APIENTRY glListParameterfvSGIX (GLuint list, GLenum pname, const
  // GLfloat *params);
  VKFUNDEFINE(glListParameterfvSGIX);
  // GLAPI void APIENTRY glListParameteriSGIX (GLuint list, GLenum pname, GLint
  // param);
  VKFUNDEFINE(glListParameteriSGIX);
  // GLAPI void APIENTRY glListParameterivSGIX (GLuint list, GLenum pname, const
  // GLint *params);
  VKFUNDEFINE(glListParameterivSGIX);
  // GLAPI void APIENTRY glPixelTexGenSGIX (GLenum mode);
  VKFUNDEFINE(glPixelTexGenSGIX);
  // GLAPI void APIENTRY glDeformationMap3dSGIX (GLenum target, GLdouble u1,
  // GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint
  // vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint
  // worder, const GLdouble *points);
  VKFUNDEFINE(glDeformationMap3dSGIX);
  // GLAPI void APIENTRY glDeformationMap3fSGIX (GLenum target, GLfloat u1,
  // GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint
  // vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder,
  // const GLfloat *points);
  VKFUNDEFINE(glDeformationMap3fSGIX);
  // GLAPI void APIENTRY glDeformSGIX (GLbitfield mask);
  VKFUNDEFINE(glDeformSGIX);
  // GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX (GLbitfield mask);
  VKFUNDEFINE(glLoadIdentityDeformationMapSGIX);
  // GLAPI void APIENTRY glReferencePlaneSGIX (const GLdouble *equation);
  VKFUNDEFINE(glReferencePlaneSGIX);
  // GLAPI void APIENTRY glSpriteParameterfSGIX (GLenum pname, GLfloat param);
  VKFUNDEFINE(glSpriteParameterfSGIX);
  // GLAPI void APIENTRY glSpriteParameterfvSGIX (GLenum pname, const GLfloat
  // *params);
  VKFUNDEFINE(glSpriteParameterfvSGIX);
  // GLAPI void APIENTRY glSpriteParameteriSGIX (GLenum pname, GLint param);
  VKFUNDEFINE(glSpriteParameteriSGIX);
  // GLAPI void APIENTRY glSpriteParameterivSGIX (GLenum pname, const GLint
  // *params);
  VKFUNDEFINE(glSpriteParameterivSGIX);
  // GLAPI void APIENTRY glTagSampleBufferSGIX (void);
  VKFUNDEFINE(glTagSampleBufferSGIX);
  // GLAPI void APIENTRY glColorTableSGI (GLenum target, GLenum internalformat,
  // GLsizei width, GLenum format, GLenum type, const void *table);
  VKFUNDEFINE(glColorTableSGI);
  // GLAPI void APIENTRY glColorTableParameterfvSGI (GLenum target, GLenum
  // pname, const GLfloat *params);
  VKFUNDEFINE(glColorTableParameterfvSGI);
  // GLAPI void APIENTRY glColorTableParameterivSGI (GLenum target, GLenum
  // pname, const GLint *params);
  VKFUNDEFINE(glColorTableParameterivSGI);
  // GLAPI void APIENTRY glCopyColorTableSGI (GLenum target, GLenum
  // internalformat, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyColorTableSGI);
  // GLAPI void APIENTRY glGetColorTableSGI (GLenum target, GLenum format,
  // GLenum type, void *table);
  VKFUNDEFINE(glGetColorTableSGI);
  // GLAPI void APIENTRY glGetColorTableParameterfvSGI (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetColorTableParameterfvSGI);
  // GLAPI void APIENTRY glGetColorTableParameterivSGI (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetColorTableParameterivSGI);
  // GLAPI void APIENTRY glFinishTextureSUNX (void);
  VKFUNDEFINE(glFinishTextureSUNX);
  // GLAPI void APIENTRY glGlobalAlphaFactorbSUN (GLbyte factor);
  VKFUNDEFINE(glGlobalAlphaFactorbSUN);
  // GLAPI void APIENTRY glGlobalAlphaFactorsSUN (GLshort factor);
  VKFUNDEFINE(glGlobalAlphaFactorsSUN);
  // GLAPI void APIENTRY glGlobalAlphaFactoriSUN (GLint factor);
  VKFUNDEFINE(glGlobalAlphaFactoriSUN);
  // GLAPI void APIENTRY glGlobalAlphaFactorfSUN (GLfloat factor);
  VKFUNDEFINE(glGlobalAlphaFactorfSUN);
  // GLAPI void APIENTRY glGlobalAlphaFactordSUN (GLdouble factor);
  VKFUNDEFINE(glGlobalAlphaFactordSUN);
  // GLAPI void APIENTRY glGlobalAlphaFactorubSUN (GLubyte factor);
  VKFUNDEFINE(glGlobalAlphaFactorubSUN);
  // GLAPI void APIENTRY glGlobalAlphaFactorusSUN (GLushort factor);
  VKFUNDEFINE(glGlobalAlphaFactorusSUN);
  // GLAPI void APIENTRY glGlobalAlphaFactoruiSUN (GLuint factor);
  VKFUNDEFINE(glGlobalAlphaFactoruiSUN);
  // GLAPI void APIENTRY glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei
  // count, GLsizei width);
  VKFUNDEFINE(glDrawMeshArraysSUN);
  // GLAPI void APIENTRY glReplacementCodeuiSUN (GLuint code);
  VKFUNDEFINE(glReplacementCodeuiSUN);
  // GLAPI void APIENTRY glReplacementCodeusSUN (GLushort code);
  VKFUNDEFINE(glReplacementCodeusSUN);
  // GLAPI void APIENTRY glReplacementCodeubSUN (GLubyte code);
  VKFUNDEFINE(glReplacementCodeubSUN);
  // GLAPI void APIENTRY glReplacementCodeuivSUN (const GLuint *code);
  VKFUNDEFINE(glReplacementCodeuivSUN);
  // GLAPI void APIENTRY glReplacementCodeusvSUN (const GLushort *code);
  VKFUNDEFINE(glReplacementCodeusvSUN);
  // GLAPI void APIENTRY glReplacementCodeubvSUN (const GLubyte *code);
  VKFUNDEFINE(glReplacementCodeubvSUN);
  // GLAPI void APIENTRY glReplacementCodePointerSUN (GLenum type, GLsizei
  // stride, const void **pointer);
  VKFUNDEFINE(glReplacementCodePointerSUN);
  // GLAPI void APIENTRY glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b,
  // GLubyte a, GLfloat x, GLfloat y);
  VKFUNDEFINE(glColor4ubVertex2fSUN);
  // GLAPI void APIENTRY glColor4ubVertex2fvSUN (const GLubyte *c, const GLfloat
  // *v);
  VKFUNDEFINE(glColor4ubVertex2fvSUN);
  // GLAPI void APIENTRY glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b,
  // GLubyte a, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glColor4ubVertex3fSUN);
  // GLAPI void APIENTRY glColor4ubVertex3fvSUN (const GLubyte *c, const GLfloat
  // *v);
  VKFUNDEFINE(glColor4ubVertex3fvSUN);
  // GLAPI void APIENTRY glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b,
  // GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glColor3fVertex3fSUN);
  // GLAPI void APIENTRY glColor3fVertex3fvSUN (const GLfloat *c, const GLfloat
  // *v);
  VKFUNDEFINE(glColor3fVertex3fvSUN);
  // GLAPI void APIENTRY glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat
  // nz, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glNormal3fVertex3fSUN);
  // GLAPI void APIENTRY glNormal3fVertex3fvSUN (const GLfloat *n, const GLfloat
  // *v);
  VKFUNDEFINE(glNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g,
  // GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x,
  // GLfloat y, GLfloat z);
  VKFUNDEFINE(glColor4fNormal3fVertex3fSUN);
  // GLAPI void APIENTRY glColor4fNormal3fVertex3fvSUN (const GLfloat *c, const
  // GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glColor4fNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat
  // x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glTexCoord2fVertex3fSUN);
  // GLAPI void APIENTRY glTexCoord2fVertex3fvSUN (const GLfloat *tc, const
  // GLfloat *v);
  VKFUNDEFINE(glTexCoord2fVertex3fvSUN);
  // GLAPI void APIENTRY glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat
  // p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glTexCoord4fVertex4fSUN);
  // GLAPI void APIENTRY glTexCoord4fVertex4fvSUN (const GLfloat *tc, const
  // GLfloat *v);
  VKFUNDEFINE(glTexCoord4fVertex4fvSUN);
  // GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t,
  // GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat
  // z);
  VKFUNDEFINE(glTexCoord2fColor4ubVertex3fSUN);
  // GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fvSUN (const GLfloat *tc,
  // const GLubyte *c, const GLfloat *v);
  VKFUNDEFINE(glTexCoord2fColor4ubVertex3fvSUN);
  // GLAPI void APIENTRY glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t,
  // GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glTexCoord2fColor3fVertex3fSUN);
  // GLAPI void APIENTRY glTexCoord2fColor3fVertex3fvSUN (const GLfloat *tc,
  // const GLfloat *c, const GLfloat *v);
  VKFUNDEFINE(glTexCoord2fColor3fVertex3fvSUN);
  // GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t,
  // GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glTexCoord2fNormal3fVertex3fSUN);
  // GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fvSUN (const GLfloat *tc,
  // const GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glTexCoord2fNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s,
  // GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat
  // ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glTexCoord2fColor4fNormal3fVertex3fSUN);
  // GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat
  // *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glTexCoord2fColor4fNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s,
  // GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat
  // a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z,
  // GLfloat w);
  VKFUNDEFINE(glTexCoord4fColor4fNormal3fVertex4fSUN);
  // GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat
  // *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glTexCoord4fColor4fNormal3fVertex4fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x,
  // GLfloat y, GLfloat z);
  VKFUNDEFINE(glReplacementCodeuiVertex3fSUN);
  // GLAPI void APIENTRY glReplacementCodeuiVertex3fvSUN (const GLuint *rc,
  // const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiVertex3fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc,
  // GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat
  // z);
  VKFUNDEFINE(glReplacementCodeuiColor4ubVertex3fSUN);
  // GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint
  // *rc, const GLubyte *c, const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiColor4ubVertex3fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fSUN (GLuint rc,
  // GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glReplacementCodeuiColor3fVertex3fSUN);
  // GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fvSUN (const GLuint
  // *rc, const GLfloat *c, const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiColor3fVertex3fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc,
  // GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glReplacementCodeuiNormal3fVertex3fSUN);
  // GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint
  // *rc, const GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint
  // rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny,
  // GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glReplacementCodeuiColor4fNormal3fVertex3fSUN);
  // GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const
  // GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiColor4fNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc,
  // GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glReplacementCodeuiTexCoord2fVertex3fSUN);
  // GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint
  // *rc, const GLfloat *tc, const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiTexCoord2fVertex3fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
  // (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz,
  // GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
  // GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
  // (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
  // (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat
  // a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
  // GLAPI void APIENTRY
  // glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint *rc,
  // const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  VKFUNDEFINE(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
  // GLAPI void APIENTRY glCullFace (GLenum mode);
  VKFUNDEFINE(glCullFace);
  // GLAPI void APIENTRY glFrontFace (GLenum mode);
  VKFUNDEFINE(glFrontFace);
  // GLAPI void APIENTRY glHint (GLenum target, GLenum mode);
  VKFUNDEFINE(glHint);
  // GLAPI void APIENTRY glLineWidth (GLfloat width);
  VKFUNDEFINE(glLineWidth);
  // GLAPI void APIENTRY glPointSize (GLfloat size);
  VKFUNDEFINE(glPointSize);
  // GLAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);
  VKFUNDEFINE(glPolygonMode);
  // GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glScissor);
  // GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat
  // param);
  VKFUNDEFINE(glTexParameterf);
  // GLAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const
  // GLfloat *params);
  VKFUNDEFINE(glTexParameterfv);
  // GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint
  // param);
  VKFUNDEFINE(glTexParameteri);
  // GLAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const
  // GLint *params);
  VKFUNDEFINE(glTexParameteriv);
  // GLAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint
  // internalformat, GLsizei width, GLint border, GLenum format, GLenum type,
  // const void *pixels);
  VKFUNDEFINE(glTexImage1D);
  // GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint
  // internalformat, GLsizei width, GLsizei height, GLint border, GLenum format,
  // GLenum type, const void *pixels);
  VKFUNDEFINE(glTexImage2D);
  // GLAPI void APIENTRY glDrawBuffer (GLenum buf);
  VKFUNDEFINE(glDrawBuffer);
  // GLAPI void APIENTRY glClear (GLbitfield mask);
  VKFUNDEFINE(glClear);
  // GLAPI void APIENTRY glClearColor (GLfloat red, GLfloat green, GLfloat blue,
  // GLfloat alpha);
  VKFUNDEFINE(glClearColor);
  // GLAPI void APIENTRY glClearStencil (GLint s);
  VKFUNDEFINE(glClearStencil);
  // GLAPI void APIENTRY glClearDepth (GLdouble depth);
  VKFUNDEFINE(glClearDepth);
  // GLAPI void APIENTRY glStencilMask (GLuint mask);
  VKFUNDEFINE(glStencilMask);
  // GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean
  // blue, GLboolean alpha);
  VKFUNDEFINE(glColorMask);
  // GLAPI void APIENTRY glDepthMask (GLboolean flag);
  VKFUNDEFINE(glDepthMask);
  // GLAPI void APIENTRY glDisable (GLenum cap);
  VKFUNDEFINE(glDisable);
  // GLAPI void APIENTRY glEnable (GLenum cap);
  VKFUNDEFINE(glEnable);
  // GLAPI void APIENTRY glFinish (void);
  VKFUNDEFINE(glFinish);
  // GLAPI void APIENTRY glFlush (void);
  VKFUNDEFINE(glFlush);
  // GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
  VKFUNDEFINE(glBlendFunc);
  // GLAPI void APIENTRY glLogicOp (GLenum opcode);
  VKFUNDEFINE(glLogicOp);
  // GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
  VKFUNDEFINE(glStencilFunc);
  // GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
  VKFUNDEFINE(glStencilOp);
  // GLAPI void APIENTRY glDepthFunc (GLenum func);
  VKFUNDEFINE(glDepthFunc);
  // GLAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);
  VKFUNDEFINE(glPixelStoref);
  // GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);
  VKFUNDEFINE(glPixelStorei);
  // GLAPI void APIENTRY glReadBuffer (GLenum src);
  VKFUNDEFINE(glReadBuffer);
  // GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei
  // height, GLenum format, GLenum type, void *pixels);
  VKFUNDEFINE(glReadPixels);
  // GLAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);
  VKFUNDEFINE(glGetBooleanv);
  // GLAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *data);
  VKFUNDEFINE(glGetDoublev);
  // GLAPI GLenum APIENTRY glGetError (void);
  VKFUNDEFINE(glGetError);
  // GLAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *data);
  VKFUNDEFINE(glGetFloatv);
  // GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *data);
  VKFUNDEFINE(glGetIntegerv);
  // GLAPI const GLubyte *APIENTRY glGetString (GLenum name);
  VKFUNDEFINE(glGetString);
  // GLAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum
  // format, GLenum type, void *pixels);
  VKFUNDEFINE(glGetTexImage);
  // GLAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname,
  // GLfloat *params);
  VKFUNDEFINE(glGetTexParameterfv);
  // GLAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint
  // *params);
  VKFUNDEFINE(glGetTexParameteriv);
  // GLAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level,
  // GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetTexLevelParameterfv);
  // GLAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetTexLevelParameteriv);
  // GLAPI GLboolean APIENTRY glIsEnabled (GLenum cap);
  VKFUNDEFINE(glIsEnabled);
  // GLAPI void APIENTRY glDepthRange (GLdouble n, GLdouble f);
  VKFUNDEFINE(glDepthRange);
  // GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glViewport);
  // GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
  VKFUNDEFINE(glDrawArrays);
  // GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum
  // type, const void *indices);
  VKFUNDEFINE(glDrawElements);
  // GLAPI void APIENTRY glGetPointerv (GLenum pname, void **params);
  VKFUNDEFINE(glGetPointerv);
  // GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
  VKFUNDEFINE(glPolygonOffset);
  // GLAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum
  // internalformat, GLint x, GLint y, GLsizei width, GLint border);
  VKFUNDEFINE(glCopyTexImage1D);
  // GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum
  // internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint
  // border);
  VKFUNDEFINE(glCopyTexImage2D);
  // GLAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint
  // xoffset, GLint x, GLint y, GLsizei width);
  VKFUNDEFINE(glCopyTexSubImage1D);
  // GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint
  // xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyTexSubImage2D);
  // GLAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint
  // xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage1D);
  // GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint
  // xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
  // GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage2D);
  // GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);
  VKFUNDEFINE(glBindTexture);
  // GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
  VKFUNDEFINE(glDeleteTextures);
  // GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);
  VKFUNDEFINE(glGenTextures);
  // GLAPI GLboolean APIENTRY glIsTexture (GLuint texture);
  VKFUNDEFINE(glIsTexture);

  bool TRY_LOAD_GL_VERSION_1_2();                               // 0
  bool TRY_LOAD_GL_VERSION_1_3();                               // 1
  bool TRY_LOAD_GL_VERSION_1_4();                               // 2
  bool TRY_LOAD_GL_VERSION_1_5();                               // 3
  bool TRY_LOAD_GL_VERSION_2_0();                               // 4
  bool TRY_LOAD_GL_VERSION_2_1();                               // 5
  bool TRY_LOAD_GL_VERSION_3_0();                               // 6
  bool TRY_LOAD_GL_VERSION_3_1();                               // 7
  bool TRY_LOAD_GL_VERSION_3_2();                               // 8
  bool TRY_LOAD_GL_VERSION_3_3();                               // 9
  bool TRY_LOAD_GL_VERSION_4_0();                               // 10
  bool TRY_LOAD_GL_VERSION_4_1();                               // 11
  bool TRY_LOAD_GL_VERSION_4_2();                               // 12
  bool TRY_LOAD_GL_VERSION_4_3();                               // 13
  bool TRY_LOAD_GL_VERSION_4_4();                               // 14
  bool TRY_LOAD_GL_VERSION_4_5();                               // 15
  bool TRY_LOAD_GL_VERSION_4_6();                               // 16
  bool TRY_LOAD_GL_ARB_ES3_2_compatibility();                   // 17
  bool TRY_LOAD_GL_ARB_bindless_texture();                      // 18
  bool TRY_LOAD_GL_ARB_cl_event();                              // 19
  bool TRY_LOAD_GL_ARB_color_buffer_float();                    // 20
  bool TRY_LOAD_GL_ARB_compute_variable_group_size();           // 21
  bool TRY_LOAD_GL_ARB_debug_output();                          // 22
  bool TRY_LOAD_GL_ARB_draw_buffers();                          // 23
  bool TRY_LOAD_GL_ARB_draw_buffers_blend();                    // 24
  bool TRY_LOAD_GL_ARB_draw_instanced();                        // 25
  bool TRY_LOAD_GL_ARB_fragment_program();                      // 26
  bool TRY_LOAD_GL_ARB_geometry_shader4();                      // 27
  bool TRY_LOAD_GL_ARB_gl_spirv();                              // 28
  bool TRY_LOAD_GL_ARB_gpu_shader_int64();                      // 29
  bool TRY_LOAD_GL_ARB_imaging();                               // 30
  bool TRY_LOAD_GL_ARB_indirect_parameters();                   // 31
  bool TRY_LOAD_GL_ARB_instanced_arrays();                      // 32
  bool TRY_LOAD_GL_ARB_matrix_palette();                        // 33
  bool TRY_LOAD_GL_ARB_multisample();                           // 34
  bool TRY_LOAD_GL_ARB_multitexture();                          // 35
  bool TRY_LOAD_GL_ARB_occlusion_query();                       // 36
  bool TRY_LOAD_GL_ARB_parallel_shader_compile();               // 37
  bool TRY_LOAD_GL_ARB_point_parameters();                      // 38
  bool TRY_LOAD_GL_ARB_robustness();                            // 39
  bool TRY_LOAD_GL_ARB_sample_locations();                      // 40
  bool TRY_LOAD_GL_ARB_sample_shading();                        // 41
  bool TRY_LOAD_GL_ARB_shader_objects();                        // 42
  bool TRY_LOAD_GL_ARB_shading_language_include();              // 43
  bool TRY_LOAD_GL_ARB_sparse_buffer();                         // 44
  bool TRY_LOAD_GL_ARB_sparse_texture();                        // 45
  bool TRY_LOAD_GL_ARB_texture_buffer_object();                 // 46
  bool TRY_LOAD_GL_ARB_texture_compression();                   // 47
  bool TRY_LOAD_GL_ARB_transpose_matrix();                      // 48
  bool TRY_LOAD_GL_ARB_vertex_blend();                          // 49
  bool TRY_LOAD_GL_ARB_vertex_buffer_object();                  // 50
  bool TRY_LOAD_GL_ARB_vertex_program();                        // 51
  bool TRY_LOAD_GL_ARB_vertex_shader();                         // 52
  bool TRY_LOAD_GL_ARB_viewport_array();                        // 53
  bool TRY_LOAD_GL_ARB_window_pos();                            // 54
  bool TRY_LOAD_GL_KHR_blend_equation_advanced();               // 55
  bool TRY_LOAD_GL_KHR_parallel_shader_compile();               // 56
  bool TRY_LOAD_GL_OES_byte_coordinates();                      // 57
  bool TRY_LOAD_GL_OES_fixed_point();                           // 58
  bool TRY_LOAD_GL_OES_query_matrix();                          // 59
  bool TRY_LOAD_GL_OES_single_precision();                      // 60
  bool TRY_LOAD_GL_3DFX_tbuffer();                              // 61
  bool TRY_LOAD_GL_AMD_debug_output();                          // 62
  bool TRY_LOAD_GL_AMD_draw_buffers_blend();                    // 63
  bool TRY_LOAD_GL_AMD_framebuffer_multisample_advanced();      // 64
  bool TRY_LOAD_GL_AMD_framebuffer_sample_positions();          // 65
  bool TRY_LOAD_GL_AMD_gpu_shader_int64();                      // 66
  bool TRY_LOAD_GL_AMD_interleaved_elements();                  // 67
  bool TRY_LOAD_GL_AMD_multi_draw_indirect();                   // 68
  bool TRY_LOAD_GL_AMD_name_gen_delete();                       // 69
  bool TRY_LOAD_GL_AMD_occlusion_query_event();                 // 70
  bool TRY_LOAD_GL_AMD_performance_monitor();                   // 71
  bool TRY_LOAD_GL_AMD_sample_positions();                      // 72
  bool TRY_LOAD_GL_AMD_sparse_texture();                        // 73
  bool TRY_LOAD_GL_AMD_stencil_operation_extended();            // 74
  bool TRY_LOAD_GL_AMD_vertex_shader_tessellator();             // 75
  bool TRY_LOAD_GL_APPLE_element_array();                       // 76
  bool TRY_LOAD_GL_APPLE_fence();                               // 77
  bool TRY_LOAD_GL_APPLE_flush_buffer_range();                  // 78
  bool TRY_LOAD_GL_APPLE_object_purgeable();                    // 79
  bool TRY_LOAD_GL_APPLE_texture_range();                       // 80
  bool TRY_LOAD_GL_APPLE_vertex_array_object();                 // 81
  bool TRY_LOAD_GL_APPLE_vertex_array_range();                  // 82
  bool TRY_LOAD_GL_APPLE_vertex_program_evaluators();           // 83
  bool TRY_LOAD_GL_ATI_draw_buffers();                          // 84
  bool TRY_LOAD_GL_ATI_element_array();                         // 85
  bool TRY_LOAD_GL_ATI_envmap_bumpmap();                        // 86
  bool TRY_LOAD_GL_ATI_fragment_shader();                       // 87
  bool TRY_LOAD_GL_ATI_map_object_buffer();                     // 88
  bool TRY_LOAD_GL_ATI_pn_triangles();                          // 89
  bool TRY_LOAD_GL_ATI_separate_stencil();                      // 90
  bool TRY_LOAD_GL_ATI_vertex_array_object();                   // 91
  bool TRY_LOAD_GL_ATI_vertex_attrib_array_object();            // 92
  bool TRY_LOAD_GL_ATI_vertex_streams();                        // 93
  bool TRY_LOAD_GL_EXT_EGL_image_storage();                     // 94
  bool TRY_LOAD_GL_EXT_bindable_uniform();                      // 95
  bool TRY_LOAD_GL_EXT_blend_color();                           // 96
  bool TRY_LOAD_GL_EXT_blend_equation_separate();               // 97
  bool TRY_LOAD_GL_EXT_blend_func_separate();                   // 98
  bool TRY_LOAD_GL_EXT_blend_minmax();                          // 99
  bool TRY_LOAD_GL_EXT_color_subtable();                        // 100
  bool TRY_LOAD_GL_EXT_compiled_vertex_array();                 // 101
  bool TRY_LOAD_GL_EXT_convolution();                           // 102
  bool TRY_LOAD_GL_EXT_coordinate_frame();                      // 103
  bool TRY_LOAD_GL_EXT_copy_texture();                          // 104
  bool TRY_LOAD_GL_EXT_cull_vertex();                           // 105
  bool TRY_LOAD_GL_EXT_debug_label();                           // 106
  bool TRY_LOAD_GL_EXT_debug_marker();                          // 107
  bool TRY_LOAD_GL_EXT_depth_bounds_test();                     // 108
  bool TRY_LOAD_GL_EXT_direct_state_access();                   // 109
  bool TRY_LOAD_GL_EXT_draw_buffers2();                         // 110
  bool TRY_LOAD_GL_EXT_draw_instanced();                        // 111
  bool TRY_LOAD_GL_EXT_draw_range_elements();                   // 112
  bool TRY_LOAD_GL_EXT_external_buffer();                       // 113
  bool TRY_LOAD_GL_EXT_fog_coord();                             // 114
  bool TRY_LOAD_GL_EXT_framebuffer_blit();                      // 115
  bool TRY_LOAD_GL_EXT_framebuffer_blit_layers();               // 116
  bool TRY_LOAD_GL_EXT_framebuffer_multisample();               // 117
  bool TRY_LOAD_GL_EXT_framebuffer_object();                    // 118
  bool TRY_LOAD_GL_EXT_geometry_shader4();                      // 119
  bool TRY_LOAD_GL_EXT_gpu_program_parameters();                // 120
  bool TRY_LOAD_GL_EXT_gpu_shader4();                           // 121
  bool TRY_LOAD_GL_EXT_histogram();                             // 122
  bool TRY_LOAD_GL_EXT_index_func();                            // 123
  bool TRY_LOAD_GL_EXT_index_material();                        // 124
  bool TRY_LOAD_GL_EXT_light_texture();                         // 125
  bool TRY_LOAD_GL_EXT_memory_object();                         // 126
  bool TRY_LOAD_GL_EXT_memory_object_fd();                      // 127
  bool TRY_LOAD_GL_EXT_memory_object_win32();                   // 128
  bool TRY_LOAD_GL_EXT_multi_draw_arrays();                     // 129
  bool TRY_LOAD_GL_EXT_multisample();                           // 130
  bool TRY_LOAD_GL_EXT_paletted_texture();                      // 131
  bool TRY_LOAD_GL_EXT_pixel_transform();                       // 132
  bool TRY_LOAD_GL_EXT_point_parameters();                      // 133
  bool TRY_LOAD_GL_EXT_polygon_offset();                        // 134
  bool TRY_LOAD_GL_EXT_polygon_offset_clamp();                  // 135
  bool TRY_LOAD_GL_EXT_provoking_vertex();                      // 136
  bool TRY_LOAD_GL_EXT_raster_multisample();                    // 137
  bool TRY_LOAD_GL_EXT_secondary_color();                       // 138
  bool TRY_LOAD_GL_EXT_semaphore();                             // 139
  bool TRY_LOAD_GL_EXT_semaphore_fd();                          // 140
  bool TRY_LOAD_GL_EXT_semaphore_win32();                       // 141
  bool TRY_LOAD_GL_EXT_separate_shader_objects();               // 142
  bool TRY_LOAD_GL_EXT_shader_framebuffer_fetch_non_coherent(); // 143
  bool TRY_LOAD_GL_EXT_shader_image_load_store();               // 144
  bool TRY_LOAD_GL_EXT_stencil_clear_tag();                     // 145
  bool TRY_LOAD_GL_EXT_stencil_two_side();                      // 146
  bool TRY_LOAD_GL_EXT_subtexture();                            // 147
  bool TRY_LOAD_GL_EXT_texture3D();                             // 148
  bool TRY_LOAD_GL_EXT_texture_array();                         // 149
  bool TRY_LOAD_GL_EXT_texture_buffer_object();                 // 150
  bool TRY_LOAD_GL_EXT_texture_integer();                       // 151
  bool TRY_LOAD_GL_EXT_texture_object();                        // 152
  bool TRY_LOAD_GL_EXT_texture_perturb_normal();                // 153
  bool TRY_LOAD_GL_EXT_texture_storage();                       // 154
  bool TRY_LOAD_GL_EXT_timer_query();                           // 155
  bool TRY_LOAD_GL_EXT_transform_feedback();                    // 156
  bool TRY_LOAD_GL_EXT_vertex_array();                          // 157
  bool TRY_LOAD_GL_EXT_vertex_attrib_64bit();                   // 158
  bool TRY_LOAD_GL_EXT_vertex_shader();                         // 159
  bool TRY_LOAD_GL_EXT_vertex_weighting();                      // 160
  bool TRY_LOAD_GL_EXT_win32_keyed_mutex();                     // 161
  bool TRY_LOAD_GL_EXT_window_rectangles();                     // 162
  bool TRY_LOAD_GL_EXT_x11_sync_object();                       // 163
  bool TRY_LOAD_GL_GREMEDY_frame_terminator();                  // 164
  bool TRY_LOAD_GL_GREMEDY_string_marker();                     // 165
  bool TRY_LOAD_GL_HP_image_transform();                        // 166
  bool TRY_LOAD_GL_IBM_multimode_draw_arrays();                 // 167
  bool TRY_LOAD_GL_IBM_static_data();                           // 168
  bool TRY_LOAD_GL_IBM_vertex_array_lists();                    // 169
  bool TRY_LOAD_GL_INGR_blend_func_separate();                  // 170
  bool TRY_LOAD_GL_INTEL_framebuffer_CMAA();                    // 171
  bool TRY_LOAD_GL_INTEL_map_texture();                         // 172
  bool TRY_LOAD_GL_INTEL_parallel_arrays();                     // 173
  bool TRY_LOAD_GL_INTEL_performance_query();                   // 174
  bool TRY_LOAD_GL_MESA_framebuffer_flip_y();                   // 175
  bool TRY_LOAD_GL_MESA_resize_buffers();                       // 176
  bool TRY_LOAD_GL_MESA_window_pos();                           // 177
  bool TRY_LOAD_GL_NVX_conditional_render();                    // 178
  bool TRY_LOAD_GL_NVX_gpu_multicast2();                        // 179
  bool TRY_LOAD_GL_NVX_linked_gpu_multicast();                  // 180
  bool TRY_LOAD_GL_NVX_progress_fence();                        // 181
  bool TRY_LOAD_GL_NV_alpha_to_coverage_dither_control();       // 182
  bool TRY_LOAD_GL_NV_bindless_multi_draw_indirect();           // 183
  bool TRY_LOAD_GL_NV_bindless_multi_draw_indirect_count();     // 184
  bool TRY_LOAD_GL_NV_bindless_texture();                       // 185
  bool TRY_LOAD_GL_NV_blend_equation_advanced();                // 186
  bool TRY_LOAD_GL_NV_clip_space_w_scaling();                   // 187
  bool TRY_LOAD_GL_NV_command_list();                           // 188
  bool TRY_LOAD_GL_NV_conditional_render();                     // 189
  bool TRY_LOAD_GL_NV_conservative_raster();                    // 190
  bool TRY_LOAD_GL_NV_conservative_raster_dilate();             // 191
  bool TRY_LOAD_GL_NV_conservative_raster_pre_snap_triangles(); // 192
  bool TRY_LOAD_GL_NV_copy_image();                             // 193
  bool TRY_LOAD_GL_NV_depth_buffer_float();                     // 194
  bool TRY_LOAD_GL_NV_draw_texture();                           // 195
  bool TRY_LOAD_GL_NV_draw_vulkan_image();                      // 196
  bool TRY_LOAD_GL_NV_evaluators();                             // 197
  bool TRY_LOAD_GL_NV_explicit_multisample();                   // 198
  bool TRY_LOAD_GL_NV_fence();                                  // 199
  bool TRY_LOAD_GL_NV_fragment_coverage_to_color();             // 200
  bool TRY_LOAD_GL_NV_fragment_program();                       // 201
  bool TRY_LOAD_GL_NV_framebuffer_mixed_samples();              // 202
  bool TRY_LOAD_GL_NV_framebuffer_multisample_coverage();       // 203
  bool TRY_LOAD_GL_NV_geometry_program4();                      // 204
  bool TRY_LOAD_GL_NV_gpu_multicast();                          // 205
  bool TRY_LOAD_GL_NV_gpu_program4();                           // 206
  bool TRY_LOAD_GL_NV_gpu_program5();                           // 207
  bool TRY_LOAD_GL_NV_half_float();                             // 208
  bool TRY_LOAD_GL_NV_internalformat_sample_query();            // 209
  bool TRY_LOAD_GL_NV_memory_attachment();                      // 210
  bool TRY_LOAD_GL_NV_memory_object_sparse();                   // 211
  bool TRY_LOAD_GL_NV_mesh_shader();                            // 212
  bool TRY_LOAD_GL_NV_occlusion_query();                        // 213
  bool TRY_LOAD_GL_NV_parameter_buffer_object();                // 214
  bool TRY_LOAD_GL_NV_path_rendering();                         // 215
  bool TRY_LOAD_GL_NV_pixel_data_range();                       // 216
  bool TRY_LOAD_GL_NV_point_sprite();                           // 217
  bool TRY_LOAD_GL_NV_present_video();                          // 218
  bool TRY_LOAD_GL_NV_primitive_restart();                      // 219
  bool TRY_LOAD_GL_NV_query_resource();                         // 220
  bool TRY_LOAD_GL_NV_query_resource_tag();                     // 221
  bool TRY_LOAD_GL_NV_register_combiners();                     // 222
  bool TRY_LOAD_GL_NV_register_combiners2();                    // 223
  bool TRY_LOAD_GL_NV_sample_locations();                       // 224
  bool TRY_LOAD_GL_NV_scissor_exclusive();                      // 225
  bool TRY_LOAD_GL_NV_shader_buffer_load();                     // 226
  bool TRY_LOAD_GL_NV_shading_rate_image();                     // 227
  bool TRY_LOAD_GL_NV_texture_barrier();                        // 228
  bool TRY_LOAD_GL_NV_texture_multisample();                    // 229
  bool TRY_LOAD_GL_NV_timeline_semaphore();                     // 230
  bool TRY_LOAD_GL_NV_transform_feedback();                     // 231
  bool TRY_LOAD_GL_NV_transform_feedback2();                    // 232
  bool TRY_LOAD_GL_NV_vdpau_interop();                          // 233
  bool TRY_LOAD_GL_NV_vdpau_interop2();                         // 234
  bool TRY_LOAD_GL_NV_vertex_array_range();                     // 235
  bool TRY_LOAD_GL_NV_vertex_attrib_integer_64bit();            // 236
  bool TRY_LOAD_GL_NV_vertex_buffer_unified_memory();           // 237
  bool TRY_LOAD_GL_NV_vertex_program();                         // 238
  bool TRY_LOAD_GL_NV_video_capture();                          // 239
  bool TRY_LOAD_GL_NV_viewport_swizzle();                       // 240
  bool TRY_LOAD_GL_OVR_multiview();                             // 241
  bool TRY_LOAD_GL_PGI_misc_hints();                            // 242
  bool TRY_LOAD_GL_SGIS_detail_texture();                       // 243
  bool TRY_LOAD_GL_SGIS_fog_function();                         // 244
  bool TRY_LOAD_GL_SGIS_multisample();                          // 245
  bool TRY_LOAD_GL_SGIS_pixel_texture();                        // 246
  bool TRY_LOAD_GL_SGIS_point_parameters();                     // 247
  bool TRY_LOAD_GL_SGIS_sharpen_texture();                      // 248
  bool TRY_LOAD_GL_SGIS_texture4D();                            // 249
  bool TRY_LOAD_GL_SGIS_texture_color_mask();                   // 250
  bool TRY_LOAD_GL_SGIS_texture_filter4();                      // 251
  bool TRY_LOAD_GL_SGIX_async();                                // 252
  bool TRY_LOAD_GL_SGIX_flush_raster();                         // 253
  bool TRY_LOAD_GL_SGIX_fragment_lighting();                    // 254
  bool TRY_LOAD_GL_SGIX_framezoom();                            // 255
  bool TRY_LOAD_GL_SGIX_igloo_interface();                      // 256
  bool TRY_LOAD_GL_SGIX_instruments();                          // 257
  bool TRY_LOAD_GL_SGIX_list_priority();                        // 258
  bool TRY_LOAD_GL_SGIX_pixel_texture();                        // 259
  bool TRY_LOAD_GL_SGIX_polynomial_ffd();                       // 260
  bool TRY_LOAD_GL_SGIX_reference_plane();                      // 261
  bool TRY_LOAD_GL_SGIX_sprite();                               // 262
  bool TRY_LOAD_GL_SGIX_tag_sample_buffer();                    // 263
  bool TRY_LOAD_GL_SGI_color_table();                           // 264
  bool TRY_LOAD_GL_SUNX_constant_data();                        // 265
  bool TRY_LOAD_GL_SUN_global_alpha();                          // 266
  bool TRY_LOAD_GL_SUN_mesh_array();                            // 267
  bool TRY_LOAD_GL_SUN_triangle_list();                         // 268
  bool TRY_LOAD_GL_SUN_vertex();                                // 269
  bool TRY_LOAD_GL_VERSION_1_0();                               // 270
  bool TRY_LOAD_GL_VERSION_1_1();                               // 271
  bool TRY_LOAD_GL_NV_gpu_shader5();                            // 272

  typedef bool (OpenGLLoaderLoader::*EXTLOADER)();
  using MAP = ExtendsMap<std::string, EXTLOADER, size_t>;
  static std::vector<EXTLOADER> TRAN2FUN(const std::vector<std::string> &list);
  static std::vector<size_t> TRAN(const std::vector<std::string> &list);

  bool MappingToNeedLoad(const std::vector<size_t> &list);
  static std::vector<EXTLOADER>
  TRAN2FUN(const std::vector<std::string> &&list) {
    return TRAN2FUN(list);
  }
  static std::vector<size_t> TRAN(std::vector<std::string> &&list) {
    return TRAN(list);
  }
  inline bool MappingToNeedLoad(const std::vector<std::string> &list) {
    auto encd = TRAN(list);
    return MappingToNeedLoad(encd);
  }
  inline bool MappingToNeedLoad(std::vector<std::string> &&list) {
    return MappingToNeedLoad(list);
  }

  Flags LoadAll();
};
extern LIBHANNLE GetOpenGLLoaderLibHandle();
class OpenGLLoaderPHILoader : public OpenGLLoaderLoader {
public:
  LIBHANNLE libHandle;
  OpenGLLoaderPHILoader();
  bool init();
  static APIProc phiLoadFunc(void *userptr, std::string_view name);
};

#undef VKFUNDEFINE