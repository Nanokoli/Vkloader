#pragma once
#include "../PhiLoader.hpp"
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
typedef PFNGLACTIVETEXTUREPROC PFN_glActiveTexture;
typedef PFNGLATTACHSHADERPROC PFN_glAttachShader;
typedef PFNGLBINDATTRIBLOCATIONPROC PFN_glBindAttribLocation;
typedef PFNGLBINDBUFFERPROC PFN_glBindBuffer;
typedef PFNGLBINDFRAMEBUFFERPROC PFN_glBindFramebuffer;
typedef PFNGLBINDRENDERBUFFERPROC PFN_glBindRenderbuffer;
typedef PFNGLBINDTEXTUREPROC PFN_glBindTexture;
typedef PFNGLBLENDCOLORPROC PFN_glBlendColor;
typedef PFNGLBLENDEQUATIONPROC PFN_glBlendEquation;
typedef PFNGLBLENDEQUATIONSEPARATEPROC PFN_glBlendEquationSeparate;
typedef PFNGLBLENDFUNCPROC PFN_glBlendFunc;
typedef PFNGLBLENDFUNCSEPARATEPROC PFN_glBlendFuncSeparate;
typedef PFNGLBUFFERDATAPROC PFN_glBufferData;
typedef PFNGLBUFFERSUBDATAPROC PFN_glBufferSubData;
typedef PFNGLCHECKFRAMEBUFFERSTATUSPROC PFN_glCheckFramebufferStatus;
typedef PFNGLCLEARPROC PFN_glClear;
typedef PFNGLCLEARCOLORPROC PFN_glClearColor;
typedef PFNGLCLEARDEPTHFPROC PFN_glClearDepthf;
typedef PFNGLCLEARSTENCILPROC PFN_glClearStencil;
typedef PFNGLCOLORMASKPROC PFN_glColorMask;
typedef PFNGLCOMPILESHADERPROC PFN_glCompileShader;
typedef PFNGLCOMPRESSEDTEXIMAGE2DPROC PFN_glCompressedTexImage2D;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC PFN_glCompressedTexSubImage2D;
typedef PFNGLCOPYTEXIMAGE2DPROC PFN_glCopyTexImage2D;
typedef PFNGLCOPYTEXSUBIMAGE2DPROC PFN_glCopyTexSubImage2D;
typedef PFNGLCREATEPROGRAMPROC PFN_glCreateProgram;
typedef PFNGLCREATESHADERPROC PFN_glCreateShader;
typedef PFNGLCULLFACEPROC PFN_glCullFace;
typedef PFNGLDELETEBUFFERSPROC PFN_glDeleteBuffers;
typedef PFNGLDELETEFRAMEBUFFERSPROC PFN_glDeleteFramebuffers;
typedef PFNGLDELETEPROGRAMPROC PFN_glDeleteProgram;
typedef PFNGLDELETERENDERBUFFERSPROC PFN_glDeleteRenderbuffers;
typedef PFNGLDELETESHADERPROC PFN_glDeleteShader;
typedef PFNGLDELETETEXTURESPROC PFN_glDeleteTextures;
typedef PFNGLDEPTHFUNCPROC PFN_glDepthFunc;
typedef PFNGLDEPTHMASKPROC PFN_glDepthMask;
typedef PFNGLDEPTHRANGEFPROC PFN_glDepthRangef;
typedef PFNGLDETACHSHADERPROC PFN_glDetachShader;
typedef PFNGLDISABLEPROC PFN_glDisable;
typedef PFNGLDISABLEVERTEXATTRIBARRAYPROC PFN_glDisableVertexAttribArray;
typedef PFNGLDRAWARRAYSPROC PFN_glDrawArrays;
typedef PFNGLDRAWELEMENTSPROC PFN_glDrawElements;
typedef PFNGLENABLEPROC PFN_glEnable;
typedef PFNGLENABLEVERTEXATTRIBARRAYPROC PFN_glEnableVertexAttribArray;
typedef PFNGLFINISHPROC PFN_glFinish;
typedef PFNGLFLUSHPROC PFN_glFlush;
typedef PFNGLFRAMEBUFFERRENDERBUFFERPROC PFN_glFramebufferRenderbuffer;
typedef PFNGLFRAMEBUFFERTEXTURE2DPROC PFN_glFramebufferTexture2D;
typedef PFNGLFRONTFACEPROC PFN_glFrontFace;
typedef PFNGLGENBUFFERSPROC PFN_glGenBuffers;
typedef PFNGLGENERATEMIPMAPPROC PFN_glGenerateMipmap;
typedef PFNGLGENFRAMEBUFFERSPROC PFN_glGenFramebuffers;
typedef PFNGLGENRENDERBUFFERSPROC PFN_glGenRenderbuffers;
typedef PFNGLGENTEXTURESPROC PFN_glGenTextures;
typedef PFNGLGETACTIVEATTRIBPROC PFN_glGetActiveAttrib;
typedef PFNGLGETACTIVEUNIFORMPROC PFN_glGetActiveUniform;
typedef PFNGLGETATTACHEDSHADERSPROC PFN_glGetAttachedShaders;
typedef PFNGLGETATTRIBLOCATIONPROC PFN_glGetAttribLocation;
typedef PFNGLGETBOOLEANVPROC PFN_glGetBooleanv;
typedef PFNGLGETBUFFERPARAMETERIVPROC PFN_glGetBufferParameteriv;
typedef PFNGLGETERRORPROC PFN_glGetError;
typedef PFNGLGETFLOATVPROC PFN_glGetFloatv;
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
    PFN_glGetFramebufferAttachmentParameteriv;
typedef PFNGLGETINTEGERVPROC PFN_glGetIntegerv;
typedef PFNGLGETPROGRAMIVPROC PFN_glGetProgramiv;
typedef PFNGLGETPROGRAMINFOLOGPROC PFN_glGetProgramInfoLog;
typedef PFNGLGETRENDERBUFFERPARAMETERIVPROC PFN_glGetRenderbufferParameteriv;
typedef PFNGLGETSHADERIVPROC PFN_glGetShaderiv;
typedef PFNGLGETSHADERINFOLOGPROC PFN_glGetShaderInfoLog;
typedef PFNGLGETSHADERPRECISIONFORMATPROC PFN_glGetShaderPrecisionFormat;
typedef PFNGLGETSHADERSOURCEPROC PFN_glGetShaderSource;
typedef PFNGLGETSTRINGPROC PFN_glGetString;
typedef PFNGLGETTEXPARAMETERFVPROC PFN_glGetTexParameterfv;
typedef PFNGLGETTEXPARAMETERIVPROC PFN_glGetTexParameteriv;
typedef PFNGLGETUNIFORMFVPROC PFN_glGetUniformfv;
typedef PFNGLGETUNIFORMIVPROC PFN_glGetUniformiv;
typedef PFNGLGETUNIFORMLOCATIONPROC PFN_glGetUniformLocation;
typedef PFNGLGETVERTEXATTRIBFVPROC PFN_glGetVertexAttribfv;
typedef PFNGLGETVERTEXATTRIBIVPROC PFN_glGetVertexAttribiv;
typedef PFNGLGETVERTEXATTRIBPOINTERVPROC PFN_glGetVertexAttribPointerv;
typedef PFNGLHINTPROC PFN_glHint;
typedef PFNGLISBUFFERPROC PFN_glIsBuffer;
typedef PFNGLISENABLEDPROC PFN_glIsEnabled;
typedef PFNGLISFRAMEBUFFERPROC PFN_glIsFramebuffer;
typedef PFNGLISPROGRAMPROC PFN_glIsProgram;
typedef PFNGLISRENDERBUFFERPROC PFN_glIsRenderbuffer;
typedef PFNGLISSHADERPROC PFN_glIsShader;
typedef PFNGLISTEXTUREPROC PFN_glIsTexture;
typedef PFNGLLINEWIDTHPROC PFN_glLineWidth;
typedef PFNGLLINKPROGRAMPROC PFN_glLinkProgram;
typedef PFNGLPIXELSTOREIPROC PFN_glPixelStorei;
typedef PFNGLPOLYGONOFFSETPROC PFN_glPolygonOffset;
typedef PFNGLREADPIXELSPROC PFN_glReadPixels;
typedef PFNGLRELEASESHADERCOMPILERPROC PFN_glReleaseShaderCompiler;
typedef PFNGLRENDERBUFFERSTORAGEPROC PFN_glRenderbufferStorage;
typedef PFNGLSAMPLECOVERAGEPROC PFN_glSampleCoverage;
typedef PFNGLSCISSORPROC PFN_glScissor;
typedef PFNGLSHADERBINARYPROC PFN_glShaderBinary;
typedef PFNGLSHADERSOURCEPROC PFN_glShaderSource;
typedef PFNGLSTENCILFUNCPROC PFN_glStencilFunc;
typedef PFNGLSTENCILFUNCSEPARATEPROC PFN_glStencilFuncSeparate;
typedef PFNGLSTENCILMASKPROC PFN_glStencilMask;
typedef PFNGLSTENCILMASKSEPARATEPROC PFN_glStencilMaskSeparate;
typedef PFNGLSTENCILOPPROC PFN_glStencilOp;
typedef PFNGLSTENCILOPSEPARATEPROC PFN_glStencilOpSeparate;
typedef PFNGLTEXIMAGE2DPROC PFN_glTexImage2D;
typedef PFNGLTEXPARAMETERFPROC PFN_glTexParameterf;
typedef PFNGLTEXPARAMETERFVPROC PFN_glTexParameterfv;
typedef PFNGLTEXPARAMETERIPROC PFN_glTexParameteri;
typedef PFNGLTEXPARAMETERIVPROC PFN_glTexParameteriv;
typedef PFNGLTEXSUBIMAGE2DPROC PFN_glTexSubImage2D;
typedef PFNGLUNIFORM1FPROC PFN_glUniform1f;
typedef PFNGLUNIFORM1FVPROC PFN_glUniform1fv;
typedef PFNGLUNIFORM1IPROC PFN_glUniform1i;
typedef PFNGLUNIFORM1IVPROC PFN_glUniform1iv;
typedef PFNGLUNIFORM2FPROC PFN_glUniform2f;
typedef PFNGLUNIFORM2FVPROC PFN_glUniform2fv;
typedef PFNGLUNIFORM2IPROC PFN_glUniform2i;
typedef PFNGLUNIFORM2IVPROC PFN_glUniform2iv;
typedef PFNGLUNIFORM3FPROC PFN_glUniform3f;
typedef PFNGLUNIFORM3FVPROC PFN_glUniform3fv;
typedef PFNGLUNIFORM3IPROC PFN_glUniform3i;
typedef PFNGLUNIFORM3IVPROC PFN_glUniform3iv;
typedef PFNGLUNIFORM4FPROC PFN_glUniform4f;
typedef PFNGLUNIFORM4FVPROC PFN_glUniform4fv;
typedef PFNGLUNIFORM4IPROC PFN_glUniform4i;
typedef PFNGLUNIFORM4IVPROC PFN_glUniform4iv;
typedef PFNGLUNIFORMMATRIX2FVPROC PFN_glUniformMatrix2fv;
typedef PFNGLUNIFORMMATRIX3FVPROC PFN_glUniformMatrix3fv;
typedef PFNGLUNIFORMMATRIX4FVPROC PFN_glUniformMatrix4fv;
typedef PFNGLUSEPROGRAMPROC PFN_glUseProgram;
typedef PFNGLVALIDATEPROGRAMPROC PFN_glValidateProgram;
typedef PFNGLVERTEXATTRIB1FPROC PFN_glVertexAttrib1f;
typedef PFNGLVERTEXATTRIB1FVPROC PFN_glVertexAttrib1fv;
typedef PFNGLVERTEXATTRIB2FPROC PFN_glVertexAttrib2f;
typedef PFNGLVERTEXATTRIB2FVPROC PFN_glVertexAttrib2fv;
typedef PFNGLVERTEXATTRIB3FPROC PFN_glVertexAttrib3f;
typedef PFNGLVERTEXATTRIB3FVPROC PFN_glVertexAttrib3fv;
typedef PFNGLVERTEXATTRIB4FPROC PFN_glVertexAttrib4f;
typedef PFNGLVERTEXATTRIB4FVPROC PFN_glVertexAttrib4fv;
typedef PFNGLVERTEXATTRIBPOINTERPROC PFN_glVertexAttribPointer;
typedef PFNGLVIEWPORTPROC PFN_glViewport;
typedef PFNGLREADBUFFERPROC PFN_glReadBuffer;
typedef PFNGLDRAWRANGEELEMENTSPROC PFN_glDrawRangeElements;
typedef PFNGLTEXIMAGE3DPROC PFN_glTexImage3D;
typedef PFNGLTEXSUBIMAGE3DPROC PFN_glTexSubImage3D;
typedef PFNGLCOPYTEXSUBIMAGE3DPROC PFN_glCopyTexSubImage3D;
typedef PFNGLCOMPRESSEDTEXIMAGE3DPROC PFN_glCompressedTexImage3D;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC PFN_glCompressedTexSubImage3D;
typedef PFNGLGENQUERIESPROC PFN_glGenQueries;
typedef PFNGLDELETEQUERIESPROC PFN_glDeleteQueries;
typedef PFNGLISQUERYPROC PFN_glIsQuery;
typedef PFNGLBEGINQUERYPROC PFN_glBeginQuery;
typedef PFNGLENDQUERYPROC PFN_glEndQuery;
typedef PFNGLGETQUERYIVPROC PFN_glGetQueryiv;
typedef PFNGLGETQUERYOBJECTUIVPROC PFN_glGetQueryObjectuiv;
typedef PFNGLUNMAPBUFFERPROC PFN_glUnmapBuffer;
typedef PFNGLGETBUFFERPOINTERVPROC PFN_glGetBufferPointerv;
typedef PFNGLDRAWBUFFERSPROC PFN_glDrawBuffers;
typedef PFNGLUNIFORMMATRIX2X3FVPROC PFN_glUniformMatrix2x3fv;
typedef PFNGLUNIFORMMATRIX3X2FVPROC PFN_glUniformMatrix3x2fv;
typedef PFNGLUNIFORMMATRIX2X4FVPROC PFN_glUniformMatrix2x4fv;
typedef PFNGLUNIFORMMATRIX4X2FVPROC PFN_glUniformMatrix4x2fv;
typedef PFNGLUNIFORMMATRIX3X4FVPROC PFN_glUniformMatrix3x4fv;
typedef PFNGLUNIFORMMATRIX4X3FVPROC PFN_glUniformMatrix4x3fv;
typedef PFNGLBLITFRAMEBUFFERPROC PFN_glBlitFramebuffer;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
    PFN_glRenderbufferStorageMultisample;
typedef PFNGLFRAMEBUFFERTEXTURELAYERPROC PFN_glFramebufferTextureLayer;
typedef PFNGLMAPBUFFERRANGEPROC PFN_glMapBufferRange;
typedef PFNGLFLUSHMAPPEDBUFFERRANGEPROC PFN_glFlushMappedBufferRange;
typedef PFNGLBINDVERTEXARRAYPROC PFN_glBindVertexArray;
typedef PFNGLDELETEVERTEXARRAYSPROC PFN_glDeleteVertexArrays;
typedef PFNGLGENVERTEXARRAYSPROC PFN_glGenVertexArrays;
typedef PFNGLISVERTEXARRAYPROC PFN_glIsVertexArray;
typedef PFNGLGETINTEGERI_VPROC PFN_glGetIntegeri_v;
typedef PFNGLBEGINTRANSFORMFEEDBACKPROC PFN_glBeginTransformFeedback;
typedef PFNGLENDTRANSFORMFEEDBACKPROC PFN_glEndTransformFeedback;
typedef PFNGLBINDBUFFERRANGEPROC PFN_glBindBufferRange;
typedef PFNGLBINDBUFFERBASEPROC PFN_glBindBufferBase;
typedef PFNGLTRANSFORMFEEDBACKVARYINGSPROC PFN_glTransformFeedbackVaryings;
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGPROC PFN_glGetTransformFeedbackVarying;
typedef PFNGLVERTEXATTRIBIPOINTERPROC PFN_glVertexAttribIPointer;
typedef PFNGLGETVERTEXATTRIBIIVPROC PFN_glGetVertexAttribIiv;
typedef PFNGLGETVERTEXATTRIBIUIVPROC PFN_glGetVertexAttribIuiv;
typedef PFNGLVERTEXATTRIBI4IPROC PFN_glVertexAttribI4i;
typedef PFNGLVERTEXATTRIBI4UIPROC PFN_glVertexAttribI4ui;
typedef PFNGLVERTEXATTRIBI4IVPROC PFN_glVertexAttribI4iv;
typedef PFNGLVERTEXATTRIBI4UIVPROC PFN_glVertexAttribI4uiv;
typedef PFNGLGETUNIFORMUIVPROC PFN_glGetUniformuiv;
typedef PFNGLGETFRAGDATALOCATIONPROC PFN_glGetFragDataLocation;
typedef PFNGLUNIFORM1UIPROC PFN_glUniform1ui;
typedef PFNGLUNIFORM2UIPROC PFN_glUniform2ui;
typedef PFNGLUNIFORM3UIPROC PFN_glUniform3ui;
typedef PFNGLUNIFORM4UIPROC PFN_glUniform4ui;
typedef PFNGLUNIFORM1UIVPROC PFN_glUniform1uiv;
typedef PFNGLUNIFORM2UIVPROC PFN_glUniform2uiv;
typedef PFNGLUNIFORM3UIVPROC PFN_glUniform3uiv;
typedef PFNGLUNIFORM4UIVPROC PFN_glUniform4uiv;
typedef PFNGLCLEARBUFFERIVPROC PFN_glClearBufferiv;
typedef PFNGLCLEARBUFFERUIVPROC PFN_glClearBufferuiv;
typedef PFNGLCLEARBUFFERFVPROC PFN_glClearBufferfv;
typedef PFNGLCLEARBUFFERFIPROC PFN_glClearBufferfi;
typedef PFNGLGETSTRINGIPROC PFN_glGetStringi;
typedef PFNGLCOPYBUFFERSUBDATAPROC PFN_glCopyBufferSubData;
typedef PFNGLGETUNIFORMINDICESPROC PFN_glGetUniformIndices;
typedef PFNGLGETACTIVEUNIFORMSIVPROC PFN_glGetActiveUniformsiv;
typedef PFNGLGETUNIFORMBLOCKINDEXPROC PFN_glGetUniformBlockIndex;
typedef PFNGLGETACTIVEUNIFORMBLOCKIVPROC PFN_glGetActiveUniformBlockiv;
typedef PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC PFN_glGetActiveUniformBlockName;
typedef PFNGLUNIFORMBLOCKBINDINGPROC PFN_glUniformBlockBinding;
typedef PFNGLDRAWARRAYSINSTANCEDPROC PFN_glDrawArraysInstanced;
typedef PFNGLDRAWELEMENTSINSTANCEDPROC PFN_glDrawElementsInstanced;
typedef PFNGLFENCESYNCPROC PFN_glFenceSync;
typedef PFNGLISSYNCPROC PFN_glIsSync;
typedef PFNGLDELETESYNCPROC PFN_glDeleteSync;
typedef PFNGLCLIENTWAITSYNCPROC PFN_glClientWaitSync;
typedef PFNGLWAITSYNCPROC PFN_glWaitSync;
typedef PFNGLGETINTEGER64VPROC PFN_glGetInteger64v;
typedef PFNGLGETSYNCIVPROC PFN_glGetSynciv;
typedef PFNGLGETINTEGER64I_VPROC PFN_glGetInteger64i_v;
typedef PFNGLGETBUFFERPARAMETERI64VPROC PFN_glGetBufferParameteri64v;
typedef PFNGLGENSAMPLERSPROC PFN_glGenSamplers;
typedef PFNGLDELETESAMPLERSPROC PFN_glDeleteSamplers;
typedef PFNGLISSAMPLERPROC PFN_glIsSampler;
typedef PFNGLBINDSAMPLERPROC PFN_glBindSampler;
typedef PFNGLSAMPLERPARAMETERIPROC PFN_glSamplerParameteri;
typedef PFNGLSAMPLERPARAMETERIVPROC PFN_glSamplerParameteriv;
typedef PFNGLSAMPLERPARAMETERFPROC PFN_glSamplerParameterf;
typedef PFNGLSAMPLERPARAMETERFVPROC PFN_glSamplerParameterfv;
typedef PFNGLGETSAMPLERPARAMETERIVPROC PFN_glGetSamplerParameteriv;
typedef PFNGLGETSAMPLERPARAMETERFVPROC PFN_glGetSamplerParameterfv;
typedef PFNGLVERTEXATTRIBDIVISORPROC PFN_glVertexAttribDivisor;
typedef PFNGLBINDTRANSFORMFEEDBACKPROC PFN_glBindTransformFeedback;
typedef PFNGLDELETETRANSFORMFEEDBACKSPROC PFN_glDeleteTransformFeedbacks;
typedef PFNGLGENTRANSFORMFEEDBACKSPROC PFN_glGenTransformFeedbacks;
typedef PFNGLISTRANSFORMFEEDBACKPROC PFN_glIsTransformFeedback;
typedef PFNGLPAUSETRANSFORMFEEDBACKPROC PFN_glPauseTransformFeedback;
typedef PFNGLRESUMETRANSFORMFEEDBACKPROC PFN_glResumeTransformFeedback;
typedef PFNGLGETPROGRAMBINARYPROC PFN_glGetProgramBinary;
typedef PFNGLPROGRAMBINARYPROC PFN_glProgramBinary;
typedef PFNGLPROGRAMPARAMETERIPROC PFN_glProgramParameteri;
typedef PFNGLINVALIDATEFRAMEBUFFERPROC PFN_glInvalidateFramebuffer;
typedef PFNGLINVALIDATESUBFRAMEBUFFERPROC PFN_glInvalidateSubFramebuffer;
typedef PFNGLTEXSTORAGE2DPROC PFN_glTexStorage2D;
typedef PFNGLTEXSTORAGE3DPROC PFN_glTexStorage3D;
typedef PFNGLGETINTERNALFORMATIVPROC PFN_glGetInternalformativ;
typedef PFNGLDISPATCHCOMPUTEPROC PFN_glDispatchCompute;
typedef PFNGLDISPATCHCOMPUTEINDIRECTPROC PFN_glDispatchComputeIndirect;
typedef PFNGLDRAWARRAYSINDIRECTPROC PFN_glDrawArraysIndirect;
typedef PFNGLDRAWELEMENTSINDIRECTPROC PFN_glDrawElementsIndirect;
typedef PFNGLFRAMEBUFFERPARAMETERIPROC PFN_glFramebufferParameteri;
typedef PFNGLGETFRAMEBUFFERPARAMETERIVPROC PFN_glGetFramebufferParameteriv;
typedef PFNGLGETPROGRAMINTERFACEIVPROC PFN_glGetProgramInterfaceiv;
typedef PFNGLGETPROGRAMRESOURCEINDEXPROC PFN_glGetProgramResourceIndex;
typedef PFNGLGETPROGRAMRESOURCENAMEPROC PFN_glGetProgramResourceName;
typedef PFNGLGETPROGRAMRESOURCEIVPROC PFN_glGetProgramResourceiv;
typedef PFNGLGETPROGRAMRESOURCELOCATIONPROC PFN_glGetProgramResourceLocation;
typedef PFNGLUSEPROGRAMSTAGESPROC PFN_glUseProgramStages;
typedef PFNGLACTIVESHADERPROGRAMPROC PFN_glActiveShaderProgram;
typedef PFNGLCREATESHADERPROGRAMVPROC PFN_glCreateShaderProgramv;
typedef PFNGLBINDPROGRAMPIPELINEPROC PFN_glBindProgramPipeline;
typedef PFNGLDELETEPROGRAMPIPELINESPROC PFN_glDeleteProgramPipelines;
typedef PFNGLGENPROGRAMPIPELINESPROC PFN_glGenProgramPipelines;
typedef PFNGLISPROGRAMPIPELINEPROC PFN_glIsProgramPipeline;
typedef PFNGLGETPROGRAMPIPELINEIVPROC PFN_glGetProgramPipelineiv;
typedef PFNGLPROGRAMUNIFORM1IPROC PFN_glProgramUniform1i;
typedef PFNGLPROGRAMUNIFORM2IPROC PFN_glProgramUniform2i;
typedef PFNGLPROGRAMUNIFORM3IPROC PFN_glProgramUniform3i;
typedef PFNGLPROGRAMUNIFORM4IPROC PFN_glProgramUniform4i;
typedef PFNGLPROGRAMUNIFORM1UIPROC PFN_glProgramUniform1ui;
typedef PFNGLPROGRAMUNIFORM2UIPROC PFN_glProgramUniform2ui;
typedef PFNGLPROGRAMUNIFORM3UIPROC PFN_glProgramUniform3ui;
typedef PFNGLPROGRAMUNIFORM4UIPROC PFN_glProgramUniform4ui;
typedef PFNGLPROGRAMUNIFORM1FPROC PFN_glProgramUniform1f;
typedef PFNGLPROGRAMUNIFORM2FPROC PFN_glProgramUniform2f;
typedef PFNGLPROGRAMUNIFORM3FPROC PFN_glProgramUniform3f;
typedef PFNGLPROGRAMUNIFORM4FPROC PFN_glProgramUniform4f;
typedef PFNGLPROGRAMUNIFORM1IVPROC PFN_glProgramUniform1iv;
typedef PFNGLPROGRAMUNIFORM2IVPROC PFN_glProgramUniform2iv;
typedef PFNGLPROGRAMUNIFORM3IVPROC PFN_glProgramUniform3iv;
typedef PFNGLPROGRAMUNIFORM4IVPROC PFN_glProgramUniform4iv;
typedef PFNGLPROGRAMUNIFORM1UIVPROC PFN_glProgramUniform1uiv;
typedef PFNGLPROGRAMUNIFORM2UIVPROC PFN_glProgramUniform2uiv;
typedef PFNGLPROGRAMUNIFORM3UIVPROC PFN_glProgramUniform3uiv;
typedef PFNGLPROGRAMUNIFORM4UIVPROC PFN_glProgramUniform4uiv;
typedef PFNGLPROGRAMUNIFORM1FVPROC PFN_glProgramUniform1fv;
typedef PFNGLPROGRAMUNIFORM2FVPROC PFN_glProgramUniform2fv;
typedef PFNGLPROGRAMUNIFORM3FVPROC PFN_glProgramUniform3fv;
typedef PFNGLPROGRAMUNIFORM4FVPROC PFN_glProgramUniform4fv;
typedef PFNGLPROGRAMUNIFORMMATRIX2FVPROC PFN_glProgramUniformMatrix2fv;
typedef PFNGLPROGRAMUNIFORMMATRIX3FVPROC PFN_glProgramUniformMatrix3fv;
typedef PFNGLPROGRAMUNIFORMMATRIX4FVPROC PFN_glProgramUniformMatrix4fv;
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC PFN_glProgramUniformMatrix2x3fv;
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC PFN_glProgramUniformMatrix3x2fv;
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC PFN_glProgramUniformMatrix2x4fv;
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC PFN_glProgramUniformMatrix4x2fv;
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC PFN_glProgramUniformMatrix3x4fv;
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC PFN_glProgramUniformMatrix4x3fv;
typedef PFNGLVALIDATEPROGRAMPIPELINEPROC PFN_glValidateProgramPipeline;
typedef PFNGLGETPROGRAMPIPELINEINFOLOGPROC PFN_glGetProgramPipelineInfoLog;
typedef PFNGLBINDIMAGETEXTUREPROC PFN_glBindImageTexture;
typedef PFNGLGETBOOLEANI_VPROC PFN_glGetBooleani_v;
typedef PFNGLMEMORYBARRIERPROC PFN_glMemoryBarrier;
typedef PFNGLMEMORYBARRIERBYREGIONPROC PFN_glMemoryBarrierByRegion;
typedef PFNGLTEXSTORAGE2DMULTISAMPLEPROC PFN_glTexStorage2DMultisample;
typedef PFNGLGETMULTISAMPLEFVPROC PFN_glGetMultisamplefv;
typedef PFNGLSAMPLEMASKIPROC PFN_glSampleMaski;
typedef PFNGLGETTEXLEVELPARAMETERIVPROC PFN_glGetTexLevelParameteriv;
typedef PFNGLGETTEXLEVELPARAMETERFVPROC PFN_glGetTexLevelParameterfv;
typedef PFNGLBINDVERTEXBUFFERPROC PFN_glBindVertexBuffer;
typedef PFNGLVERTEXATTRIBFORMATPROC PFN_glVertexAttribFormat;
typedef PFNGLVERTEXATTRIBIFORMATPROC PFN_glVertexAttribIFormat;
typedef PFNGLVERTEXATTRIBBINDINGPROC PFN_glVertexAttribBinding;
typedef PFNGLVERTEXBINDINGDIVISORPROC PFN_glVertexBindingDivisor;
typedef PFNGLBLENDBARRIERPROC PFN_glBlendBarrier;
typedef PFNGLCOPYIMAGESUBDATAPROC PFN_glCopyImageSubData;
typedef PFNGLDEBUGMESSAGECONTROLPROC PFN_glDebugMessageControl;
typedef PFNGLDEBUGMESSAGEINSERTPROC PFN_glDebugMessageInsert;
typedef PFNGLDEBUGMESSAGECALLBACKPROC PFN_glDebugMessageCallback;
typedef PFNGLGETDEBUGMESSAGELOGPROC PFN_glGetDebugMessageLog;
typedef PFNGLPUSHDEBUGGROUPPROC PFN_glPushDebugGroup;
typedef PFNGLPOPDEBUGGROUPPROC PFN_glPopDebugGroup;
typedef PFNGLOBJECTLABELPROC PFN_glObjectLabel;
typedef PFNGLGETOBJECTLABELPROC PFN_glGetObjectLabel;
typedef PFNGLOBJECTPTRLABELPROC PFN_glObjectPtrLabel;
typedef PFNGLGETOBJECTPTRLABELPROC PFN_glGetObjectPtrLabel;
typedef PFNGLGETPOINTERVPROC PFN_glGetPointerv;
typedef PFNGLENABLEIPROC PFN_glEnablei;
typedef PFNGLDISABLEIPROC PFN_glDisablei;
typedef PFNGLBLENDEQUATIONIPROC PFN_glBlendEquationi;
typedef PFNGLBLENDEQUATIONSEPARATEIPROC PFN_glBlendEquationSeparatei;
typedef PFNGLBLENDFUNCIPROC PFN_glBlendFunci;
typedef PFNGLBLENDFUNCSEPARATEIPROC PFN_glBlendFuncSeparatei;
typedef PFNGLCOLORMASKIPROC PFN_glColorMaski;
typedef PFNGLISENABLEDIPROC PFN_glIsEnabledi;
typedef PFNGLDRAWELEMENTSBASEVERTEXPROC PFN_glDrawElementsBaseVertex;
typedef PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC PFN_glDrawRangeElementsBaseVertex;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
    PFN_glDrawElementsInstancedBaseVertex;
typedef PFNGLFRAMEBUFFERTEXTUREPROC PFN_glFramebufferTexture;
typedef PFNGLPRIMITIVEBOUNDINGBOXPROC PFN_glPrimitiveBoundingBox;
typedef PFNGLGETGRAPHICSRESETSTATUSPROC PFN_glGetGraphicsResetStatus;
typedef PFNGLREADNPIXELSPROC PFN_glReadnPixels;
typedef PFNGLGETNUNIFORMFVPROC PFN_glGetnUniformfv;
typedef PFNGLGETNUNIFORMIVPROC PFN_glGetnUniformiv;
typedef PFNGLGETNUNIFORMUIVPROC PFN_glGetnUniformuiv;
typedef PFNGLMINSAMPLESHADINGPROC PFN_glMinSampleShading;
typedef PFNGLPATCHPARAMETERIPROC PFN_glPatchParameteri;
typedef PFNGLTEXPARAMETERIIVPROC PFN_glTexParameterIiv;
typedef PFNGLTEXPARAMETERIUIVPROC PFN_glTexParameterIuiv;
typedef PFNGLGETTEXPARAMETERIIVPROC PFN_glGetTexParameterIiv;
typedef PFNGLGETTEXPARAMETERIUIVPROC PFN_glGetTexParameterIuiv;
typedef PFNGLSAMPLERPARAMETERIIVPROC PFN_glSamplerParameterIiv;
typedef PFNGLSAMPLERPARAMETERIUIVPROC PFN_glSamplerParameterIuiv;
typedef PFNGLGETSAMPLERPARAMETERIIVPROC PFN_glGetSamplerParameterIiv;
typedef PFNGLGETSAMPLERPARAMETERIUIVPROC PFN_glGetSamplerParameterIuiv;
typedef PFNGLTEXBUFFERPROC PFN_glTexBuffer;
typedef PFNGLTEXBUFFERRANGEPROC PFN_glTexBufferRange;
typedef PFNGLTEXSTORAGE3DMULTISAMPLEPROC PFN_glTexStorage3DMultisample;
typedef PFNGLBLENDBARRIERKHRPROC PFN_glBlendBarrierKHR;
typedef PFNGLDEBUGMESSAGECONTROLKHRPROC PFN_glDebugMessageControlKHR;
typedef PFNGLDEBUGMESSAGEINSERTKHRPROC PFN_glDebugMessageInsertKHR;
typedef PFNGLDEBUGMESSAGECALLBACKKHRPROC PFN_glDebugMessageCallbackKHR;
typedef PFNGLGETDEBUGMESSAGELOGKHRPROC PFN_glGetDebugMessageLogKHR;
typedef PFNGLPUSHDEBUGGROUPKHRPROC PFN_glPushDebugGroupKHR;
typedef PFNGLPOPDEBUGGROUPKHRPROC PFN_glPopDebugGroupKHR;
typedef PFNGLOBJECTLABELKHRPROC PFN_glObjectLabelKHR;
typedef PFNGLGETOBJECTLABELKHRPROC PFN_glGetObjectLabelKHR;
typedef PFNGLOBJECTPTRLABELKHRPROC PFN_glObjectPtrLabelKHR;
typedef PFNGLGETOBJECTPTRLABELKHRPROC PFN_glGetObjectPtrLabelKHR;
typedef PFNGLGETPOINTERVKHRPROC PFN_glGetPointervKHR;
typedef PFNGLMAXSHADERCOMPILERTHREADSKHRPROC PFN_glMaxShaderCompilerThreadsKHR;
typedef PFNGLGETGRAPHICSRESETSTATUSKHRPROC PFN_glGetGraphicsResetStatusKHR;
typedef PFNGLREADNPIXELSKHRPROC PFN_glReadnPixelsKHR;
typedef PFNGLGETNUNIFORMFVKHRPROC PFN_glGetnUniformfvKHR;
typedef PFNGLGETNUNIFORMIVKHRPROC PFN_glGetnUniformivKHR;
typedef PFNGLGETNUNIFORMUIVKHRPROC PFN_glGetnUniformuivKHR;
typedef PFNGLEGLIMAGETARGETTEXTURE2DOESPROC PFN_glEGLImageTargetTexture2DOES;
typedef PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
    PFN_glEGLImageTargetRenderbufferStorageOES;
typedef PFNGLCOPYIMAGESUBDATAOESPROC PFN_glCopyImageSubDataOES;
typedef PFNGLENABLEIOESPROC PFN_glEnableiOES;
typedef PFNGLDISABLEIOESPROC PFN_glDisableiOES;
typedef PFNGLBLENDEQUATIONIOESPROC PFN_glBlendEquationiOES;
typedef PFNGLBLENDEQUATIONSEPARATEIOESPROC PFN_glBlendEquationSeparateiOES;
typedef PFNGLBLENDFUNCIOESPROC PFN_glBlendFunciOES;
typedef PFNGLBLENDFUNCSEPARATEIOESPROC PFN_glBlendFuncSeparateiOES;
typedef PFNGLCOLORMASKIOESPROC PFN_glColorMaskiOES;
typedef PFNGLISENABLEDIOESPROC PFN_glIsEnablediOES;
typedef PFNGLDRAWELEMENTSBASEVERTEXOESPROC PFN_glDrawElementsBaseVertexOES;
typedef PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC
    PFN_glDrawRangeElementsBaseVertexOES;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC
    PFN_glDrawElementsInstancedBaseVertexOES;
typedef PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC
    PFN_glMultiDrawElementsBaseVertexEXT;
typedef PFNGLFRAMEBUFFERTEXTUREOESPROC PFN_glFramebufferTextureOES;
typedef PFNGLGETPROGRAMBINARYOESPROC PFN_glGetProgramBinaryOES;
typedef PFNGLPROGRAMBINARYOESPROC PFN_glProgramBinaryOES;
typedef PFNGLMAPBUFFEROESPROC PFN_glMapBufferOES;
typedef PFNGLUNMAPBUFFEROESPROC PFN_glUnmapBufferOES;
typedef PFNGLGETBUFFERPOINTERVOESPROC PFN_glGetBufferPointervOES;
typedef PFNGLPRIMITIVEBOUNDINGBOXOESPROC PFN_glPrimitiveBoundingBoxOES;
typedef PFNGLMINSAMPLESHADINGOESPROC PFN_glMinSampleShadingOES;
typedef PFNGLPATCHPARAMETERIOESPROC PFN_glPatchParameteriOES;
typedef PFNGLTEXIMAGE3DOESPROC PFN_glTexImage3DOES;
typedef PFNGLTEXSUBIMAGE3DOESPROC PFN_glTexSubImage3DOES;
typedef PFNGLCOPYTEXSUBIMAGE3DOESPROC PFN_glCopyTexSubImage3DOES;
typedef PFNGLCOMPRESSEDTEXIMAGE3DOESPROC PFN_glCompressedTexImage3DOES;
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC PFN_glCompressedTexSubImage3DOES;
typedef PFNGLFRAMEBUFFERTEXTURE3DOESPROC PFN_glFramebufferTexture3DOES;
typedef PFNGLTEXPARAMETERIIVOESPROC PFN_glTexParameterIivOES;
typedef PFNGLTEXPARAMETERIUIVOESPROC PFN_glTexParameterIuivOES;
typedef PFNGLGETTEXPARAMETERIIVOESPROC PFN_glGetTexParameterIivOES;
typedef PFNGLGETTEXPARAMETERIUIVOESPROC PFN_glGetTexParameterIuivOES;
typedef PFNGLSAMPLERPARAMETERIIVOESPROC PFN_glSamplerParameterIivOES;
typedef PFNGLSAMPLERPARAMETERIUIVOESPROC PFN_glSamplerParameterIuivOES;
typedef PFNGLGETSAMPLERPARAMETERIIVOESPROC PFN_glGetSamplerParameterIivOES;
typedef PFNGLGETSAMPLERPARAMETERIUIVOESPROC PFN_glGetSamplerParameterIuivOES;
typedef PFNGLTEXBUFFEROESPROC PFN_glTexBufferOES;
typedef PFNGLTEXBUFFERRANGEOESPROC PFN_glTexBufferRangeOES;
typedef PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC PFN_glTexStorage3DMultisampleOES;
typedef PFNGLTEXTUREVIEWOESPROC PFN_glTextureViewOES;
typedef PFNGLBINDVERTEXARRAYOESPROC PFN_glBindVertexArrayOES;
typedef PFNGLDELETEVERTEXARRAYSOESPROC PFN_glDeleteVertexArraysOES;
typedef PFNGLGENVERTEXARRAYSOESPROC PFN_glGenVertexArraysOES;
typedef PFNGLISVERTEXARRAYOESPROC PFN_glIsVertexArrayOES;
typedef PFNGLVIEWPORTARRAYVOESPROC PFN_glViewportArrayvOES;
typedef PFNGLVIEWPORTINDEXEDFOESPROC PFN_glViewportIndexedfOES;
typedef PFNGLVIEWPORTINDEXEDFVOESPROC PFN_glViewportIndexedfvOES;
typedef PFNGLSCISSORARRAYVOESPROC PFN_glScissorArrayvOES;
typedef PFNGLSCISSORINDEXEDOESPROC PFN_glScissorIndexedOES;
typedef PFNGLSCISSORINDEXEDVOESPROC PFN_glScissorIndexedvOES;
typedef PFNGLDEPTHRANGEARRAYFVOESPROC PFN_glDepthRangeArrayfvOES;
typedef PFNGLDEPTHRANGEINDEXEDFOESPROC PFN_glDepthRangeIndexedfOES;
typedef PFNGLGETFLOATI_VOESPROC PFN_glGetFloati_vOES;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC
    PFN_glRenderbufferStorageMultisampleAdvancedAMD;
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC
    PFN_glNamedRenderbufferStorageMultisampleAdvancedAMD;
typedef PFNGLGETPERFMONITORGROUPSAMDPROC PFN_glGetPerfMonitorGroupsAMD;
typedef PFNGLGETPERFMONITORCOUNTERSAMDPROC PFN_glGetPerfMonitorCountersAMD;
typedef PFNGLGETPERFMONITORGROUPSTRINGAMDPROC
    PFN_glGetPerfMonitorGroupStringAMD;
typedef PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
    PFN_glGetPerfMonitorCounterStringAMD;
typedef PFNGLGETPERFMONITORCOUNTERINFOAMDPROC
    PFN_glGetPerfMonitorCounterInfoAMD;
typedef PFNGLGENPERFMONITORSAMDPROC PFN_glGenPerfMonitorsAMD;
typedef PFNGLDELETEPERFMONITORSAMDPROC PFN_glDeletePerfMonitorsAMD;
typedef PFNGLSELECTPERFMONITORCOUNTERSAMDPROC
    PFN_glSelectPerfMonitorCountersAMD;
typedef PFNGLBEGINPERFMONITORAMDPROC PFN_glBeginPerfMonitorAMD;
typedef PFNGLENDPERFMONITORAMDPROC PFN_glEndPerfMonitorAMD;
typedef PFNGLGETPERFMONITORCOUNTERDATAAMDPROC
    PFN_glGetPerfMonitorCounterDataAMD;
typedef PFNGLBLITFRAMEBUFFERANGLEPROC PFN_glBlitFramebufferANGLE;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC
    PFN_glRenderbufferStorageMultisampleANGLE;
typedef PFNGLDRAWARRAYSINSTANCEDANGLEPROC PFN_glDrawArraysInstancedANGLE;
typedef PFNGLDRAWELEMENTSINSTANCEDANGLEPROC PFN_glDrawElementsInstancedANGLE;
typedef PFNGLVERTEXATTRIBDIVISORANGLEPROC PFN_glVertexAttribDivisorANGLE;
typedef PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC
    PFN_glGetTranslatedShaderSourceANGLE;
typedef PFNGLCOPYTEXTURELEVELSAPPLEPROC PFN_glCopyTextureLevelsAPPLE;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC
    PFN_glRenderbufferStorageMultisampleAPPLE;
typedef PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC
    PFN_glResolveMultisampleFramebufferAPPLE;
typedef PFNGLFENCESYNCAPPLEPROC PFN_glFenceSyncAPPLE;
typedef PFNGLISSYNCAPPLEPROC PFN_glIsSyncAPPLE;
typedef PFNGLDELETESYNCAPPLEPROC PFN_glDeleteSyncAPPLE;
typedef PFNGLCLIENTWAITSYNCAPPLEPROC PFN_glClientWaitSyncAPPLE;
typedef PFNGLWAITSYNCAPPLEPROC PFN_glWaitSyncAPPLE;
typedef PFNGLGETINTEGER64VAPPLEPROC PFN_glGetInteger64vAPPLE;
typedef PFNGLGETSYNCIVAPPLEPROC PFN_glGetSyncivAPPLE;
typedef PFNGLMAXACTIVESHADERCORESARMPROC PFN_glMaxActiveShaderCoresARM;
typedef PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC PFN_glEGLImageTargetTexStorageEXT;
typedef PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC
    PFN_glEGLImageTargetTextureStorageEXT;
typedef PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC
    PFN_glDrawArraysInstancedBaseInstanceEXT;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC
    PFN_glDrawElementsInstancedBaseInstanceEXT;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC
    PFN_glDrawElementsInstancedBaseVertexBaseInstanceEXT;
typedef PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC
    PFN_glBindFragDataLocationIndexedEXT;
typedef PFNGLBINDFRAGDATALOCATIONEXTPROC PFN_glBindFragDataLocationEXT;
typedef PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC
    PFN_glGetProgramResourceLocationIndexEXT;
typedef PFNGLGETFRAGDATAINDEXEXTPROC PFN_glGetFragDataIndexEXT;
typedef PFNGLBUFFERSTORAGEEXTPROC PFN_glBufferStorageEXT;
typedef PFNGLCLEARTEXIMAGEEXTPROC PFN_glClearTexImageEXT;
typedef PFNGLCLEARTEXSUBIMAGEEXTPROC PFN_glClearTexSubImageEXT;
typedef PFNGLCLIPCONTROLEXTPROC PFN_glClipControlEXT;
typedef PFNGLCOPYIMAGESUBDATAEXTPROC PFN_glCopyImageSubDataEXT;
typedef PFNGLLABELOBJECTEXTPROC PFN_glLabelObjectEXT;
typedef PFNGLGETOBJECTLABELEXTPROC PFN_glGetObjectLabelEXT;
typedef PFNGLINSERTEVENTMARKEREXTPROC PFN_glInsertEventMarkerEXT;
typedef PFNGLPUSHGROUPMARKEREXTPROC PFN_glPushGroupMarkerEXT;
typedef PFNGLPOPGROUPMARKEREXTPROC PFN_glPopGroupMarkerEXT;
typedef PFNGLDISCARDFRAMEBUFFEREXTPROC PFN_glDiscardFramebufferEXT;
typedef PFNGLGENQUERIESEXTPROC PFN_glGenQueriesEXT;
typedef PFNGLDELETEQUERIESEXTPROC PFN_glDeleteQueriesEXT;
typedef PFNGLISQUERYEXTPROC PFN_glIsQueryEXT;
typedef PFNGLBEGINQUERYEXTPROC PFN_glBeginQueryEXT;
typedef PFNGLENDQUERYEXTPROC PFN_glEndQueryEXT;
typedef PFNGLQUERYCOUNTEREXTPROC PFN_glQueryCounterEXT;
typedef PFNGLGETQUERYIVEXTPROC PFN_glGetQueryivEXT;
typedef PFNGLGETQUERYOBJECTIVEXTPROC PFN_glGetQueryObjectivEXT;
typedef PFNGLGETQUERYOBJECTUIVEXTPROC PFN_glGetQueryObjectuivEXT;
typedef PFNGLGETQUERYOBJECTI64VEXTPROC PFN_glGetQueryObjecti64vEXT;
typedef PFNGLGETQUERYOBJECTUI64VEXTPROC PFN_glGetQueryObjectui64vEXT;
typedef PFNGLGETINTEGER64VEXTPROC PFN_glGetInteger64vEXT;
typedef PFNGLDRAWBUFFERSEXTPROC PFN_glDrawBuffersEXT;
typedef PFNGLENABLEIEXTPROC PFN_glEnableiEXT;
typedef PFNGLDISABLEIEXTPROC PFN_glDisableiEXT;
typedef PFNGLBLENDEQUATIONIEXTPROC PFN_glBlendEquationiEXT;
typedef PFNGLBLENDEQUATIONSEPARATEIEXTPROC PFN_glBlendEquationSeparateiEXT;
typedef PFNGLBLENDFUNCIEXTPROC PFN_glBlendFunciEXT;
typedef PFNGLBLENDFUNCSEPARATEIEXTPROC PFN_glBlendFuncSeparateiEXT;
typedef PFNGLCOLORMASKIEXTPROC PFN_glColorMaskiEXT;
typedef PFNGLISENABLEDIEXTPROC PFN_glIsEnablediEXT;
typedef PFNGLDRAWELEMENTSBASEVERTEXEXTPROC PFN_glDrawElementsBaseVertexEXT;
typedef PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC
    PFN_glDrawRangeElementsBaseVertexEXT;
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC
    PFN_glDrawElementsInstancedBaseVertexEXT;
typedef PFNGLDRAWARRAYSINSTANCEDEXTPROC PFN_glDrawArraysInstancedEXT;
typedef PFNGLDRAWELEMENTSINSTANCEDEXTPROC PFN_glDrawElementsInstancedEXT;
typedef PFNGLDRAWTRANSFORMFEEDBACKEXTPROC PFN_glDrawTransformFeedbackEXT;
typedef PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC
    PFN_glDrawTransformFeedbackInstancedEXT;
typedef PFNGLBUFFERSTORAGEEXTERNALEXTPROC PFN_glBufferStorageExternalEXT;
typedef PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC
    PFN_glNamedBufferStorageExternalEXT;
typedef PFNGLGETFRAGMENTSHADINGRATESEXTPROC PFN_glGetFragmentShadingRatesEXT;
typedef PFNGLSHADINGRATEEXTPROC PFN_glShadingRateEXT;
typedef PFNGLSHADINGRATECOMBINEROPSEXTPROC PFN_glShadingRateCombinerOpsEXT;
typedef PFNGLFRAMEBUFFERSHADINGRATEEXTPROC PFN_glFramebufferShadingRateEXT;
typedef PFNGLBLITFRAMEBUFFERLAYERSEXTPROC PFN_glBlitFramebufferLayersEXT;
typedef PFNGLBLITFRAMEBUFFERLAYEREXTPROC PFN_glBlitFramebufferLayerEXT;
typedef PFNGLFRAMEBUFFERTEXTUREEXTPROC PFN_glFramebufferTextureEXT;
typedef PFNGLVERTEXATTRIBDIVISOREXTPROC PFN_glVertexAttribDivisorEXT;
typedef PFNGLMAPBUFFERRANGEEXTPROC PFN_glMapBufferRangeEXT;
typedef PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC PFN_glFlushMappedBufferRangeEXT;
typedef PFNGLGETUNSIGNEDBYTEVEXTPROC PFN_glGetUnsignedBytevEXT;
typedef PFNGLGETUNSIGNEDBYTEI_VEXTPROC PFN_glGetUnsignedBytei_vEXT;
typedef PFNGLDELETEMEMORYOBJECTSEXTPROC PFN_glDeleteMemoryObjectsEXT;
typedef PFNGLISMEMORYOBJECTEXTPROC PFN_glIsMemoryObjectEXT;
typedef PFNGLCREATEMEMORYOBJECTSEXTPROC PFN_glCreateMemoryObjectsEXT;
typedef PFNGLMEMORYOBJECTPARAMETERIVEXTPROC PFN_glMemoryObjectParameterivEXT;
typedef PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC
    PFN_glGetMemoryObjectParameterivEXT;
typedef PFNGLTEXSTORAGEMEM2DEXTPROC PFN_glTexStorageMem2DEXT;
typedef PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC
    PFN_glTexStorageMem2DMultisampleEXT;
typedef PFNGLTEXSTORAGEMEM3DEXTPROC PFN_glTexStorageMem3DEXT;
typedef PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC
    PFN_glTexStorageMem3DMultisampleEXT;
typedef PFNGLBUFFERSTORAGEMEMEXTPROC PFN_glBufferStorageMemEXT;
typedef PFNGLTEXTURESTORAGEMEM2DEXTPROC PFN_glTextureStorageMem2DEXT;
typedef PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC
    PFN_glTextureStorageMem2DMultisampleEXT;
typedef PFNGLTEXTURESTORAGEMEM3DEXTPROC PFN_glTextureStorageMem3DEXT;
typedef PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC
    PFN_glTextureStorageMem3DMultisampleEXT;
typedef PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC PFN_glNamedBufferStorageMemEXT;
typedef PFNGLIMPORTMEMORYFDEXTPROC PFN_glImportMemoryFdEXT;
typedef PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC PFN_glImportMemoryWin32HandleEXT;
typedef PFNGLIMPORTMEMORYWIN32NAMEEXTPROC PFN_glImportMemoryWin32NameEXT;
typedef PFNGLMULTIDRAWARRAYSEXTPROC PFN_glMultiDrawArraysEXT;
typedef PFNGLMULTIDRAWELEMENTSEXTPROC PFN_glMultiDrawElementsEXT;
typedef PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC PFN_glMultiDrawArraysIndirectEXT;
typedef PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC
    PFN_glMultiDrawElementsIndirectEXT;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
    PFN_glRenderbufferStorageMultisampleEXT;
typedef PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC
    PFN_glFramebufferTexture2DMultisampleEXT;
typedef PFNGLREADBUFFERINDEXEDEXTPROC PFN_glReadBufferIndexedEXT;
typedef PFNGLDRAWBUFFERSINDEXEDEXTPROC PFN_glDrawBuffersIndexedEXT;
typedef PFNGLGETINTEGERI_VEXTPROC PFN_glGetIntegeri_vEXT;
typedef PFNGLPOLYGONOFFSETCLAMPEXTPROC PFN_glPolygonOffsetClampEXT;
typedef PFNGLPRIMITIVEBOUNDINGBOXEXTPROC PFN_glPrimitiveBoundingBoxEXT;
typedef PFNGLRASTERSAMPLESEXTPROC PFN_glRasterSamplesEXT;
typedef PFNGLGETGRAPHICSRESETSTATUSEXTPROC PFN_glGetGraphicsResetStatusEXT;
typedef PFNGLREADNPIXELSEXTPROC PFN_glReadnPixelsEXT;
typedef PFNGLGETNUNIFORMFVEXTPROC PFN_glGetnUniformfvEXT;
typedef PFNGLGETNUNIFORMIVEXTPROC PFN_glGetnUniformivEXT;
typedef PFNGLGENSEMAPHORESEXTPROC PFN_glGenSemaphoresEXT;
typedef PFNGLDELETESEMAPHORESEXTPROC PFN_glDeleteSemaphoresEXT;
typedef PFNGLISSEMAPHOREEXTPROC PFN_glIsSemaphoreEXT;
typedef PFNGLSEMAPHOREPARAMETERUI64VEXTPROC PFN_glSemaphoreParameterui64vEXT;
typedef PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC
    PFN_glGetSemaphoreParameterui64vEXT;
typedef PFNGLWAITSEMAPHOREEXTPROC PFN_glWaitSemaphoreEXT;
typedef PFNGLSIGNALSEMAPHOREEXTPROC PFN_glSignalSemaphoreEXT;
typedef PFNGLIMPORTSEMAPHOREFDEXTPROC PFN_glImportSemaphoreFdEXT;
typedef PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC
    PFN_glImportSemaphoreWin32HandleEXT;
typedef PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC PFN_glImportSemaphoreWin32NameEXT;
typedef PFNGLACTIVESHADERPROGRAMEXTPROC PFN_glActiveShaderProgramEXT;
typedef PFNGLBINDPROGRAMPIPELINEEXTPROC PFN_glBindProgramPipelineEXT;
typedef PFNGLCREATESHADERPROGRAMVEXTPROC PFN_glCreateShaderProgramvEXT;
typedef PFNGLDELETEPROGRAMPIPELINESEXTPROC PFN_glDeleteProgramPipelinesEXT;
typedef PFNGLGENPROGRAMPIPELINESEXTPROC PFN_glGenProgramPipelinesEXT;
typedef PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC
    PFN_glGetProgramPipelineInfoLogEXT;
typedef PFNGLGETPROGRAMPIPELINEIVEXTPROC PFN_glGetProgramPipelineivEXT;
typedef PFNGLISPROGRAMPIPELINEEXTPROC PFN_glIsProgramPipelineEXT;
typedef PFNGLPROGRAMPARAMETERIEXTPROC PFN_glProgramParameteriEXT;
typedef PFNGLPROGRAMUNIFORM1FEXTPROC PFN_glProgramUniform1fEXT;
typedef PFNGLPROGRAMUNIFORM1FVEXTPROC PFN_glProgramUniform1fvEXT;
typedef PFNGLPROGRAMUNIFORM1IEXTPROC PFN_glProgramUniform1iEXT;
typedef PFNGLPROGRAMUNIFORM1IVEXTPROC PFN_glProgramUniform1ivEXT;
typedef PFNGLPROGRAMUNIFORM2FEXTPROC PFN_glProgramUniform2fEXT;
typedef PFNGLPROGRAMUNIFORM2FVEXTPROC PFN_glProgramUniform2fvEXT;
typedef PFNGLPROGRAMUNIFORM2IEXTPROC PFN_glProgramUniform2iEXT;
typedef PFNGLPROGRAMUNIFORM2IVEXTPROC PFN_glProgramUniform2ivEXT;
typedef PFNGLPROGRAMUNIFORM3FEXTPROC PFN_glProgramUniform3fEXT;
typedef PFNGLPROGRAMUNIFORM3FVEXTPROC PFN_glProgramUniform3fvEXT;
typedef PFNGLPROGRAMUNIFORM3IEXTPROC PFN_glProgramUniform3iEXT;
typedef PFNGLPROGRAMUNIFORM3IVEXTPROC PFN_glProgramUniform3ivEXT;
typedef PFNGLPROGRAMUNIFORM4FEXTPROC PFN_glProgramUniform4fEXT;
typedef PFNGLPROGRAMUNIFORM4FVEXTPROC PFN_glProgramUniform4fvEXT;
typedef PFNGLPROGRAMUNIFORM4IEXTPROC PFN_glProgramUniform4iEXT;
typedef PFNGLPROGRAMUNIFORM4IVEXTPROC PFN_glProgramUniform4ivEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC PFN_glProgramUniformMatrix2fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC PFN_glProgramUniformMatrix3fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC PFN_glProgramUniformMatrix4fvEXT;
typedef PFNGLUSEPROGRAMSTAGESEXTPROC PFN_glUseProgramStagesEXT;
typedef PFNGLVALIDATEPROGRAMPIPELINEEXTPROC PFN_glValidateProgramPipelineEXT;
typedef PFNGLPROGRAMUNIFORM1UIEXTPROC PFN_glProgramUniform1uiEXT;
typedef PFNGLPROGRAMUNIFORM2UIEXTPROC PFN_glProgramUniform2uiEXT;
typedef PFNGLPROGRAMUNIFORM3UIEXTPROC PFN_glProgramUniform3uiEXT;
typedef PFNGLPROGRAMUNIFORM4UIEXTPROC PFN_glProgramUniform4uiEXT;
typedef PFNGLPROGRAMUNIFORM1UIVEXTPROC PFN_glProgramUniform1uivEXT;
typedef PFNGLPROGRAMUNIFORM2UIVEXTPROC PFN_glProgramUniform2uivEXT;
typedef PFNGLPROGRAMUNIFORM3UIVEXTPROC PFN_glProgramUniform3uivEXT;
typedef PFNGLPROGRAMUNIFORM4UIVEXTPROC PFN_glProgramUniform4uivEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
    PFN_glProgramUniformMatrix2x3fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
    PFN_glProgramUniformMatrix3x2fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
    PFN_glProgramUniformMatrix2x4fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
    PFN_glProgramUniformMatrix4x2fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
    PFN_glProgramUniformMatrix3x4fvEXT;
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
    PFN_glProgramUniformMatrix4x3fvEXT;
typedef PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC PFN_glFramebufferFetchBarrierEXT;
typedef PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC
    PFN_glFramebufferPixelLocalStorageSizeEXT;
typedef PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC
    PFN_glGetFramebufferPixelLocalStorageSizeEXT;
typedef PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC PFN_glClearPixelLocalStorageuiEXT;
typedef PFNGLTEXPAGECOMMITMENTEXTPROC PFN_glTexPageCommitmentEXT;
typedef PFNGLPATCHPARAMETERIEXTPROC PFN_glPatchParameteriEXT;
typedef PFNGLTEXPARAMETERIIVEXTPROC PFN_glTexParameterIivEXT;
typedef PFNGLTEXPARAMETERIUIVEXTPROC PFN_glTexParameterIuivEXT;
typedef PFNGLGETTEXPARAMETERIIVEXTPROC PFN_glGetTexParameterIivEXT;
typedef PFNGLGETTEXPARAMETERIUIVEXTPROC PFN_glGetTexParameterIuivEXT;
typedef PFNGLSAMPLERPARAMETERIIVEXTPROC PFN_glSamplerParameterIivEXT;
typedef PFNGLSAMPLERPARAMETERIUIVEXTPROC PFN_glSamplerParameterIuivEXT;
typedef PFNGLGETSAMPLERPARAMETERIIVEXTPROC PFN_glGetSamplerParameterIivEXT;
typedef PFNGLGETSAMPLERPARAMETERIUIVEXTPROC PFN_glGetSamplerParameterIuivEXT;
typedef PFNGLTEXBUFFEREXTPROC PFN_glTexBufferEXT;
typedef PFNGLTEXBUFFERRANGEEXTPROC PFN_glTexBufferRangeEXT;
typedef PFNGLTEXSTORAGE1DEXTPROC PFN_glTexStorage1DEXT;
typedef PFNGLTEXSTORAGE2DEXTPROC PFN_glTexStorage2DEXT;
typedef PFNGLTEXSTORAGE3DEXTPROC PFN_glTexStorage3DEXT;
typedef PFNGLTEXTURESTORAGE1DEXTPROC PFN_glTextureStorage1DEXT;
typedef PFNGLTEXTURESTORAGE2DEXTPROC PFN_glTextureStorage2DEXT;
typedef PFNGLTEXTURESTORAGE3DEXTPROC PFN_glTextureStorage3DEXT;
typedef PFNGLTEXSTORAGEATTRIBS2DEXTPROC PFN_glTexStorageAttribs2DEXT;
typedef PFNGLTEXSTORAGEATTRIBS3DEXTPROC PFN_glTexStorageAttribs3DEXT;
typedef PFNGLTEXTUREVIEWEXTPROC PFN_glTextureViewEXT;
typedef PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC PFN_glAcquireKeyedMutexWin32EXT;
typedef PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC PFN_glReleaseKeyedMutexWin32EXT;
typedef PFNGLWINDOWRECTANGLESEXTPROC PFN_glWindowRectanglesEXT;
typedef PFNGLGETTEXTUREHANDLEIMGPROC PFN_glGetTextureHandleIMG;
typedef PFNGLGETTEXTURESAMPLERHANDLEIMGPROC PFN_glGetTextureSamplerHandleIMG;
typedef PFNGLUNIFORMHANDLEUI64IMGPROC PFN_glUniformHandleui64IMG;
typedef PFNGLUNIFORMHANDLEUI64VIMGPROC PFN_glUniformHandleui64vIMG;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC PFN_glProgramUniformHandleui64IMG;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC
    PFN_glProgramUniformHandleui64vIMG;
typedef PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC
    PFN_glFramebufferTexture2DDownsampleIMG;
typedef PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC
    PFN_glFramebufferTextureLayerDownsampleIMG;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC
    PFN_glRenderbufferStorageMultisampleIMG;
typedef PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC
    PFN_glFramebufferTexture2DMultisampleIMG;
typedef PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC
    PFN_glApplyFramebufferAttachmentCMAAINTEL;
typedef PFNGLBEGINPERFQUERYINTELPROC PFN_glBeginPerfQueryINTEL;
typedef PFNGLCREATEPERFQUERYINTELPROC PFN_glCreatePerfQueryINTEL;
typedef PFNGLDELETEPERFQUERYINTELPROC PFN_glDeletePerfQueryINTEL;
typedef PFNGLENDPERFQUERYINTELPROC PFN_glEndPerfQueryINTEL;
typedef PFNGLGETFIRSTPERFQUERYIDINTELPROC PFN_glGetFirstPerfQueryIdINTEL;
typedef PFNGLGETNEXTPERFQUERYIDINTELPROC PFN_glGetNextPerfQueryIdINTEL;
typedef PFNGLGETPERFCOUNTERINFOINTELPROC PFN_glGetPerfCounterInfoINTEL;
typedef PFNGLGETPERFQUERYDATAINTELPROC PFN_glGetPerfQueryDataINTEL;
typedef PFNGLGETPERFQUERYIDBYNAMEINTELPROC PFN_glGetPerfQueryIdByNameINTEL;
typedef PFNGLGETPERFQUERYINFOINTELPROC PFN_glGetPerfQueryInfoINTEL;
typedef PFNGLFRAMEBUFFERPARAMETERIMESAPROC PFN_glFramebufferParameteriMESA;
typedef PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC
    PFN_glGetFramebufferParameterivMESA;
typedef PFNGLGETTEXTUREHANDLENVPROC PFN_glGetTextureHandleNV;
typedef PFNGLGETTEXTURESAMPLERHANDLENVPROC PFN_glGetTextureSamplerHandleNV;
typedef PFNGLMAKETEXTUREHANDLERESIDENTNVPROC PFN_glMakeTextureHandleResidentNV;
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
    PFN_glMakeTextureHandleNonResidentNV;
typedef PFNGLGETIMAGEHANDLENVPROC PFN_glGetImageHandleNV;
typedef PFNGLMAKEIMAGEHANDLERESIDENTNVPROC PFN_glMakeImageHandleResidentNV;
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
    PFN_glMakeImageHandleNonResidentNV;
typedef PFNGLUNIFORMHANDLEUI64NVPROC PFN_glUniformHandleui64NV;
typedef PFNGLUNIFORMHANDLEUI64VNVPROC PFN_glUniformHandleui64vNV;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC PFN_glProgramUniformHandleui64NV;
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC PFN_glProgramUniformHandleui64vNV;
typedef PFNGLISTEXTUREHANDLERESIDENTNVPROC PFN_glIsTextureHandleResidentNV;
typedef PFNGLISIMAGEHANDLERESIDENTNVPROC PFN_glIsImageHandleResidentNV;
typedef PFNGLBLENDPARAMETERINVPROC PFN_glBlendParameteriNV;
typedef PFNGLBLENDBARRIERNVPROC PFN_glBlendBarrierNV;
typedef PFNGLVIEWPORTPOSITIONWSCALENVPROC PFN_glViewportPositionWScaleNV;
typedef PFNGLBEGINCONDITIONALRENDERNVPROC PFN_glBeginConditionalRenderNV;
typedef PFNGLENDCONDITIONALRENDERNVPROC PFN_glEndConditionalRenderNV;
typedef PFNGLSUBPIXELPRECISIONBIASNVPROC PFN_glSubpixelPrecisionBiasNV;
typedef PFNGLCONSERVATIVERASTERPARAMETERINVPROC
    PFN_glConservativeRasterParameteriNV;
typedef PFNGLCOPYBUFFERSUBDATANVPROC PFN_glCopyBufferSubDataNV;
typedef PFNGLCOVERAGEMASKNVPROC PFN_glCoverageMaskNV;
typedef PFNGLCOVERAGEOPERATIONNVPROC PFN_glCoverageOperationNV;
typedef PFNGLDRAWBUFFERSNVPROC PFN_glDrawBuffersNV;
typedef PFNGLDRAWARRAYSINSTANCEDNVPROC PFN_glDrawArraysInstancedNV;
typedef PFNGLDRAWELEMENTSINSTANCEDNVPROC PFN_glDrawElementsInstancedNV;
typedef PFNGLDRAWVKIMAGENVPROC PFN_glDrawVkImageNV;
typedef PFNGLGETVKPROCADDRNVPROC PFN_glGetVkProcAddrNV;
typedef PFNGLWAITVKSEMAPHORENVPROC PFN_glWaitVkSemaphoreNV;
typedef PFNGLSIGNALVKSEMAPHORENVPROC PFN_glSignalVkSemaphoreNV;
typedef PFNGLSIGNALVKFENCENVPROC PFN_glSignalVkFenceNV;
typedef PFNGLDELETEFENCESNVPROC PFN_glDeleteFencesNV;
typedef PFNGLGENFENCESNVPROC PFN_glGenFencesNV;
typedef PFNGLISFENCENVPROC PFN_glIsFenceNV;
typedef PFNGLTESTFENCENVPROC PFN_glTestFenceNV;
typedef PFNGLGETFENCEIVNVPROC PFN_glGetFenceivNV;
typedef PFNGLFINISHFENCENVPROC PFN_glFinishFenceNV;
typedef PFNGLSETFENCENVPROC PFN_glSetFenceNV;
typedef PFNGLFRAGMENTCOVERAGECOLORNVPROC PFN_glFragmentCoverageColorNV;
typedef PFNGLBLITFRAMEBUFFERNVPROC PFN_glBlitFramebufferNV;
typedef PFNGLCOVERAGEMODULATIONTABLENVPROC PFN_glCoverageModulationTableNV;
typedef PFNGLGETCOVERAGEMODULATIONTABLENVPROC
    PFN_glGetCoverageModulationTableNV;
typedef PFNGLCOVERAGEMODULATIONNVPROC PFN_glCoverageModulationNV;
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC
    PFN_glRenderbufferStorageMultisampleNV;
typedef PFNGLUNIFORM1I64NVPROC PFN_glUniform1i64NV;
typedef PFNGLUNIFORM2I64NVPROC PFN_glUniform2i64NV;
typedef PFNGLUNIFORM3I64NVPROC PFN_glUniform3i64NV;
typedef PFNGLUNIFORM4I64NVPROC PFN_glUniform4i64NV;
typedef PFNGLUNIFORM1I64VNVPROC PFN_glUniform1i64vNV;
typedef PFNGLUNIFORM2I64VNVPROC PFN_glUniform2i64vNV;
typedef PFNGLUNIFORM3I64VNVPROC PFN_glUniform3i64vNV;
typedef PFNGLUNIFORM4I64VNVPROC PFN_glUniform4i64vNV;
typedef PFNGLUNIFORM1UI64NVPROC PFN_glUniform1ui64NV;
typedef PFNGLUNIFORM2UI64NVPROC PFN_glUniform2ui64NV;
typedef PFNGLUNIFORM3UI64NVPROC PFN_glUniform3ui64NV;
typedef PFNGLUNIFORM4UI64NVPROC PFN_glUniform4ui64NV;
typedef PFNGLUNIFORM1UI64VNVPROC PFN_glUniform1ui64vNV;
typedef PFNGLUNIFORM2UI64VNVPROC PFN_glUniform2ui64vNV;
typedef PFNGLUNIFORM3UI64VNVPROC PFN_glUniform3ui64vNV;
typedef PFNGLUNIFORM4UI64VNVPROC PFN_glUniform4ui64vNV;
typedef PFNGLGETUNIFORMI64VNVPROC PFN_glGetUniformi64vNV;
typedef PFNGLPROGRAMUNIFORM1I64NVPROC PFN_glProgramUniform1i64NV;
typedef PFNGLPROGRAMUNIFORM2I64NVPROC PFN_glProgramUniform2i64NV;
typedef PFNGLPROGRAMUNIFORM3I64NVPROC PFN_glProgramUniform3i64NV;
typedef PFNGLPROGRAMUNIFORM4I64NVPROC PFN_glProgramUniform4i64NV;
typedef PFNGLPROGRAMUNIFORM1I64VNVPROC PFN_glProgramUniform1i64vNV;
typedef PFNGLPROGRAMUNIFORM2I64VNVPROC PFN_glProgramUniform2i64vNV;
typedef PFNGLPROGRAMUNIFORM3I64VNVPROC PFN_glProgramUniform3i64vNV;
typedef PFNGLPROGRAMUNIFORM4I64VNVPROC PFN_glProgramUniform4i64vNV;
typedef PFNGLPROGRAMUNIFORM1UI64NVPROC PFN_glProgramUniform1ui64NV;
typedef PFNGLPROGRAMUNIFORM2UI64NVPROC PFN_glProgramUniform2ui64NV;
typedef PFNGLPROGRAMUNIFORM3UI64NVPROC PFN_glProgramUniform3ui64NV;
typedef PFNGLPROGRAMUNIFORM4UI64NVPROC PFN_glProgramUniform4ui64NV;
typedef PFNGLPROGRAMUNIFORM1UI64VNVPROC PFN_glProgramUniform1ui64vNV;
typedef PFNGLPROGRAMUNIFORM2UI64VNVPROC PFN_glProgramUniform2ui64vNV;
typedef PFNGLPROGRAMUNIFORM3UI64VNVPROC PFN_glProgramUniform3ui64vNV;
typedef PFNGLPROGRAMUNIFORM4UI64VNVPROC PFN_glProgramUniform4ui64vNV;
typedef PFNGLVERTEXATTRIBDIVISORNVPROC PFN_glVertexAttribDivisorNV;
typedef PFNGLGETINTERNALFORMATSAMPLEIVNVPROC PFN_glGetInternalformatSampleivNV;
typedef PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC
    PFN_glGetMemoryObjectDetachedResourcesuivNV;
typedef PFNGLRESETMEMORYOBJECTPARAMETERNVPROC
    PFN_glResetMemoryObjectParameterNV;
typedef PFNGLTEXATTACHMEMORYNVPROC PFN_glTexAttachMemoryNV;
typedef PFNGLBUFFERATTACHMEMORYNVPROC PFN_glBufferAttachMemoryNV;
typedef PFNGLTEXTUREATTACHMEMORYNVPROC PFN_glTextureAttachMemoryNV;
typedef PFNGLNAMEDBUFFERATTACHMEMORYNVPROC PFN_glNamedBufferAttachMemoryNV;
typedef PFNGLBUFFERPAGECOMMITMENTMEMNVPROC PFN_glBufferPageCommitmentMemNV;
typedef PFNGLTEXPAGECOMMITMENTMEMNVPROC PFN_glTexPageCommitmentMemNV;
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC
    PFN_glNamedBufferPageCommitmentMemNV;
typedef PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC PFN_glTexturePageCommitmentMemNV;
typedef PFNGLDRAWMESHTASKSNVPROC PFN_glDrawMeshTasksNV;
typedef PFNGLDRAWMESHTASKSINDIRECTNVPROC PFN_glDrawMeshTasksIndirectNV;
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC
    PFN_glMultiDrawMeshTasksIndirectNV;
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC
    PFN_glMultiDrawMeshTasksIndirectCountNV;
typedef PFNGLUNIFORMMATRIX2X3FVNVPROC PFN_glUniformMatrix2x3fvNV;
typedef PFNGLUNIFORMMATRIX3X2FVNVPROC PFN_glUniformMatrix3x2fvNV;
typedef PFNGLUNIFORMMATRIX2X4FVNVPROC PFN_glUniformMatrix2x4fvNV;
typedef PFNGLUNIFORMMATRIX4X2FVNVPROC PFN_glUniformMatrix4x2fvNV;
typedef PFNGLUNIFORMMATRIX3X4FVNVPROC PFN_glUniformMatrix3x4fvNV;
typedef PFNGLUNIFORMMATRIX4X3FVNVPROC PFN_glUniformMatrix4x3fvNV;
typedef PFNGLGENPATHSNVPROC PFN_glGenPathsNV;
typedef PFNGLDELETEPATHSNVPROC PFN_glDeletePathsNV;
typedef PFNGLISPATHNVPROC PFN_glIsPathNV;
typedef PFNGLPATHCOMMANDSNVPROC PFN_glPathCommandsNV;
typedef PFNGLPATHCOORDSNVPROC PFN_glPathCoordsNV;
typedef PFNGLPATHSUBCOMMANDSNVPROC PFN_glPathSubCommandsNV;
typedef PFNGLPATHSUBCOORDSNVPROC PFN_glPathSubCoordsNV;
typedef PFNGLPATHSTRINGNVPROC PFN_glPathStringNV;
typedef PFNGLPATHGLYPHSNVPROC PFN_glPathGlyphsNV;
typedef PFNGLPATHGLYPHRANGENVPROC PFN_glPathGlyphRangeNV;
typedef PFNGLWEIGHTPATHSNVPROC PFN_glWeightPathsNV;
typedef PFNGLCOPYPATHNVPROC PFN_glCopyPathNV;
typedef PFNGLINTERPOLATEPATHSNVPROC PFN_glInterpolatePathsNV;
typedef PFNGLTRANSFORMPATHNVPROC PFN_glTransformPathNV;
typedef PFNGLPATHPARAMETERIVNVPROC PFN_glPathParameterivNV;
typedef PFNGLPATHPARAMETERINVPROC PFN_glPathParameteriNV;
typedef PFNGLPATHPARAMETERFVNVPROC PFN_glPathParameterfvNV;
typedef PFNGLPATHPARAMETERFNVPROC PFN_glPathParameterfNV;
typedef PFNGLPATHDASHARRAYNVPROC PFN_glPathDashArrayNV;
typedef PFNGLPATHSTENCILFUNCNVPROC PFN_glPathStencilFuncNV;
typedef PFNGLPATHSTENCILDEPTHOFFSETNVPROC PFN_glPathStencilDepthOffsetNV;
typedef PFNGLSTENCILFILLPATHNVPROC PFN_glStencilFillPathNV;
typedef PFNGLSTENCILSTROKEPATHNVPROC PFN_glStencilStrokePathNV;
typedef PFNGLSTENCILFILLPATHINSTANCEDNVPROC PFN_glStencilFillPathInstancedNV;
typedef PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
    PFN_glStencilStrokePathInstancedNV;
typedef PFNGLPATHCOVERDEPTHFUNCNVPROC PFN_glPathCoverDepthFuncNV;
typedef PFNGLCOVERFILLPATHNVPROC PFN_glCoverFillPathNV;
typedef PFNGLCOVERSTROKEPATHNVPROC PFN_glCoverStrokePathNV;
typedef PFNGLCOVERFILLPATHINSTANCEDNVPROC PFN_glCoverFillPathInstancedNV;
typedef PFNGLCOVERSTROKEPATHINSTANCEDNVPROC PFN_glCoverStrokePathInstancedNV;
typedef PFNGLGETPATHPARAMETERIVNVPROC PFN_glGetPathParameterivNV;
typedef PFNGLGETPATHPARAMETERFVNVPROC PFN_glGetPathParameterfvNV;
typedef PFNGLGETPATHCOMMANDSNVPROC PFN_glGetPathCommandsNV;
typedef PFNGLGETPATHCOORDSNVPROC PFN_glGetPathCoordsNV;
typedef PFNGLGETPATHDASHARRAYNVPROC PFN_glGetPathDashArrayNV;
typedef PFNGLGETPATHMETRICSNVPROC PFN_glGetPathMetricsNV;
typedef PFNGLGETPATHMETRICRANGENVPROC PFN_glGetPathMetricRangeNV;
typedef PFNGLGETPATHSPACINGNVPROC PFN_glGetPathSpacingNV;
typedef PFNGLISPOINTINFILLPATHNVPROC PFN_glIsPointInFillPathNV;
typedef PFNGLISPOINTINSTROKEPATHNVPROC PFN_glIsPointInStrokePathNV;
typedef PFNGLGETPATHLENGTHNVPROC PFN_glGetPathLengthNV;
typedef PFNGLPOINTALONGPATHNVPROC PFN_glPointAlongPathNV;
typedef PFNGLMATRIXLOAD3X2FNVPROC PFN_glMatrixLoad3x2fNV;
typedef PFNGLMATRIXLOAD3X3FNVPROC PFN_glMatrixLoad3x3fNV;
typedef PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC PFN_glMatrixLoadTranspose3x3fNV;
typedef PFNGLMATRIXMULT3X2FNVPROC PFN_glMatrixMult3x2fNV;
typedef PFNGLMATRIXMULT3X3FNVPROC PFN_glMatrixMult3x3fNV;
typedef PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC PFN_glMatrixMultTranspose3x3fNV;
typedef PFNGLSTENCILTHENCOVERFILLPATHNVPROC PFN_glStencilThenCoverFillPathNV;
typedef PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC
    PFN_glStencilThenCoverStrokePathNV;
typedef PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC
    PFN_glStencilThenCoverFillPathInstancedNV;
typedef PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC
    PFN_glStencilThenCoverStrokePathInstancedNV;
typedef PFNGLPATHGLYPHINDEXRANGENVPROC PFN_glPathGlyphIndexRangeNV;
typedef PFNGLPATHGLYPHINDEXARRAYNVPROC PFN_glPathGlyphIndexArrayNV;
typedef PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC PFN_glPathMemoryGlyphIndexArrayNV;
typedef PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC
    PFN_glProgramPathFragmentInputGenNV;
typedef PFNGLGETPROGRAMRESOURCEFVNVPROC PFN_glGetProgramResourcefvNV;
typedef PFNGLMATRIXFRUSTUMEXTPROC PFN_glMatrixFrustumEXT;
typedef PFNGLMATRIXLOADIDENTITYEXTPROC PFN_glMatrixLoadIdentityEXT;
typedef PFNGLMATRIXLOADTRANSPOSEFEXTPROC PFN_glMatrixLoadTransposefEXT;
typedef PFNGLMATRIXLOADTRANSPOSEDEXTPROC PFN_glMatrixLoadTransposedEXT;
typedef PFNGLMATRIXLOADFEXTPROC PFN_glMatrixLoadfEXT;
typedef PFNGLMATRIXLOADDEXTPROC PFN_glMatrixLoaddEXT;
typedef PFNGLMATRIXMULTTRANSPOSEFEXTPROC PFN_glMatrixMultTransposefEXT;
typedef PFNGLMATRIXMULTTRANSPOSEDEXTPROC PFN_glMatrixMultTransposedEXT;
typedef PFNGLMATRIXMULTFEXTPROC PFN_glMatrixMultfEXT;
typedef PFNGLMATRIXMULTDEXTPROC PFN_glMatrixMultdEXT;
typedef PFNGLMATRIXORTHOEXTPROC PFN_glMatrixOrthoEXT;
typedef PFNGLMATRIXPOPEXTPROC PFN_glMatrixPopEXT;
typedef PFNGLMATRIXPUSHEXTPROC PFN_glMatrixPushEXT;
typedef PFNGLMATRIXROTATEFEXTPROC PFN_glMatrixRotatefEXT;
typedef PFNGLMATRIXROTATEDEXTPROC PFN_glMatrixRotatedEXT;
typedef PFNGLMATRIXSCALEFEXTPROC PFN_glMatrixScalefEXT;
typedef PFNGLMATRIXSCALEDEXTPROC PFN_glMatrixScaledEXT;
typedef PFNGLMATRIXTRANSLATEFEXTPROC PFN_glMatrixTranslatefEXT;
typedef PFNGLMATRIXTRANSLATEDEXTPROC PFN_glMatrixTranslatedEXT;
typedef PFNGLPOLYGONMODENVPROC PFN_glPolygonModeNV;
typedef PFNGLREADBUFFERNVPROC PFN_glReadBufferNV;
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
    PFN_glFramebufferSampleLocationsfvNV;
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
    PFN_glNamedFramebufferSampleLocationsfvNV;
typedef PFNGLRESOLVEDEPTHVALUESNVPROC PFN_glResolveDepthValuesNV;
typedef PFNGLSCISSOREXCLUSIVENVPROC PFN_glScissorExclusiveNV;
typedef PFNGLSCISSOREXCLUSIVEARRAYVNVPROC PFN_glScissorExclusiveArrayvNV;
typedef PFNGLBINDSHADINGRATEIMAGENVPROC PFN_glBindShadingRateImageNV;
typedef PFNGLGETSHADINGRATEIMAGEPALETTENVPROC
    PFN_glGetShadingRateImagePaletteNV;
typedef PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC
    PFN_glGetShadingRateSampleLocationivNV;
typedef PFNGLSHADINGRATEIMAGEBARRIERNVPROC PFN_glShadingRateImageBarrierNV;
typedef PFNGLSHADINGRATEIMAGEPALETTENVPROC PFN_glShadingRateImagePaletteNV;
typedef PFNGLSHADINGRATESAMPLEORDERNVPROC PFN_glShadingRateSampleOrderNV;
typedef PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC
    PFN_glShadingRateSampleOrderCustomNV;
typedef PFNGLCREATESEMAPHORESNVPROC PFN_glCreateSemaphoresNV;
typedef PFNGLSEMAPHOREPARAMETERIVNVPROC PFN_glSemaphoreParameterivNV;
typedef PFNGLGETSEMAPHOREPARAMETERIVNVPROC PFN_glGetSemaphoreParameterivNV;
typedef PFNGLVIEWPORTARRAYVNVPROC PFN_glViewportArrayvNV;
typedef PFNGLVIEWPORTINDEXEDFNVPROC PFN_glViewportIndexedfNV;
typedef PFNGLVIEWPORTINDEXEDFVNVPROC PFN_glViewportIndexedfvNV;
typedef PFNGLSCISSORARRAYVNVPROC PFN_glScissorArrayvNV;
typedef PFNGLSCISSORINDEXEDNVPROC PFN_glScissorIndexedNV;
typedef PFNGLSCISSORINDEXEDVNVPROC PFN_glScissorIndexedvNV;
typedef PFNGLDEPTHRANGEARRAYFVNVPROC PFN_glDepthRangeArrayfvNV;
typedef PFNGLDEPTHRANGEINDEXEDFNVPROC PFN_glDepthRangeIndexedfNV;
typedef PFNGLGETFLOATI_VNVPROC PFN_glGetFloati_vNV;
typedef PFNGLENABLEINVPROC PFN_glEnableiNV;
typedef PFNGLDISABLEINVPROC PFN_glDisableiNV;
typedef PFNGLISENABLEDINVPROC PFN_glIsEnablediNV;
typedef PFNGLVIEWPORTSWIZZLENVPROC PFN_glViewportSwizzleNV;
typedef PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC
    PFN_glFramebufferTextureMultiviewOVR;
typedef PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC
    PFN_glFramebufferTextureMultisampleMultiviewOVR;
typedef PFNGLALPHAFUNCQCOMPROC PFN_glAlphaFuncQCOM;
typedef PFNGLGETDRIVERCONTROLSQCOMPROC PFN_glGetDriverControlsQCOM;
typedef PFNGLGETDRIVERCONTROLSTRINGQCOMPROC PFN_glGetDriverControlStringQCOM;
typedef PFNGLENABLEDRIVERCONTROLQCOMPROC PFN_glEnableDriverControlQCOM;
typedef PFNGLDISABLEDRIVERCONTROLQCOMPROC PFN_glDisableDriverControlQCOM;
typedef PFNGLEXTGETTEXTURESQCOMPROC PFN_glExtGetTexturesQCOM;
typedef PFNGLEXTGETBUFFERSQCOMPROC PFN_glExtGetBuffersQCOM;
typedef PFNGLEXTGETRENDERBUFFERSQCOMPROC PFN_glExtGetRenderbuffersQCOM;
typedef PFNGLEXTGETFRAMEBUFFERSQCOMPROC PFN_glExtGetFramebuffersQCOM;
typedef PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
    PFN_glExtGetTexLevelParameterivQCOM;
typedef PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
    PFN_glExtTexObjectStateOverrideiQCOM;
typedef PFNGLEXTGETTEXSUBIMAGEQCOMPROC PFN_glExtGetTexSubImageQCOM;
typedef PFNGLEXTGETBUFFERPOINTERVQCOMPROC PFN_glExtGetBufferPointervQCOM;
typedef PFNGLEXTGETSHADERSQCOMPROC PFN_glExtGetShadersQCOM;
typedef PFNGLEXTGETPROGRAMSQCOMPROC PFN_glExtGetProgramsQCOM;
typedef PFNGLEXTISPROGRAMBINARYQCOMPROC PFN_glExtIsProgramBinaryQCOM;
typedef PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
    PFN_glExtGetProgramBinarySourceQCOM;
typedef PFNGLEXTRAPOLATETEX2DQCOMPROC PFN_glExtrapolateTex2DQCOM;
typedef PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC
    PFN_glFramebufferFoveationConfigQCOM;
typedef PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC
    PFN_glFramebufferFoveationParametersQCOM;
typedef PFNGLTEXESTIMATEMOTIONQCOMPROC PFN_glTexEstimateMotionQCOM;
typedef PFNGLTEXESTIMATEMOTIONREGIONSQCOMPROC
    PFN_glTexEstimateMotionRegionsQCOM;
typedef PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC PFN_glFramebufferFetchBarrierQCOM;
typedef PFNGLSHADINGRATEQCOMPROC PFN_glShadingRateQCOM;
typedef PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC
    PFN_glTextureFoveationParametersQCOM;
typedef PFNGLSTARTTILINGQCOMPROC PFN_glStartTilingQCOM;
typedef PFNGLENDTILINGQCOMPROC PFN_glEndTilingQCOM;
#define VKFUNDEFINE(NAME) PFN_##NAME NAME##;

class GLES2LoaderLoader {
public:
  typedef APIProc (*UserptrLoadFunc)(void *userptr, std::string_view name);
  struct Flags : public LONGBITSET {
    Flags() : LONGBITSET(sizeof(Flags), 135) {}
    bool IS_LOAD_GL_ES_VERSION_2_0 : 1;                               // 0
    bool IS_LOAD_GL_ES_VERSION_3_0 : 1;                               // 1
    bool IS_LOAD_GL_ES_VERSION_3_1 : 1;                               // 2
    bool IS_LOAD_GL_ES_VERSION_3_2 : 1;                               // 3
    bool IS_LOAD_GL_KHR_blend_equation_advanced : 1;                  // 4
    bool IS_LOAD_GL_KHR_debug : 1;                                    // 5
    bool IS_LOAD_GL_KHR_parallel_shader_compile : 1;                  // 6
    bool IS_LOAD_GL_KHR_robustness : 1;                               // 7
    bool IS_LOAD_GL_OES_EGL_image : 1;                                // 8
    bool IS_LOAD_GL_OES_copy_image : 1;                               // 9
    bool IS_LOAD_GL_OES_draw_buffers_indexed : 1;                     // 10
    bool IS_LOAD_GL_OES_draw_elements_base_vertex : 1;                // 11
    bool IS_LOAD_GL_OES_geometry_shader : 1;                          // 12
    bool IS_LOAD_GL_OES_get_program_binary : 1;                       // 13
    bool IS_LOAD_GL_OES_mapbuffer : 1;                                // 14
    bool IS_LOAD_GL_OES_primitive_bounding_box : 1;                   // 15
    bool IS_LOAD_GL_OES_sample_shading : 1;                           // 16
    bool IS_LOAD_GL_OES_tessellation_shader : 1;                      // 17
    bool IS_LOAD_GL_OES_texture_3D : 1;                               // 18
    bool IS_LOAD_GL_OES_texture_border_clamp : 1;                     // 19
    bool IS_LOAD_GL_OES_texture_buffer : 1;                           // 20
    bool IS_LOAD_GL_OES_texture_storage_multisample_2d_array : 1;     // 21
    bool IS_LOAD_GL_OES_texture_view : 1;                             // 22
    bool IS_LOAD_GL_OES_vertex_array_object : 1;                      // 23
    bool IS_LOAD_GL_OES_viewport_array : 1;                           // 24
    bool IS_LOAD_GL_AMD_framebuffer_multisample_advanced : 1;         // 25
    bool IS_LOAD_GL_AMD_performance_monitor : 1;                      // 26
    bool IS_LOAD_GL_ANGLE_framebuffer_blit : 1;                       // 27
    bool IS_LOAD_GL_ANGLE_framebuffer_multisample : 1;                // 28
    bool IS_LOAD_GL_ANGLE_instanced_arrays : 1;                       // 29
    bool IS_LOAD_GL_ANGLE_translated_shader_source : 1;               // 30
    bool IS_LOAD_GL_APPLE_copy_texture_levels : 1;                    // 31
    bool IS_LOAD_GL_APPLE_framebuffer_multisample : 1;                // 32
    bool IS_LOAD_GL_APPLE_sync : 1;                                   // 33
    bool IS_LOAD_GL_ARM_shader_core_properties : 1;                   // 34
    bool IS_LOAD_GL_EXT_EGL_image_storage : 1;                        // 35
    bool IS_LOAD_GL_EXT_base_instance : 1;                            // 36
    bool IS_LOAD_GL_EXT_blend_func_extended : 1;                      // 37
    bool IS_LOAD_GL_EXT_buffer_storage : 1;                           // 38
    bool IS_LOAD_GL_EXT_clear_texture : 1;                            // 39
    bool IS_LOAD_GL_EXT_clip_control : 1;                             // 40
    bool IS_LOAD_GL_EXT_copy_image : 1;                               // 41
    bool IS_LOAD_GL_EXT_debug_label : 1;                              // 42
    bool IS_LOAD_GL_EXT_debug_marker : 1;                             // 43
    bool IS_LOAD_GL_EXT_discard_framebuffer : 1;                      // 44
    bool IS_LOAD_GL_EXT_disjoint_timer_query : 1;                     // 45
    bool IS_LOAD_GL_EXT_draw_buffers : 1;                             // 46
    bool IS_LOAD_GL_EXT_draw_buffers_indexed : 1;                     // 47
    bool IS_LOAD_GL_EXT_draw_elements_base_vertex : 1;                // 48
    bool IS_LOAD_GL_EXT_draw_instanced : 1;                           // 49
    bool IS_LOAD_GL_EXT_draw_transform_feedback : 1;                  // 50
    bool IS_LOAD_GL_EXT_external_buffer : 1;                          // 51
    bool IS_LOAD_GL_EXT_fragment_shading_rate : 1;                    // 52
    bool IS_LOAD_GL_EXT_framebuffer_blit_layers : 1;                  // 53
    bool IS_LOAD_GL_EXT_geometry_shader : 1;                          // 54
    bool IS_LOAD_GL_EXT_instanced_arrays : 1;                         // 55
    bool IS_LOAD_GL_EXT_map_buffer_range : 1;                         // 56
    bool IS_LOAD_GL_EXT_memory_object : 1;                            // 57
    bool IS_LOAD_GL_EXT_memory_object_fd : 1;                         // 58
    bool IS_LOAD_GL_EXT_memory_object_win32 : 1;                      // 59
    bool IS_LOAD_GL_EXT_multi_draw_arrays : 1;                        // 60
    bool IS_LOAD_GL_EXT_multi_draw_indirect : 1;                      // 61
    bool IS_LOAD_GL_EXT_multisampled_render_to_texture : 1;           // 62
    bool IS_LOAD_GL_EXT_multiview_draw_buffers : 1;                   // 63
    bool IS_LOAD_GL_EXT_polygon_offset_clamp : 1;                     // 64
    bool IS_LOAD_GL_EXT_primitive_bounding_box : 1;                   // 65
    bool IS_LOAD_GL_EXT_raster_multisample : 1;                       // 66
    bool IS_LOAD_GL_EXT_robustness : 1;                               // 67
    bool IS_LOAD_GL_EXT_semaphore : 1;                                // 68
    bool IS_LOAD_GL_EXT_semaphore_fd : 1;                             // 69
    bool IS_LOAD_GL_EXT_semaphore_win32 : 1;                          // 70
    bool IS_LOAD_GL_EXT_separate_shader_objects : 1;                  // 71
    bool IS_LOAD_GL_EXT_shader_framebuffer_fetch_non_coherent : 1;    // 72
    bool IS_LOAD_GL_EXT_shader_pixel_local_storage2 : 1;              // 73
    bool IS_LOAD_GL_EXT_sparse_texture : 1;                           // 74
    bool IS_LOAD_GL_EXT_tessellation_shader : 1;                      // 75
    bool IS_LOAD_GL_EXT_texture_border_clamp : 1;                     // 76
    bool IS_LOAD_GL_EXT_texture_buffer : 1;                           // 77
    bool IS_LOAD_GL_EXT_texture_storage : 1;                          // 78
    bool IS_LOAD_GL_EXT_texture_storage_compression : 1;              // 79
    bool IS_LOAD_GL_EXT_texture_view : 1;                             // 80
    bool IS_LOAD_GL_EXT_win32_keyed_mutex : 1;                        // 81
    bool IS_LOAD_GL_EXT_window_rectangles : 1;                        // 82
    bool IS_LOAD_GL_IMG_bindless_texture : 1;                         // 83
    bool IS_LOAD_GL_IMG_framebuffer_downsample : 1;                   // 84
    bool IS_LOAD_GL_IMG_multisampled_render_to_texture : 1;           // 85
    bool IS_LOAD_GL_INTEL_framebuffer_CMAA : 1;                       // 86
    bool IS_LOAD_GL_INTEL_performance_query : 1;                      // 87
    bool IS_LOAD_GL_MESA_framebuffer_flip_y : 1;                      // 88
    bool IS_LOAD_GL_MESA_sampler_objects : 1;                         // 89
    bool IS_LOAD_GL_NV_bindless_texture : 1;                          // 90
    bool IS_LOAD_GL_NV_blend_equation_advanced : 1;                   // 91
    bool IS_LOAD_GL_NV_clip_space_w_scaling : 1;                      // 92
    bool IS_LOAD_GL_NV_conditional_render : 1;                        // 93
    bool IS_LOAD_GL_NV_conservative_raster : 1;                       // 94
    bool IS_LOAD_GL_NV_conservative_raster_pre_snap_triangles : 1;    // 95
    bool IS_LOAD_GL_NV_copy_buffer : 1;                               // 96
    bool IS_LOAD_GL_NV_coverage_sample : 1;                           // 97
    bool IS_LOAD_GL_NV_draw_buffers : 1;                              // 98
    bool IS_LOAD_GL_NV_draw_instanced : 1;                            // 99
    bool IS_LOAD_GL_NV_draw_vulkan_image : 1;                         // 100
    bool IS_LOAD_GL_NV_fence : 1;                                     // 101
    bool IS_LOAD_GL_NV_fragment_coverage_to_color : 1;                // 102
    bool IS_LOAD_GL_NV_framebuffer_blit : 1;                          // 103
    bool IS_LOAD_GL_NV_framebuffer_mixed_samples : 1;                 // 104
    bool IS_LOAD_GL_NV_framebuffer_multisample : 1;                   // 105
    bool IS_LOAD_GL_NV_gpu_shader5 : 1;                               // 106
    bool IS_LOAD_GL_NV_instanced_arrays : 1;                          // 107
    bool IS_LOAD_GL_NV_internalformat_sample_query : 1;               // 108
    bool IS_LOAD_GL_NV_memory_attachment : 1;                         // 109
    bool IS_LOAD_GL_NV_memory_object_sparse : 1;                      // 110
    bool IS_LOAD_GL_NV_mesh_shader : 1;                               // 111
    bool IS_LOAD_GL_NV_non_square_matrices : 1;                       // 112
    bool IS_LOAD_GL_NV_path_rendering : 1;                            // 113
    bool IS_LOAD_GL_NV_polygon_mode : 1;                              // 114
    bool IS_LOAD_GL_NV_read_buffer : 1;                               // 115
    bool IS_LOAD_GL_NV_sample_locations : 1;                          // 116
    bool IS_LOAD_GL_NV_scissor_exclusive : 1;                         // 117
    bool IS_LOAD_GL_NV_shading_rate_image : 1;                        // 118
    bool IS_LOAD_GL_NV_timeline_semaphore : 1;                        // 119
    bool IS_LOAD_GL_NV_viewport_array : 1;                            // 120
    bool IS_LOAD_GL_NV_viewport_swizzle : 1;                          // 121
    bool IS_LOAD_GL_OVR_multiview : 1;                                // 122
    bool IS_LOAD_GL_OVR_multiview_multisampled_render_to_texture : 1; // 123
    bool IS_LOAD_GL_QCOM_alpha_test : 1;                              // 124
    bool IS_LOAD_GL_QCOM_driver_control : 1;                          // 125
    bool IS_LOAD_GL_QCOM_extended_get : 1;                            // 126
    bool IS_LOAD_GL_QCOM_extended_get2 : 1;                           // 127
    bool IS_LOAD_GL_QCOM_frame_extrapolation : 1;                     // 128
    bool IS_LOAD_GL_QCOM_framebuffer_foveated : 1;                    // 129
    bool IS_LOAD_GL_QCOM_motion_estimation : 1;                       // 130
    bool IS_LOAD_GL_QCOM_shader_framebuffer_fetch_noncoherent : 1;    // 131
    bool IS_LOAD_GL_QCOM_shading_rate : 1;                            // 132
    bool IS_LOAD_GL_QCOM_texture_foveated : 1;                        // 133
    bool IS_LOAD_GL_QCOM_tiled_rendering : 1;                         // 134
  };

private:
  Flags NowState;

public:
  Flags NeedLoad;
  UserptrLoadFunc LoadFunc;
  void *userptr;
  inline APIProc TryToGet(std::string_view name) {
    return LoadFunc(userptr, name);
  }
  inline const Flags &GetNowState() const { return NowState; }
  GLES2LoaderLoader();
  // GL_APICALL void GL_APIENTRY glActiveTexture (GLenum texture);
  VKFUNDEFINE(glActiveTexture);
  // GL_APICALL void GL_APIENTRY glAttachShader (GLuint program, GLuint shader);
  VKFUNDEFINE(glAttachShader);
  // GL_APICALL void GL_APIENTRY glBindAttribLocation (GLuint program, GLuint
  // index, const GLchar *name);
  VKFUNDEFINE(glBindAttribLocation);
  // GL_APICALL void GL_APIENTRY glBindBuffer (GLenum target, GLuint buffer);
  VKFUNDEFINE(glBindBuffer);
  // GL_APICALL void GL_APIENTRY glBindFramebuffer (GLenum target, GLuint
  // framebuffer);
  VKFUNDEFINE(glBindFramebuffer);
  // GL_APICALL void GL_APIENTRY glBindRenderbuffer (GLenum target, GLuint
  // renderbuffer);
  VKFUNDEFINE(glBindRenderbuffer);
  // GL_APICALL void GL_APIENTRY glBindTexture (GLenum target, GLuint texture);
  VKFUNDEFINE(glBindTexture);
  // GL_APICALL void GL_APIENTRY glBlendColor (GLfloat red, GLfloat green,
  // GLfloat blue, GLfloat alpha);
  VKFUNDEFINE(glBlendColor);
  // GL_APICALL void GL_APIENTRY glBlendEquation (GLenum mode);
  VKFUNDEFINE(glBlendEquation);
  // GL_APICALL void GL_APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum
  // modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparate);
  // GL_APICALL void GL_APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
  VKFUNDEFINE(glBlendFunc);
  // GL_APICALL void GL_APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum
  // dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  VKFUNDEFINE(glBlendFuncSeparate);
  // GL_APICALL void GL_APIENTRY glBufferData (GLenum target, GLsizeiptr size,
  // const void *data, GLenum usage);
  VKFUNDEFINE(glBufferData);
  // GL_APICALL void GL_APIENTRY glBufferSubData (GLenum target, GLintptr
  // offset, GLsizeiptr size, const void *data);
  VKFUNDEFINE(glBufferSubData);
  // GL_APICALL GLenum GL_APIENTRY glCheckFramebufferStatus (GLenum target);
  VKFUNDEFINE(glCheckFramebufferStatus);
  // GL_APICALL void GL_APIENTRY glClear (GLbitfield mask);
  VKFUNDEFINE(glClear);
  // GL_APICALL void GL_APIENTRY glClearColor (GLfloat red, GLfloat green,
  // GLfloat blue, GLfloat alpha);
  VKFUNDEFINE(glClearColor);
  // GL_APICALL void GL_APIENTRY glClearDepthf (GLfloat d);
  VKFUNDEFINE(glClearDepthf);
  // GL_APICALL void GL_APIENTRY glClearStencil (GLint s);
  VKFUNDEFINE(glClearStencil);
  // GL_APICALL void GL_APIENTRY glColorMask (GLboolean red, GLboolean green,
  // GLboolean blue, GLboolean alpha);
  VKFUNDEFINE(glColorMask);
  // GL_APICALL void GL_APIENTRY glCompileShader (GLuint shader);
  VKFUNDEFINE(glCompileShader);
  // GL_APICALL void GL_APIENTRY glCompressedTexImage2D (GLenum target, GLint
  // level, GLenum internalformat, GLsizei width, GLsizei height, GLint border,
  // GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexImage2D);
  // GL_APICALL void GL_APIENTRY glCompressedTexSubImage2D (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum
  // format, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexSubImage2D);
  // GL_APICALL void GL_APIENTRY glCopyTexImage2D (GLenum target, GLint level,
  // GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height,
  // GLint border);
  VKFUNDEFINE(glCopyTexImage2D);
  // GL_APICALL void GL_APIENTRY glCopyTexSubImage2D (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glCopyTexSubImage2D);
  // GL_APICALL GLuint GL_APIENTRY glCreateProgram (void);
  VKFUNDEFINE(glCreateProgram);
  // GL_APICALL GLuint GL_APIENTRY glCreateShader (GLenum type);
  VKFUNDEFINE(glCreateShader);
  // GL_APICALL void GL_APIENTRY glCullFace (GLenum mode);
  VKFUNDEFINE(glCullFace);
  // GL_APICALL void GL_APIENTRY glDeleteBuffers (GLsizei n, const GLuint
  // *buffers);
  VKFUNDEFINE(glDeleteBuffers);
  // GL_APICALL void GL_APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint
  // *framebuffers);
  VKFUNDEFINE(glDeleteFramebuffers);
  // GL_APICALL void GL_APIENTRY glDeleteProgram (GLuint program);
  VKFUNDEFINE(glDeleteProgram);
  // GL_APICALL void GL_APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint
  // *renderbuffers);
  VKFUNDEFINE(glDeleteRenderbuffers);
  // GL_APICALL void GL_APIENTRY glDeleteShader (GLuint shader);
  VKFUNDEFINE(glDeleteShader);
  // GL_APICALL void GL_APIENTRY glDeleteTextures (GLsizei n, const GLuint
  // *textures);
  VKFUNDEFINE(glDeleteTextures);
  // GL_APICALL void GL_APIENTRY glDepthFunc (GLenum func);
  VKFUNDEFINE(glDepthFunc);
  // GL_APICALL void GL_APIENTRY glDepthMask (GLboolean flag);
  VKFUNDEFINE(glDepthMask);
  // GL_APICALL void GL_APIENTRY glDepthRangef (GLfloat n, GLfloat f);
  VKFUNDEFINE(glDepthRangef);
  // GL_APICALL void GL_APIENTRY glDetachShader (GLuint program, GLuint shader);
  VKFUNDEFINE(glDetachShader);
  // GL_APICALL void GL_APIENTRY glDisable (GLenum cap);
  VKFUNDEFINE(glDisable);
  // GL_APICALL void GL_APIENTRY glDisableVertexAttribArray (GLuint index);
  VKFUNDEFINE(glDisableVertexAttribArray);
  // GL_APICALL void GL_APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei
  // count);
  VKFUNDEFINE(glDrawArrays);
  // GL_APICALL void GL_APIENTRY glDrawElements (GLenum mode, GLsizei count,
  // GLenum type, const void *indices);
  VKFUNDEFINE(glDrawElements);
  // GL_APICALL void GL_APIENTRY glEnable (GLenum cap);
  VKFUNDEFINE(glEnable);
  // GL_APICALL void GL_APIENTRY glEnableVertexAttribArray (GLuint index);
  VKFUNDEFINE(glEnableVertexAttribArray);
  // GL_APICALL void GL_APIENTRY glFinish (void);
  VKFUNDEFINE(glFinish);
  // GL_APICALL void GL_APIENTRY glFlush (void);
  VKFUNDEFINE(glFlush);
  // GL_APICALL void GL_APIENTRY glFramebufferRenderbuffer (GLenum target,
  // GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  VKFUNDEFINE(glFramebufferRenderbuffer);
  // GL_APICALL void GL_APIENTRY glFramebufferTexture2D (GLenum target, GLenum
  // attachment, GLenum textarget, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTexture2D);
  // GL_APICALL void GL_APIENTRY glFrontFace (GLenum mode);
  VKFUNDEFINE(glFrontFace);
  // GL_APICALL void GL_APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
  VKFUNDEFINE(glGenBuffers);
  // GL_APICALL void GL_APIENTRY glGenerateMipmap (GLenum target);
  VKFUNDEFINE(glGenerateMipmap);
  // GL_APICALL void GL_APIENTRY glGenFramebuffers (GLsizei n, GLuint
  // *framebuffers);
  VKFUNDEFINE(glGenFramebuffers);
  // GL_APICALL void GL_APIENTRY glGenRenderbuffers (GLsizei n, GLuint
  // *renderbuffers);
  VKFUNDEFINE(glGenRenderbuffers);
  // GL_APICALL void GL_APIENTRY glGenTextures (GLsizei n, GLuint *textures);
  VKFUNDEFINE(glGenTextures);
  // GL_APICALL void GL_APIENTRY glGetActiveAttrib (GLuint program, GLuint
  // index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar
  // *name);
  VKFUNDEFINE(glGetActiveAttrib);
  // GL_APICALL void GL_APIENTRY glGetActiveUniform (GLuint program, GLuint
  // index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar
  // *name);
  VKFUNDEFINE(glGetActiveUniform);
  // GL_APICALL void GL_APIENTRY glGetAttachedShaders (GLuint program, GLsizei
  // maxCount, GLsizei *count, GLuint *shaders);
  VKFUNDEFINE(glGetAttachedShaders);
  // GL_APICALL GLint GL_APIENTRY glGetAttribLocation (GLuint program, const
  // GLchar *name);
  VKFUNDEFINE(glGetAttribLocation);
  // GL_APICALL void GL_APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);
  VKFUNDEFINE(glGetBooleanv);
  // GL_APICALL void GL_APIENTRY glGetBufferParameteriv (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetBufferParameteriv);
  // GL_APICALL GLenum GL_APIENTRY glGetError (void);
  VKFUNDEFINE(glGetError);
  // GL_APICALL void GL_APIENTRY glGetFloatv (GLenum pname, GLfloat *data);
  VKFUNDEFINE(glGetFloatv);
  // GL_APICALL void GL_APIENTRY glGetFramebufferAttachmentParameteriv (GLenum
  // target, GLenum attachment, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferAttachmentParameteriv);
  // GL_APICALL void GL_APIENTRY glGetIntegerv (GLenum pname, GLint *data);
  VKFUNDEFINE(glGetIntegerv);
  // GL_APICALL void GL_APIENTRY glGetProgramiv (GLuint program, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetProgramiv);
  // GL_APICALL void GL_APIENTRY glGetProgramInfoLog (GLuint program, GLsizei
  // bufSize, GLsizei *length, GLchar *infoLog);
  VKFUNDEFINE(glGetProgramInfoLog);
  // GL_APICALL void GL_APIENTRY glGetRenderbufferParameteriv (GLenum target,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetRenderbufferParameteriv);
  // GL_APICALL void GL_APIENTRY glGetShaderiv (GLuint shader, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetShaderiv);
  // GL_APICALL void GL_APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei
  // bufSize, GLsizei *length, GLchar *infoLog);
  VKFUNDEFINE(glGetShaderInfoLog);
  // GL_APICALL void GL_APIENTRY glGetShaderPrecisionFormat (GLenum shadertype,
  // GLenum precisiontype, GLint *range, GLint *precision);
  VKFUNDEFINE(glGetShaderPrecisionFormat);
  // GL_APICALL void GL_APIENTRY glGetShaderSource (GLuint shader, GLsizei
  // bufSize, GLsizei *length, GLchar *source);
  VKFUNDEFINE(glGetShaderSource);
  // GL_APICALL const GLubyte *GL_APIENTRY glGetString (GLenum name);
  VKFUNDEFINE(glGetString);
  // GL_APICALL void GL_APIENTRY glGetTexParameterfv (GLenum target, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetTexParameterfv);
  // GL_APICALL void GL_APIENTRY glGetTexParameteriv (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetTexParameteriv);
  // GL_APICALL void GL_APIENTRY glGetUniformfv (GLuint program, GLint location,
  // GLfloat *params);
  VKFUNDEFINE(glGetUniformfv);
  // GL_APICALL void GL_APIENTRY glGetUniformiv (GLuint program, GLint location,
  // GLint *params);
  VKFUNDEFINE(glGetUniformiv);
  // GL_APICALL GLint GL_APIENTRY glGetUniformLocation (GLuint program, const
  // GLchar *name);
  VKFUNDEFINE(glGetUniformLocation);
  // GL_APICALL void GL_APIENTRY glGetVertexAttribfv (GLuint index, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetVertexAttribfv);
  // GL_APICALL void GL_APIENTRY glGetVertexAttribiv (GLuint index, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetVertexAttribiv);
  // GL_APICALL void GL_APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum
  // pname, void **pointer);
  VKFUNDEFINE(glGetVertexAttribPointerv);
  // GL_APICALL void GL_APIENTRY glHint (GLenum target, GLenum mode);
  VKFUNDEFINE(glHint);
  // GL_APICALL GLboolean GL_APIENTRY glIsBuffer (GLuint buffer);
  VKFUNDEFINE(glIsBuffer);
  // GL_APICALL GLboolean GL_APIENTRY glIsEnabled (GLenum cap);
  VKFUNDEFINE(glIsEnabled);
  // GL_APICALL GLboolean GL_APIENTRY glIsFramebuffer (GLuint framebuffer);
  VKFUNDEFINE(glIsFramebuffer);
  // GL_APICALL GLboolean GL_APIENTRY glIsProgram (GLuint program);
  VKFUNDEFINE(glIsProgram);
  // GL_APICALL GLboolean GL_APIENTRY glIsRenderbuffer (GLuint renderbuffer);
  VKFUNDEFINE(glIsRenderbuffer);
  // GL_APICALL GLboolean GL_APIENTRY glIsShader (GLuint shader);
  VKFUNDEFINE(glIsShader);
  // GL_APICALL GLboolean GL_APIENTRY glIsTexture (GLuint texture);
  VKFUNDEFINE(glIsTexture);
  // GL_APICALL void GL_APIENTRY glLineWidth (GLfloat width);
  VKFUNDEFINE(glLineWidth);
  // GL_APICALL void GL_APIENTRY glLinkProgram (GLuint program);
  VKFUNDEFINE(glLinkProgram);
  // GL_APICALL void GL_APIENTRY glPixelStorei (GLenum pname, GLint param);
  VKFUNDEFINE(glPixelStorei);
  // GL_APICALL void GL_APIENTRY glPolygonOffset (GLfloat factor, GLfloat
  // units);
  VKFUNDEFINE(glPolygonOffset);
  // GL_APICALL void GL_APIENTRY glReadPixels (GLint x, GLint y, GLsizei width,
  // GLsizei height, GLenum format, GLenum type, void *pixels);
  VKFUNDEFINE(glReadPixels);
  // GL_APICALL void GL_APIENTRY glReleaseShaderCompiler (void);
  VKFUNDEFINE(glReleaseShaderCompiler);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorage (GLenum target, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorage);
  // GL_APICALL void GL_APIENTRY glSampleCoverage (GLfloat value, GLboolean
  // invert);
  VKFUNDEFINE(glSampleCoverage);
  // GL_APICALL void GL_APIENTRY glScissor (GLint x, GLint y, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glScissor);
  // GL_APICALL void GL_APIENTRY glShaderBinary (GLsizei count, const GLuint
  // *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
  VKFUNDEFINE(glShaderBinary);
  // GL_APICALL void GL_APIENTRY glShaderSource (GLuint shader, GLsizei count,
  // const GLchar *const*string, const GLint *length);
  VKFUNDEFINE(glShaderSource);
  // GL_APICALL void GL_APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint
  // mask);
  VKFUNDEFINE(glStencilFunc);
  // GL_APICALL void GL_APIENTRY glStencilFuncSeparate (GLenum face, GLenum
  // func, GLint ref, GLuint mask);
  VKFUNDEFINE(glStencilFuncSeparate);
  // GL_APICALL void GL_APIENTRY glStencilMask (GLuint mask);
  VKFUNDEFINE(glStencilMask);
  // GL_APICALL void GL_APIENTRY glStencilMaskSeparate (GLenum face, GLuint
  // mask);
  VKFUNDEFINE(glStencilMaskSeparate);
  // GL_APICALL void GL_APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum
  // zpass);
  VKFUNDEFINE(glStencilOp);
  // GL_APICALL void GL_APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail,
  // GLenum dpfail, GLenum dppass);
  VKFUNDEFINE(glStencilOpSeparate);
  // GL_APICALL void GL_APIENTRY glTexImage2D (GLenum target, GLint level, GLint
  // internalformat, GLsizei width, GLsizei height, GLint border, GLenum format,
  // GLenum type, const void *pixels);
  VKFUNDEFINE(glTexImage2D);
  // GL_APICALL void GL_APIENTRY glTexParameterf (GLenum target, GLenum pname,
  // GLfloat param);
  VKFUNDEFINE(glTexParameterf);
  // GL_APICALL void GL_APIENTRY glTexParameterfv (GLenum target, GLenum pname,
  // const GLfloat *params);
  VKFUNDEFINE(glTexParameterfv);
  // GL_APICALL void GL_APIENTRY glTexParameteri (GLenum target, GLenum pname,
  // GLint param);
  VKFUNDEFINE(glTexParameteri);
  // GL_APICALL void GL_APIENTRY glTexParameteriv (GLenum target, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glTexParameteriv);
  // GL_APICALL void GL_APIENTRY glTexSubImage2D (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
  // GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage2D);
  // GL_APICALL void GL_APIENTRY glUniform1f (GLint location, GLfloat v0);
  VKFUNDEFINE(glUniform1f);
  // GL_APICALL void GL_APIENTRY glUniform1fv (GLint location, GLsizei count,
  // const GLfloat *value);
  VKFUNDEFINE(glUniform1fv);
  // GL_APICALL void GL_APIENTRY glUniform1i (GLint location, GLint v0);
  VKFUNDEFINE(glUniform1i);
  // GL_APICALL void GL_APIENTRY glUniform1iv (GLint location, GLsizei count,
  // const GLint *value);
  VKFUNDEFINE(glUniform1iv);
  // GL_APICALL void GL_APIENTRY glUniform2f (GLint location, GLfloat v0,
  // GLfloat v1);
  VKFUNDEFINE(glUniform2f);
  // GL_APICALL void GL_APIENTRY glUniform2fv (GLint location, GLsizei count,
  // const GLfloat *value);
  VKFUNDEFINE(glUniform2fv);
  // GL_APICALL void GL_APIENTRY glUniform2i (GLint location, GLint v0, GLint
  // v1);
  VKFUNDEFINE(glUniform2i);
  // GL_APICALL void GL_APIENTRY glUniform2iv (GLint location, GLsizei count,
  // const GLint *value);
  VKFUNDEFINE(glUniform2iv);
  // GL_APICALL void GL_APIENTRY glUniform3f (GLint location, GLfloat v0,
  // GLfloat v1, GLfloat v2);
  VKFUNDEFINE(glUniform3f);
  // GL_APICALL void GL_APIENTRY glUniform3fv (GLint location, GLsizei count,
  // const GLfloat *value);
  VKFUNDEFINE(glUniform3fv);
  // GL_APICALL void GL_APIENTRY glUniform3i (GLint location, GLint v0, GLint
  // v1, GLint v2);
  VKFUNDEFINE(glUniform3i);
  // GL_APICALL void GL_APIENTRY glUniform3iv (GLint location, GLsizei count,
  // const GLint *value);
  VKFUNDEFINE(glUniform3iv);
  // GL_APICALL void GL_APIENTRY glUniform4f (GLint location, GLfloat v0,
  // GLfloat v1, GLfloat v2, GLfloat v3);
  VKFUNDEFINE(glUniform4f);
  // GL_APICALL void GL_APIENTRY glUniform4fv (GLint location, GLsizei count,
  // const GLfloat *value);
  VKFUNDEFINE(glUniform4fv);
  // GL_APICALL void GL_APIENTRY glUniform4i (GLint location, GLint v0, GLint
  // v1, GLint v2, GLint v3);
  VKFUNDEFINE(glUniform4i);
  // GL_APICALL void GL_APIENTRY glUniform4iv (GLint location, GLsizei count,
  // const GLint *value);
  VKFUNDEFINE(glUniform4iv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix2fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2fv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix3fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3fv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix4fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4fv);
  // GL_APICALL void GL_APIENTRY glUseProgram (GLuint program);
  VKFUNDEFINE(glUseProgram);
  // GL_APICALL void GL_APIENTRY glValidateProgram (GLuint program);
  VKFUNDEFINE(glValidateProgram);
  // GL_APICALL void GL_APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
  VKFUNDEFINE(glVertexAttrib1f);
  // GL_APICALL void GL_APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat
  // *v);
  VKFUNDEFINE(glVertexAttrib1fv);
  // GL_APICALL void GL_APIENTRY glVertexAttrib2f (GLuint index, GLfloat x,
  // GLfloat y);
  VKFUNDEFINE(glVertexAttrib2f);
  // GL_APICALL void GL_APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat
  // *v);
  VKFUNDEFINE(glVertexAttrib2fv);
  // GL_APICALL void GL_APIENTRY glVertexAttrib3f (GLuint index, GLfloat x,
  // GLfloat y, GLfloat z);
  VKFUNDEFINE(glVertexAttrib3f);
  // GL_APICALL void GL_APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat
  // *v);
  VKFUNDEFINE(glVertexAttrib3fv);
  // GL_APICALL void GL_APIENTRY glVertexAttrib4f (GLuint index, GLfloat x,
  // GLfloat y, GLfloat z, GLfloat w);
  VKFUNDEFINE(glVertexAttrib4f);
  // GL_APICALL void GL_APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat
  // *v);
  VKFUNDEFINE(glVertexAttrib4fv);
  // GL_APICALL void GL_APIENTRY glVertexAttribPointer (GLuint index, GLint
  // size, GLenum type, GLboolean normalized, GLsizei stride, const void
  // *pointer);
  VKFUNDEFINE(glVertexAttribPointer);
  // GL_APICALL void GL_APIENTRY glViewport (GLint x, GLint y, GLsizei width,
  // GLsizei height);
  VKFUNDEFINE(glViewport);
  // GL_APICALL void GL_APIENTRY glReadBuffer (GLenum src);
  VKFUNDEFINE(glReadBuffer);
  // GL_APICALL void GL_APIENTRY glDrawRangeElements (GLenum mode, GLuint start,
  // GLuint end, GLsizei count, GLenum type, const void *indices);
  VKFUNDEFINE(glDrawRangeElements);
  // GL_APICALL void GL_APIENTRY glTexImage3D (GLenum target, GLint level, GLint
  // internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border,
  // GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexImage3D);
  // GL_APICALL void GL_APIENTRY glTexSubImage3D (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage3D);
  // GL_APICALL void GL_APIENTRY glCopyTexSubImage3D (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y,
  // GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyTexSubImage3D);
  // GL_APICALL void GL_APIENTRY glCompressedTexImage3D (GLenum target, GLint
  // level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth,
  // GLint border, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexImage3D);
  // GL_APICALL void GL_APIENTRY glCompressedTexSubImage3D (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexSubImage3D);
  // GL_APICALL void GL_APIENTRY glGenQueries (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glGenQueries);
  // GL_APICALL void GL_APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
  VKFUNDEFINE(glDeleteQueries);
  // GL_APICALL GLboolean GL_APIENTRY glIsQuery (GLuint id);
  VKFUNDEFINE(glIsQuery);
  // GL_APICALL void GL_APIENTRY glBeginQuery (GLenum target, GLuint id);
  VKFUNDEFINE(glBeginQuery);
  // GL_APICALL void GL_APIENTRY glEndQuery (GLenum target);
  VKFUNDEFINE(glEndQuery);
  // GL_APICALL void GL_APIENTRY glGetQueryiv (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetQueryiv);
  // GL_APICALL void GL_APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname,
  // GLuint *params);
  VKFUNDEFINE(glGetQueryObjectuiv);
  // GL_APICALL GLboolean GL_APIENTRY glUnmapBuffer (GLenum target);
  VKFUNDEFINE(glUnmapBuffer);
  // GL_APICALL void GL_APIENTRY glGetBufferPointerv (GLenum target, GLenum
  // pname, void **params);
  VKFUNDEFINE(glGetBufferPointerv);
  // GL_APICALL void GL_APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
  VKFUNDEFINE(glDrawBuffers);
  // GL_APICALL void GL_APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2x3fv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3x2fv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2x4fv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4x2fv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3x4fv);
  // GL_APICALL void GL_APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4x3fv);
  // GL_APICALL void GL_APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0,
  // GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint
  // dstY1, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebuffer);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisample (GLenum
  // target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glRenderbufferStorageMultisample);
  // GL_APICALL void GL_APIENTRY glFramebufferTextureLayer (GLenum target,
  // GLenum attachment, GLuint texture, GLint level, GLint layer);
  VKFUNDEFINE(glFramebufferTextureLayer);
  // GL_APICALL void *GL_APIENTRY glMapBufferRange (GLenum target, GLintptr
  // offset, GLsizeiptr length, GLbitfield access);
  VKFUNDEFINE(glMapBufferRange);
  // GL_APICALL void GL_APIENTRY glFlushMappedBufferRange (GLenum target,
  // GLintptr offset, GLsizeiptr length);
  VKFUNDEFINE(glFlushMappedBufferRange);
  // GL_APICALL void GL_APIENTRY glBindVertexArray (GLuint array);
  VKFUNDEFINE(glBindVertexArray);
  // GL_APICALL void GL_APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint
  // *arrays);
  VKFUNDEFINE(glDeleteVertexArrays);
  // GL_APICALL void GL_APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);
  VKFUNDEFINE(glGenVertexArrays);
  // GL_APICALL GLboolean GL_APIENTRY glIsVertexArray (GLuint array);
  VKFUNDEFINE(glIsVertexArray);
  // GL_APICALL void GL_APIENTRY glGetIntegeri_v (GLenum target, GLuint index,
  // GLint *data);
  VKFUNDEFINE(glGetIntegeri_v);
  // GL_APICALL void GL_APIENTRY glBeginTransformFeedback (GLenum
  // primitiveMode);
  VKFUNDEFINE(glBeginTransformFeedback);
  // GL_APICALL void GL_APIENTRY glEndTransformFeedback (void);
  VKFUNDEFINE(glEndTransformFeedback);
  // GL_APICALL void GL_APIENTRY glBindBufferRange (GLenum target, GLuint index,
  // GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glBindBufferRange);
  // GL_APICALL void GL_APIENTRY glBindBufferBase (GLenum target, GLuint index,
  // GLuint buffer);
  VKFUNDEFINE(glBindBufferBase);
  // GL_APICALL void GL_APIENTRY glTransformFeedbackVaryings (GLuint program,
  // GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
  VKFUNDEFINE(glTransformFeedbackVaryings);
  // GL_APICALL void GL_APIENTRY glGetTransformFeedbackVarying (GLuint program,
  // GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum
  // *type, GLchar *name);
  VKFUNDEFINE(glGetTransformFeedbackVarying);
  // GL_APICALL void GL_APIENTRY glVertexAttribIPointer (GLuint index, GLint
  // size, GLenum type, GLsizei stride, const void *pointer);
  VKFUNDEFINE(glVertexAttribIPointer);
  // GL_APICALL void GL_APIENTRY glGetVertexAttribIiv (GLuint index, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetVertexAttribIiv);
  // GL_APICALL void GL_APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum
  // pname, GLuint *params);
  VKFUNDEFINE(glGetVertexAttribIuiv);
  // GL_APICALL void GL_APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint
  // y, GLint z, GLint w);
  VKFUNDEFINE(glVertexAttribI4i);
  // GL_APICALL void GL_APIENTRY glVertexAttribI4ui (GLuint index, GLuint x,
  // GLuint y, GLuint z, GLuint w);
  VKFUNDEFINE(glVertexAttribI4ui);
  // GL_APICALL void GL_APIENTRY glVertexAttribI4iv (GLuint index, const GLint
  // *v);
  VKFUNDEFINE(glVertexAttribI4iv);
  // GL_APICALL void GL_APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint
  // *v);
  VKFUNDEFINE(glVertexAttribI4uiv);
  // GL_APICALL void GL_APIENTRY glGetUniformuiv (GLuint program, GLint
  // location, GLuint *params);
  VKFUNDEFINE(glGetUniformuiv);
  // GL_APICALL GLint GL_APIENTRY glGetFragDataLocation (GLuint program, const
  // GLchar *name);
  VKFUNDEFINE(glGetFragDataLocation);
  // GL_APICALL void GL_APIENTRY glUniform1ui (GLint location, GLuint v0);
  VKFUNDEFINE(glUniform1ui);
  // GL_APICALL void GL_APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint
  // v1);
  VKFUNDEFINE(glUniform2ui);
  // GL_APICALL void GL_APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint
  // v1, GLuint v2);
  VKFUNDEFINE(glUniform3ui);
  // GL_APICALL void GL_APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint
  // v1, GLuint v2, GLuint v3);
  VKFUNDEFINE(glUniform4ui);
  // GL_APICALL void GL_APIENTRY glUniform1uiv (GLint location, GLsizei count,
  // const GLuint *value);
  VKFUNDEFINE(glUniform1uiv);
  // GL_APICALL void GL_APIENTRY glUniform2uiv (GLint location, GLsizei count,
  // const GLuint *value);
  VKFUNDEFINE(glUniform2uiv);
  // GL_APICALL void GL_APIENTRY glUniform3uiv (GLint location, GLsizei count,
  // const GLuint *value);
  VKFUNDEFINE(glUniform3uiv);
  // GL_APICALL void GL_APIENTRY glUniform4uiv (GLint location, GLsizei count,
  // const GLuint *value);
  VKFUNDEFINE(glUniform4uiv);
  // GL_APICALL void GL_APIENTRY glClearBufferiv (GLenum buffer, GLint
  // drawbuffer, const GLint *value);
  VKFUNDEFINE(glClearBufferiv);
  // GL_APICALL void GL_APIENTRY glClearBufferuiv (GLenum buffer, GLint
  // drawbuffer, const GLuint *value);
  VKFUNDEFINE(glClearBufferuiv);
  // GL_APICALL void GL_APIENTRY glClearBufferfv (GLenum buffer, GLint
  // drawbuffer, const GLfloat *value);
  VKFUNDEFINE(glClearBufferfv);
  // GL_APICALL void GL_APIENTRY glClearBufferfi (GLenum buffer, GLint
  // drawbuffer, GLfloat depth, GLint stencil);
  VKFUNDEFINE(glClearBufferfi);
  // GL_APICALL const GLubyte *GL_APIENTRY glGetStringi (GLenum name, GLuint
  // index);
  VKFUNDEFINE(glGetStringi);
  // GL_APICALL void GL_APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum
  // writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  VKFUNDEFINE(glCopyBufferSubData);
  // GL_APICALL void GL_APIENTRY glGetUniformIndices (GLuint program, GLsizei
  // uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
  VKFUNDEFINE(glGetUniformIndices);
  // GL_APICALL void GL_APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei
  // uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetActiveUniformsiv);
  // GL_APICALL GLuint GL_APIENTRY glGetUniformBlockIndex (GLuint program, const
  // GLchar *uniformBlockName);
  VKFUNDEFINE(glGetUniformBlockIndex);
  // GL_APICALL void GL_APIENTRY glGetActiveUniformBlockiv (GLuint program,
  // GLuint uniformBlockIndex, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetActiveUniformBlockiv);
  // GL_APICALL void GL_APIENTRY glGetActiveUniformBlockName (GLuint program,
  // GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar
  // *uniformBlockName);
  VKFUNDEFINE(glGetActiveUniformBlockName);
  // GL_APICALL void GL_APIENTRY glUniformBlockBinding (GLuint program, GLuint
  // uniformBlockIndex, GLuint uniformBlockBinding);
  VKFUNDEFINE(glUniformBlockBinding);
  // GL_APICALL void GL_APIENTRY glDrawArraysInstanced (GLenum mode, GLint
  // first, GLsizei count, GLsizei instancecount);
  VKFUNDEFINE(glDrawArraysInstanced);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei
  // count, GLenum type, const void *indices, GLsizei instancecount);
  VKFUNDEFINE(glDrawElementsInstanced);
  // GL_APICALL GLsync GL_APIENTRY glFenceSync (GLenum condition, GLbitfield
  // flags);
  VKFUNDEFINE(glFenceSync);
  // GL_APICALL GLboolean GL_APIENTRY glIsSync (GLsync sync);
  VKFUNDEFINE(glIsSync);
  // GL_APICALL void GL_APIENTRY glDeleteSync (GLsync sync);
  VKFUNDEFINE(glDeleteSync);
  // GL_APICALL GLenum GL_APIENTRY glClientWaitSync (GLsync sync, GLbitfield
  // flags, GLuint64 timeout);
  VKFUNDEFINE(glClientWaitSync);
  // GL_APICALL void GL_APIENTRY glWaitSync (GLsync sync, GLbitfield flags,
  // GLuint64 timeout);
  VKFUNDEFINE(glWaitSync);
  // GL_APICALL void GL_APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);
  VKFUNDEFINE(glGetInteger64v);
  // GL_APICALL void GL_APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei
  // count, GLsizei *length, GLint *values);
  VKFUNDEFINE(glGetSynciv);
  // GL_APICALL void GL_APIENTRY glGetInteger64i_v (GLenum target, GLuint index,
  // GLint64 *data);
  VKFUNDEFINE(glGetInteger64i_v);
  // GL_APICALL void GL_APIENTRY glGetBufferParameteri64v (GLenum target, GLenum
  // pname, GLint64 *params);
  VKFUNDEFINE(glGetBufferParameteri64v);
  // GL_APICALL void GL_APIENTRY glGenSamplers (GLsizei count, GLuint
  // *samplers);
  VKFUNDEFINE(glGenSamplers);
  // GL_APICALL void GL_APIENTRY glDeleteSamplers (GLsizei count, const GLuint
  // *samplers);
  VKFUNDEFINE(glDeleteSamplers);
  // GL_APICALL GLboolean GL_APIENTRY glIsSampler (GLuint sampler);
  VKFUNDEFINE(glIsSampler);
  // GL_APICALL void GL_APIENTRY glBindSampler (GLuint unit, GLuint sampler);
  VKFUNDEFINE(glBindSampler);
  // GL_APICALL void GL_APIENTRY glSamplerParameteri (GLuint sampler, GLenum
  // pname, GLint param);
  VKFUNDEFINE(glSamplerParameteri);
  // GL_APICALL void GL_APIENTRY glSamplerParameteriv (GLuint sampler, GLenum
  // pname, const GLint *param);
  VKFUNDEFINE(glSamplerParameteriv);
  // GL_APICALL void GL_APIENTRY glSamplerParameterf (GLuint sampler, GLenum
  // pname, GLfloat param);
  VKFUNDEFINE(glSamplerParameterf);
  // GL_APICALL void GL_APIENTRY glSamplerParameterfv (GLuint sampler, GLenum
  // pname, const GLfloat *param);
  VKFUNDEFINE(glSamplerParameterfv);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetSamplerParameteriv);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum
  // pname, GLfloat *params);
  VKFUNDEFINE(glGetSamplerParameterfv);
  // GL_APICALL void GL_APIENTRY glVertexAttribDivisor (GLuint index, GLuint
  // divisor);
  VKFUNDEFINE(glVertexAttribDivisor);
  // GL_APICALL void GL_APIENTRY glBindTransformFeedback (GLenum target, GLuint
  // id);
  VKFUNDEFINE(glBindTransformFeedback);
  // GL_APICALL void GL_APIENTRY glDeleteTransformFeedbacks (GLsizei n, const
  // GLuint *ids);
  VKFUNDEFINE(glDeleteTransformFeedbacks);
  // GL_APICALL void GL_APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint
  // *ids);
  VKFUNDEFINE(glGenTransformFeedbacks);
  // GL_APICALL GLboolean GL_APIENTRY glIsTransformFeedback (GLuint id);
  VKFUNDEFINE(glIsTransformFeedback);
  // GL_APICALL void GL_APIENTRY glPauseTransformFeedback (void);
  VKFUNDEFINE(glPauseTransformFeedback);
  // GL_APICALL void GL_APIENTRY glResumeTransformFeedback (void);
  VKFUNDEFINE(glResumeTransformFeedback);
  // GL_APICALL void GL_APIENTRY glGetProgramBinary (GLuint program, GLsizei
  // bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
  VKFUNDEFINE(glGetProgramBinary);
  // GL_APICALL void GL_APIENTRY glProgramBinary (GLuint program, GLenum
  // binaryFormat, const void *binary, GLsizei length);
  VKFUNDEFINE(glProgramBinary);
  // GL_APICALL void GL_APIENTRY glProgramParameteri (GLuint program, GLenum
  // pname, GLint value);
  VKFUNDEFINE(glProgramParameteri);
  // GL_APICALL void GL_APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei
  // numAttachments, const GLenum *attachments);
  VKFUNDEFINE(glInvalidateFramebuffer);
  // GL_APICALL void GL_APIENTRY glInvalidateSubFramebuffer (GLenum target,
  // GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y,
  // GLsizei width, GLsizei height);
  VKFUNDEFINE(glInvalidateSubFramebuffer);
  // GL_APICALL void GL_APIENTRY glTexStorage2D (GLenum target, GLsizei levels,
  // GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glTexStorage2D);
  // GL_APICALL void GL_APIENTRY glTexStorage3D (GLenum target, GLsizei levels,
  // GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
  VKFUNDEFINE(glTexStorage3D);
  // GL_APICALL void GL_APIENTRY glGetInternalformativ (GLenum target, GLenum
  // internalformat, GLenum pname, GLsizei count, GLint *params);
  VKFUNDEFINE(glGetInternalformativ);
  // GL_APICALL void GL_APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint
  // num_groups_y, GLuint num_groups_z);
  VKFUNDEFINE(glDispatchCompute);
  // GL_APICALL void GL_APIENTRY glDispatchComputeIndirect (GLintptr indirect);
  VKFUNDEFINE(glDispatchComputeIndirect);
  // GL_APICALL void GL_APIENTRY glDrawArraysIndirect (GLenum mode, const void
  // *indirect);
  VKFUNDEFINE(glDrawArraysIndirect);
  // GL_APICALL void GL_APIENTRY glDrawElementsIndirect (GLenum mode, GLenum
  // type, const void *indirect);
  VKFUNDEFINE(glDrawElementsIndirect);
  // GL_APICALL void GL_APIENTRY glFramebufferParameteri (GLenum target, GLenum
  // pname, GLint param);
  VKFUNDEFINE(glFramebufferParameteri);
  // GL_APICALL void GL_APIENTRY glGetFramebufferParameteriv (GLenum target,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferParameteriv);
  // GL_APICALL void GL_APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum
  // programInterface, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetProgramInterfaceiv);
  // GL_APICALL GLuint GL_APIENTRY glGetProgramResourceIndex (GLuint program,
  // GLenum programInterface, const GLchar *name);
  VKFUNDEFINE(glGetProgramResourceIndex);
  // GL_APICALL void GL_APIENTRY glGetProgramResourceName (GLuint program,
  // GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length,
  // GLchar *name);
  VKFUNDEFINE(glGetProgramResourceName);
  // GL_APICALL void GL_APIENTRY glGetProgramResourceiv (GLuint program, GLenum
  // programInterface, GLuint index, GLsizei propCount, const GLenum *props,
  // GLsizei count, GLsizei *length, GLint *params);
  VKFUNDEFINE(glGetProgramResourceiv);
  // GL_APICALL GLint GL_APIENTRY glGetProgramResourceLocation (GLuint program,
  // GLenum programInterface, const GLchar *name);
  VKFUNDEFINE(glGetProgramResourceLocation);
  // GL_APICALL void GL_APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield
  // stages, GLuint program);
  VKFUNDEFINE(glUseProgramStages);
  // GL_APICALL void GL_APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint
  // program);
  VKFUNDEFINE(glActiveShaderProgram);
  // GL_APICALL GLuint GL_APIENTRY glCreateShaderProgramv (GLenum type, GLsizei
  // count, const GLchar *const*strings);
  VKFUNDEFINE(glCreateShaderProgramv);
  // GL_APICALL void GL_APIENTRY glBindProgramPipeline (GLuint pipeline);
  VKFUNDEFINE(glBindProgramPipeline);
  // GL_APICALL void GL_APIENTRY glDeleteProgramPipelines (GLsizei n, const
  // GLuint *pipelines);
  VKFUNDEFINE(glDeleteProgramPipelines);
  // GL_APICALL void GL_APIENTRY glGenProgramPipelines (GLsizei n, GLuint
  // *pipelines);
  VKFUNDEFINE(glGenProgramPipelines);
  // GL_APICALL GLboolean GL_APIENTRY glIsProgramPipeline (GLuint pipeline);
  VKFUNDEFINE(glIsProgramPipeline);
  // GL_APICALL void GL_APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetProgramPipelineiv);
  // GL_APICALL void GL_APIENTRY glProgramUniform1i (GLuint program, GLint
  // location, GLint v0);
  VKFUNDEFINE(glProgramUniform1i);
  // GL_APICALL void GL_APIENTRY glProgramUniform2i (GLuint program, GLint
  // location, GLint v0, GLint v1);
  VKFUNDEFINE(glProgramUniform2i);
  // GL_APICALL void GL_APIENTRY glProgramUniform3i (GLuint program, GLint
  // location, GLint v0, GLint v1, GLint v2);
  VKFUNDEFINE(glProgramUniform3i);
  // GL_APICALL void GL_APIENTRY glProgramUniform4i (GLuint program, GLint
  // location, GLint v0, GLint v1, GLint v2, GLint v3);
  VKFUNDEFINE(glProgramUniform4i);
  // GL_APICALL void GL_APIENTRY glProgramUniform1ui (GLuint program, GLint
  // location, GLuint v0);
  VKFUNDEFINE(glProgramUniform1ui);
  // GL_APICALL void GL_APIENTRY glProgramUniform2ui (GLuint program, GLint
  // location, GLuint v0, GLuint v1);
  VKFUNDEFINE(glProgramUniform2ui);
  // GL_APICALL void GL_APIENTRY glProgramUniform3ui (GLuint program, GLint
  // location, GLuint v0, GLuint v1, GLuint v2);
  VKFUNDEFINE(glProgramUniform3ui);
  // GL_APICALL void GL_APIENTRY glProgramUniform4ui (GLuint program, GLint
  // location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  VKFUNDEFINE(glProgramUniform4ui);
  // GL_APICALL void GL_APIENTRY glProgramUniform1f (GLuint program, GLint
  // location, GLfloat v0);
  VKFUNDEFINE(glProgramUniform1f);
  // GL_APICALL void GL_APIENTRY glProgramUniform2f (GLuint program, GLint
  // location, GLfloat v0, GLfloat v1);
  VKFUNDEFINE(glProgramUniform2f);
  // GL_APICALL void GL_APIENTRY glProgramUniform3f (GLuint program, GLint
  // location, GLfloat v0, GLfloat v1, GLfloat v2);
  VKFUNDEFINE(glProgramUniform3f);
  // GL_APICALL void GL_APIENTRY glProgramUniform4f (GLuint program, GLint
  // location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  VKFUNDEFINE(glProgramUniform4f);
  // GL_APICALL void GL_APIENTRY glProgramUniform1iv (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform1iv);
  // GL_APICALL void GL_APIENTRY glProgramUniform2iv (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform2iv);
  // GL_APICALL void GL_APIENTRY glProgramUniform3iv (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform3iv);
  // GL_APICALL void GL_APIENTRY glProgramUniform4iv (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform4iv);
  // GL_APICALL void GL_APIENTRY glProgramUniform1uiv (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform1uiv);
  // GL_APICALL void GL_APIENTRY glProgramUniform2uiv (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform2uiv);
  // GL_APICALL void GL_APIENTRY glProgramUniform3uiv (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform3uiv);
  // GL_APICALL void GL_APIENTRY glProgramUniform4uiv (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform4uiv);
  // GL_APICALL void GL_APIENTRY glProgramUniform1fv (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform1fv);
  // GL_APICALL void GL_APIENTRY glProgramUniform2fv (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform2fv);
  // GL_APICALL void GL_APIENTRY glProgramUniform3fv (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform3fv);
  // GL_APICALL void GL_APIENTRY glProgramUniform4fv (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform4fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix2fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix3fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix4fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix2x3fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x3fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix3x2fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x2fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix2x4fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x4fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix4x2fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x2fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix3x4fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x4fv);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix4x3fv (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x3fv);
  // GL_APICALL void GL_APIENTRY glValidateProgramPipeline (GLuint pipeline);
  VKFUNDEFINE(glValidateProgramPipeline);
  // GL_APICALL void GL_APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline,
  // GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  VKFUNDEFINE(glGetProgramPipelineInfoLog);
  // GL_APICALL void GL_APIENTRY glBindImageTexture (GLuint unit, GLuint
  // texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum
  // format);
  VKFUNDEFINE(glBindImageTexture);
  // GL_APICALL void GL_APIENTRY glGetBooleani_v (GLenum target, GLuint index,
  // GLboolean *data);
  VKFUNDEFINE(glGetBooleani_v);
  // GL_APICALL void GL_APIENTRY glMemoryBarrier (GLbitfield barriers);
  VKFUNDEFINE(glMemoryBarrier);
  // GL_APICALL void GL_APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);
  VKFUNDEFINE(glMemoryBarrierByRegion);
  // GL_APICALL void GL_APIENTRY glTexStorage2DMultisample (GLenum target,
  // GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height,
  // GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTexStorage2DMultisample);
  // GL_APICALL void GL_APIENTRY glGetMultisamplefv (GLenum pname, GLuint index,
  // GLfloat *val);
  VKFUNDEFINE(glGetMultisamplefv);
  // GL_APICALL void GL_APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield
  // mask);
  VKFUNDEFINE(glSampleMaski);
  // GL_APICALL void GL_APIENTRY glGetTexLevelParameteriv (GLenum target, GLint
  // level, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetTexLevelParameteriv);
  // GL_APICALL void GL_APIENTRY glGetTexLevelParameterfv (GLenum target, GLint
  // level, GLenum pname, GLfloat *params);
  VKFUNDEFINE(glGetTexLevelParameterfv);
  // GL_APICALL void GL_APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint
  // buffer, GLintptr offset, GLsizei stride);
  VKFUNDEFINE(glBindVertexBuffer);
  // GL_APICALL void GL_APIENTRY glVertexAttribFormat (GLuint attribindex, GLint
  // size, GLenum type, GLboolean normalized, GLuint relativeoffset);
  VKFUNDEFINE(glVertexAttribFormat);
  // GL_APICALL void GL_APIENTRY glVertexAttribIFormat (GLuint attribindex,
  // GLint size, GLenum type, GLuint relativeoffset);
  VKFUNDEFINE(glVertexAttribIFormat);
  // GL_APICALL void GL_APIENTRY glVertexAttribBinding (GLuint attribindex,
  // GLuint bindingindex);
  VKFUNDEFINE(glVertexAttribBinding);
  // GL_APICALL void GL_APIENTRY glVertexBindingDivisor (GLuint bindingindex,
  // GLuint divisor);
  VKFUNDEFINE(glVertexBindingDivisor);
  // GL_APICALL void GL_APIENTRY glBlendBarrier (void);
  VKFUNDEFINE(glBlendBarrier);
  // GL_APICALL void GL_APIENTRY glCopyImageSubData (GLuint srcName, GLenum
  // srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint
  // dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint
  // dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
  VKFUNDEFINE(glCopyImageSubData);
  // GL_APICALL void GL_APIENTRY glDebugMessageControl (GLenum source, GLenum
  // type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean
  // enabled);
  VKFUNDEFINE(glDebugMessageControl);
  // GL_APICALL void GL_APIENTRY glDebugMessageInsert (GLenum source, GLenum
  // type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
  VKFUNDEFINE(glDebugMessageInsert);
  // GL_APICALL void GL_APIENTRY glDebugMessageCallback (GLDEBUGPROC callback,
  // const void *userParam);
  VKFUNDEFINE(glDebugMessageCallback);
  // GL_APICALL GLuint GL_APIENTRY glGetDebugMessageLog (GLuint count, GLsizei
  // bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities,
  // GLsizei *lengths, GLchar *messageLog);
  VKFUNDEFINE(glGetDebugMessageLog);
  // GL_APICALL void GL_APIENTRY glPushDebugGroup (GLenum source, GLuint id,
  // GLsizei length, const GLchar *message);
  VKFUNDEFINE(glPushDebugGroup);
  // GL_APICALL void GL_APIENTRY glPopDebugGroup (void);
  VKFUNDEFINE(glPopDebugGroup);
  // GL_APICALL void GL_APIENTRY glObjectLabel (GLenum identifier, GLuint name,
  // GLsizei length, const GLchar *label);
  VKFUNDEFINE(glObjectLabel);
  // GL_APICALL void GL_APIENTRY glGetObjectLabel (GLenum identifier, GLuint
  // name, GLsizei bufSize, GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectLabel);
  // GL_APICALL void GL_APIENTRY glObjectPtrLabel (const void *ptr, GLsizei
  // length, const GLchar *label);
  VKFUNDEFINE(glObjectPtrLabel);
  // GL_APICALL void GL_APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei
  // bufSize, GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectPtrLabel);
  // GL_APICALL void GL_APIENTRY glGetPointerv (GLenum pname, void **params);
  VKFUNDEFINE(glGetPointerv);
  // GL_APICALL void GL_APIENTRY glEnablei (GLenum target, GLuint index);
  VKFUNDEFINE(glEnablei);
  // GL_APICALL void GL_APIENTRY glDisablei (GLenum target, GLuint index);
  VKFUNDEFINE(glDisablei);
  // GL_APICALL void GL_APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
  VKFUNDEFINE(glBlendEquationi);
  // GL_APICALL void GL_APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum
  // modeRGB, GLenum modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparatei);
  // GL_APICALL void GL_APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum
  // dst);
  VKFUNDEFINE(glBlendFunci);
  // GL_APICALL void GL_APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum
  // srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  VKFUNDEFINE(glBlendFuncSeparatei);
  // GL_APICALL void GL_APIENTRY glColorMaski (GLuint index, GLboolean r,
  // GLboolean g, GLboolean b, GLboolean a);
  VKFUNDEFINE(glColorMaski);
  // GL_APICALL GLboolean GL_APIENTRY glIsEnabledi (GLenum target, GLuint
  // index);
  VKFUNDEFINE(glIsEnabledi);
  // GL_APICALL void GL_APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei
  // count, GLenum type, const void *indices, GLint basevertex);
  VKFUNDEFINE(glDrawElementsBaseVertex);
  // GL_APICALL void GL_APIENTRY glDrawRangeElementsBaseVertex (GLenum mode,
  // GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices,
  // GLint basevertex);
  VKFUNDEFINE(glDrawRangeElementsBaseVertex);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode,
  // GLsizei count, GLenum type, const void *indices, GLsizei instancecount,
  // GLint basevertex);
  VKFUNDEFINE(glDrawElementsInstancedBaseVertex);
  // GL_APICALL void GL_APIENTRY glFramebufferTexture (GLenum target, GLenum
  // attachment, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTexture);
  // GL_APICALL void GL_APIENTRY glPrimitiveBoundingBox (GLfloat minX, GLfloat
  // minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ,
  // GLfloat maxW);
  VKFUNDEFINE(glPrimitiveBoundingBox);
  // GL_APICALL GLenum GL_APIENTRY glGetGraphicsResetStatus (void);
  VKFUNDEFINE(glGetGraphicsResetStatus);
  // GL_APICALL void GL_APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width,
  // GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
  VKFUNDEFINE(glReadnPixels);
  // GL_APICALL void GL_APIENTRY glGetnUniformfv (GLuint program, GLint
  // location, GLsizei bufSize, GLfloat *params);
  VKFUNDEFINE(glGetnUniformfv);
  // GL_APICALL void GL_APIENTRY glGetnUniformiv (GLuint program, GLint
  // location, GLsizei bufSize, GLint *params);
  VKFUNDEFINE(glGetnUniformiv);
  // GL_APICALL void GL_APIENTRY glGetnUniformuiv (GLuint program, GLint
  // location, GLsizei bufSize, GLuint *params);
  VKFUNDEFINE(glGetnUniformuiv);
  // GL_APICALL void GL_APIENTRY glMinSampleShading (GLfloat value);
  VKFUNDEFINE(glMinSampleShading);
  // GL_APICALL void GL_APIENTRY glPatchParameteri (GLenum pname, GLint value);
  VKFUNDEFINE(glPatchParameteri);
  // GL_APICALL void GL_APIENTRY glTexParameterIiv (GLenum target, GLenum pname,
  // const GLint *params);
  VKFUNDEFINE(glTexParameterIiv);
  // GL_APICALL void GL_APIENTRY glTexParameterIuiv (GLenum target, GLenum
  // pname, const GLuint *params);
  VKFUNDEFINE(glTexParameterIuiv);
  // GL_APICALL void GL_APIENTRY glGetTexParameterIiv (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetTexParameterIiv);
  // GL_APICALL void GL_APIENTRY glGetTexParameterIuiv (GLenum target, GLenum
  // pname, GLuint *params);
  VKFUNDEFINE(glGetTexParameterIuiv);
  // GL_APICALL void GL_APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum
  // pname, const GLint *param);
  VKFUNDEFINE(glSamplerParameterIiv);
  // GL_APICALL void GL_APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum
  // pname, const GLuint *param);
  VKFUNDEFINE(glSamplerParameterIuiv);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameterIiv (GLuint sampler,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetSamplerParameterIiv);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameterIuiv (GLuint sampler,
  // GLenum pname, GLuint *params);
  VKFUNDEFINE(glGetSamplerParameterIuiv);
  // GL_APICALL void GL_APIENTRY glTexBuffer (GLenum target, GLenum
  // internalformat, GLuint buffer);
  VKFUNDEFINE(glTexBuffer);
  // GL_APICALL void GL_APIENTRY glTexBufferRange (GLenum target, GLenum
  // internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glTexBufferRange);
  // GL_APICALL void GL_APIENTRY glTexStorage3DMultisample (GLenum target,
  // GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height,
  // GLsizei depth, GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTexStorage3DMultisample);
  // GL_APICALL void GL_APIENTRY glBlendBarrierKHR (void);
  VKFUNDEFINE(glBlendBarrierKHR);
  // GL_APICALL void GL_APIENTRY glDebugMessageControlKHR (GLenum source, GLenum
  // type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean
  // enabled);
  VKFUNDEFINE(glDebugMessageControlKHR);
  // GL_APICALL void GL_APIENTRY glDebugMessageInsertKHR (GLenum source, GLenum
  // type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
  VKFUNDEFINE(glDebugMessageInsertKHR);
  // GL_APICALL void GL_APIENTRY glDebugMessageCallbackKHR (GLDEBUGPROCKHR
  // callback, const void *userParam);
  VKFUNDEFINE(glDebugMessageCallbackKHR);
  // GL_APICALL GLuint GL_APIENTRY glGetDebugMessageLogKHR (GLuint count,
  // GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum
  // *severities, GLsizei *lengths, GLchar *messageLog);
  VKFUNDEFINE(glGetDebugMessageLogKHR);
  // GL_APICALL void GL_APIENTRY glPushDebugGroupKHR (GLenum source, GLuint id,
  // GLsizei length, const GLchar *message);
  VKFUNDEFINE(glPushDebugGroupKHR);
  // GL_APICALL void GL_APIENTRY glPopDebugGroupKHR (void);
  VKFUNDEFINE(glPopDebugGroupKHR);
  // GL_APICALL void GL_APIENTRY glObjectLabelKHR (GLenum identifier, GLuint
  // name, GLsizei length, const GLchar *label);
  VKFUNDEFINE(glObjectLabelKHR);
  // GL_APICALL void GL_APIENTRY glGetObjectLabelKHR (GLenum identifier, GLuint
  // name, GLsizei bufSize, GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectLabelKHR);
  // GL_APICALL void GL_APIENTRY glObjectPtrLabelKHR (const void *ptr, GLsizei
  // length, const GLchar *label);
  VKFUNDEFINE(glObjectPtrLabelKHR);
  // GL_APICALL void GL_APIENTRY glGetObjectPtrLabelKHR (const void *ptr,
  // GLsizei bufSize, GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectPtrLabelKHR);
  // GL_APICALL void GL_APIENTRY glGetPointervKHR (GLenum pname, void **params);
  VKFUNDEFINE(glGetPointervKHR);
  // GL_APICALL void GL_APIENTRY glMaxShaderCompilerThreadsKHR (GLuint count);
  VKFUNDEFINE(glMaxShaderCompilerThreadsKHR);
  // GL_APICALL GLenum GL_APIENTRY glGetGraphicsResetStatusKHR (void);
  VKFUNDEFINE(glGetGraphicsResetStatusKHR);
  // GL_APICALL void GL_APIENTRY glReadnPixelsKHR (GLint x, GLint y, GLsizei
  // width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void
  // *data);
  VKFUNDEFINE(glReadnPixelsKHR);
  // GL_APICALL void GL_APIENTRY glGetnUniformfvKHR (GLuint program, GLint
  // location, GLsizei bufSize, GLfloat *params);
  VKFUNDEFINE(glGetnUniformfvKHR);
  // GL_APICALL void GL_APIENTRY glGetnUniformivKHR (GLuint program, GLint
  // location, GLsizei bufSize, GLint *params);
  VKFUNDEFINE(glGetnUniformivKHR);
  // GL_APICALL void GL_APIENTRY glGetnUniformuivKHR (GLuint program, GLint
  // location, GLsizei bufSize, GLuint *params);
  VKFUNDEFINE(glGetnUniformuivKHR);
  // GL_APICALL void GL_APIENTRY glEGLImageTargetTexture2DOES (GLenum target,
  // GLeglImageOES image);
  VKFUNDEFINE(glEGLImageTargetTexture2DOES);
  // GL_APICALL void GL_APIENTRY glEGLImageTargetRenderbufferStorageOES (GLenum
  // target, GLeglImageOES image);
  VKFUNDEFINE(glEGLImageTargetRenderbufferStorageOES);
  // GL_APICALL void GL_APIENTRY glCopyImageSubDataOES (GLuint srcName, GLenum
  // srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint
  // dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint
  // dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
  VKFUNDEFINE(glCopyImageSubDataOES);
  // GL_APICALL void GL_APIENTRY glEnableiOES (GLenum target, GLuint index);
  VKFUNDEFINE(glEnableiOES);
  // GL_APICALL void GL_APIENTRY glDisableiOES (GLenum target, GLuint index);
  VKFUNDEFINE(glDisableiOES);
  // GL_APICALL void GL_APIENTRY glBlendEquationiOES (GLuint buf, GLenum mode);
  VKFUNDEFINE(glBlendEquationiOES);
  // GL_APICALL void GL_APIENTRY glBlendEquationSeparateiOES (GLuint buf, GLenum
  // modeRGB, GLenum modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparateiOES);
  // GL_APICALL void GL_APIENTRY glBlendFunciOES (GLuint buf, GLenum src, GLenum
  // dst);
  VKFUNDEFINE(glBlendFunciOES);
  // GL_APICALL void GL_APIENTRY glBlendFuncSeparateiOES (GLuint buf, GLenum
  // srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  VKFUNDEFINE(glBlendFuncSeparateiOES);
  // GL_APICALL void GL_APIENTRY glColorMaskiOES (GLuint index, GLboolean r,
  // GLboolean g, GLboolean b, GLboolean a);
  VKFUNDEFINE(glColorMaskiOES);
  // GL_APICALL GLboolean GL_APIENTRY glIsEnablediOES (GLenum target, GLuint
  // index);
  VKFUNDEFINE(glIsEnablediOES);
  // GL_APICALL void GL_APIENTRY glDrawElementsBaseVertexOES (GLenum mode,
  // GLsizei count, GLenum type, const void *indices, GLint basevertex);
  VKFUNDEFINE(glDrawElementsBaseVertexOES);
  // GL_APICALL void GL_APIENTRY glDrawRangeElementsBaseVertexOES (GLenum mode,
  // GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices,
  // GLint basevertex);
  VKFUNDEFINE(glDrawRangeElementsBaseVertexOES);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstancedBaseVertexOES (GLenum
  // mode, GLsizei count, GLenum type, const void *indices, GLsizei
  // instancecount, GLint basevertex);
  VKFUNDEFINE(glDrawElementsInstancedBaseVertexOES);
  // GL_APICALL void GL_APIENTRY glMultiDrawElementsBaseVertexEXT (GLenum mode,
  // const GLsizei *count, GLenum type, const void *const*indices, GLsizei
  // drawcount, const GLint *basevertex);
  VKFUNDEFINE(glMultiDrawElementsBaseVertexEXT);
  // GL_APICALL void GL_APIENTRY glFramebufferTextureOES (GLenum target, GLenum
  // attachment, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTextureOES);
  // GL_APICALL void GL_APIENTRY glGetProgramBinaryOES (GLuint program, GLsizei
  // bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
  VKFUNDEFINE(glGetProgramBinaryOES);
  // GL_APICALL void GL_APIENTRY glProgramBinaryOES (GLuint program, GLenum
  // binaryFormat, const void *binary, GLint length);
  VKFUNDEFINE(glProgramBinaryOES);
  // GL_APICALL void *GL_APIENTRY glMapBufferOES (GLenum target, GLenum access);
  VKFUNDEFINE(glMapBufferOES);
  // GL_APICALL GLboolean GL_APIENTRY glUnmapBufferOES (GLenum target);
  VKFUNDEFINE(glUnmapBufferOES);
  // GL_APICALL void GL_APIENTRY glGetBufferPointervOES (GLenum target, GLenum
  // pname, void **params);
  VKFUNDEFINE(glGetBufferPointervOES);
  // GL_APICALL void GL_APIENTRY glPrimitiveBoundingBoxOES (GLfloat minX,
  // GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY,
  // GLfloat maxZ, GLfloat maxW);
  VKFUNDEFINE(glPrimitiveBoundingBoxOES);
  // GL_APICALL void GL_APIENTRY glMinSampleShadingOES (GLfloat value);
  VKFUNDEFINE(glMinSampleShadingOES);
  // GL_APICALL void GL_APIENTRY glPatchParameteriOES (GLenum pname, GLint
  // value);
  VKFUNDEFINE(glPatchParameteriOES);
  // GL_APICALL void GL_APIENTRY glTexImage3DOES (GLenum target, GLint level,
  // GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint
  // border, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexImage3DOES);
  // GL_APICALL void GL_APIENTRY glTexSubImage3DOES (GLenum target, GLint level,
  // GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
  // GLsizei depth, GLenum format, GLenum type, const void *pixels);
  VKFUNDEFINE(glTexSubImage3DOES);
  // GL_APICALL void GL_APIENTRY glCopyTexSubImage3DOES (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y,
  // GLsizei width, GLsizei height);
  VKFUNDEFINE(glCopyTexSubImage3DOES);
  // GL_APICALL void GL_APIENTRY glCompressedTexImage3DOES (GLenum target, GLint
  // level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth,
  // GLint border, GLsizei imageSize, const void *data);
  VKFUNDEFINE(glCompressedTexImage3DOES);
  // GL_APICALL void GL_APIENTRY glCompressedTexSubImage3DOES (GLenum target,
  // GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width,
  // GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void
  // *data);
  VKFUNDEFINE(glCompressedTexSubImage3DOES);
  // GL_APICALL void GL_APIENTRY glFramebufferTexture3DOES (GLenum target,
  // GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint
  // zoffset);
  VKFUNDEFINE(glFramebufferTexture3DOES);
  // GL_APICALL void GL_APIENTRY glTexParameterIivOES (GLenum target, GLenum
  // pname, const GLint *params);
  VKFUNDEFINE(glTexParameterIivOES);
  // GL_APICALL void GL_APIENTRY glTexParameterIuivOES (GLenum target, GLenum
  // pname, const GLuint *params);
  VKFUNDEFINE(glTexParameterIuivOES);
  // GL_APICALL void GL_APIENTRY glGetTexParameterIivOES (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetTexParameterIivOES);
  // GL_APICALL void GL_APIENTRY glGetTexParameterIuivOES (GLenum target, GLenum
  // pname, GLuint *params);
  VKFUNDEFINE(glGetTexParameterIuivOES);
  // GL_APICALL void GL_APIENTRY glSamplerParameterIivOES (GLuint sampler,
  // GLenum pname, const GLint *param);
  VKFUNDEFINE(glSamplerParameterIivOES);
  // GL_APICALL void GL_APIENTRY glSamplerParameterIuivOES (GLuint sampler,
  // GLenum pname, const GLuint *param);
  VKFUNDEFINE(glSamplerParameterIuivOES);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameterIivOES (GLuint sampler,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetSamplerParameterIivOES);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameterIuivOES (GLuint sampler,
  // GLenum pname, GLuint *params);
  VKFUNDEFINE(glGetSamplerParameterIuivOES);
  // GL_APICALL void GL_APIENTRY glTexBufferOES (GLenum target, GLenum
  // internalformat, GLuint buffer);
  VKFUNDEFINE(glTexBufferOES);
  // GL_APICALL void GL_APIENTRY glTexBufferRangeOES (GLenum target, GLenum
  // internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glTexBufferRangeOES);
  // GL_APICALL void GL_APIENTRY glTexStorage3DMultisampleOES (GLenum target,
  // GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height,
  // GLsizei depth, GLboolean fixedsamplelocations);
  VKFUNDEFINE(glTexStorage3DMultisampleOES);
  // GL_APICALL void GL_APIENTRY glTextureViewOES (GLuint texture, GLenum
  // target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint
  // numlevels, GLuint minlayer, GLuint numlayers);
  VKFUNDEFINE(glTextureViewOES);
  // GL_APICALL void GL_APIENTRY glBindVertexArrayOES (GLuint array);
  VKFUNDEFINE(glBindVertexArrayOES);
  // GL_APICALL void GL_APIENTRY glDeleteVertexArraysOES (GLsizei n, const
  // GLuint *arrays);
  VKFUNDEFINE(glDeleteVertexArraysOES);
  // GL_APICALL void GL_APIENTRY glGenVertexArraysOES (GLsizei n, GLuint
  // *arrays);
  VKFUNDEFINE(glGenVertexArraysOES);
  // GL_APICALL GLboolean GL_APIENTRY glIsVertexArrayOES (GLuint array);
  VKFUNDEFINE(glIsVertexArrayOES);
  // GL_APICALL void GL_APIENTRY glViewportArrayvOES (GLuint first, GLsizei
  // count, const GLfloat *v);
  VKFUNDEFINE(glViewportArrayvOES);
  // GL_APICALL void GL_APIENTRY glViewportIndexedfOES (GLuint index, GLfloat x,
  // GLfloat y, GLfloat w, GLfloat h);
  VKFUNDEFINE(glViewportIndexedfOES);
  // GL_APICALL void GL_APIENTRY glViewportIndexedfvOES (GLuint index, const
  // GLfloat *v);
  VKFUNDEFINE(glViewportIndexedfvOES);
  // GL_APICALL void GL_APIENTRY glScissorArrayvOES (GLuint first, GLsizei
  // count, const GLint *v);
  VKFUNDEFINE(glScissorArrayvOES);
  // GL_APICALL void GL_APIENTRY glScissorIndexedOES (GLuint index, GLint left,
  // GLint bottom, GLsizei width, GLsizei height);
  VKFUNDEFINE(glScissorIndexedOES);
  // GL_APICALL void GL_APIENTRY glScissorIndexedvOES (GLuint index, const GLint
  // *v);
  VKFUNDEFINE(glScissorIndexedvOES);
  // GL_APICALL void GL_APIENTRY glDepthRangeArrayfvOES (GLuint first, GLsizei
  // count, const GLfloat *v);
  VKFUNDEFINE(glDepthRangeArrayfvOES);
  // GL_APICALL void GL_APIENTRY glDepthRangeIndexedfOES (GLuint index, GLfloat
  // n, GLfloat f);
  VKFUNDEFINE(glDepthRangeIndexedfOES);
  // GL_APICALL void GL_APIENTRY glGetFloati_vOES (GLenum target, GLuint index,
  // GLfloat *data);
  VKFUNDEFINE(glGetFloati_vOES);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleAdvancedAMD
  // (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum
  // internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleAdvancedAMD);
  // GL_APICALL void GL_APIENTRY
  // glNamedRenderbufferStorageMultisampleAdvancedAMD (GLuint renderbuffer,
  // GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei
  // width, GLsizei height);
  VKFUNDEFINE(glNamedRenderbufferStorageMultisampleAdvancedAMD);
  // GL_APICALL void GL_APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups,
  // GLsizei groupsSize, GLuint *groups);
  VKFUNDEFINE(glGetPerfMonitorGroupsAMD);
  // GL_APICALL void GL_APIENTRY glGetPerfMonitorCountersAMD (GLuint group,
  // GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint
  // *counters);
  VKFUNDEFINE(glGetPerfMonitorCountersAMD);
  // GL_APICALL void GL_APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group,
  // GLsizei bufSize, GLsizei *length, GLchar *groupString);
  VKFUNDEFINE(glGetPerfMonitorGroupStringAMD);
  // GL_APICALL void GL_APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group,
  // GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
  VKFUNDEFINE(glGetPerfMonitorCounterStringAMD);
  // GL_APICALL void GL_APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group,
  // GLuint counter, GLenum pname, void *data);
  VKFUNDEFINE(glGetPerfMonitorCounterInfoAMD);
  // GL_APICALL void GL_APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint
  // *monitors);
  VKFUNDEFINE(glGenPerfMonitorsAMD);
  // GL_APICALL void GL_APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint
  // *monitors);
  VKFUNDEFINE(glDeletePerfMonitorsAMD);
  // GL_APICALL void GL_APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor,
  // GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
  VKFUNDEFINE(glSelectPerfMonitorCountersAMD);
  // GL_APICALL void GL_APIENTRY glBeginPerfMonitorAMD (GLuint monitor);
  VKFUNDEFINE(glBeginPerfMonitorAMD);
  // GL_APICALL void GL_APIENTRY glEndPerfMonitorAMD (GLuint monitor);
  VKFUNDEFINE(glEndPerfMonitorAMD);
  // GL_APICALL void GL_APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor,
  // GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
  VKFUNDEFINE(glGetPerfMonitorCounterDataAMD);
  // GL_APICALL void GL_APIENTRY glBlitFramebufferANGLE (GLint srcX0, GLint
  // srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1,
  // GLint dstY1, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebufferANGLE);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleANGLE (GLenum
  // target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleANGLE);
  // GL_APICALL void GL_APIENTRY glDrawArraysInstancedANGLE (GLenum mode, GLint
  // first, GLsizei count, GLsizei primcount);
  VKFUNDEFINE(glDrawArraysInstancedANGLE);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstancedANGLE (GLenum mode,
  // GLsizei count, GLenum type, const void *indices, GLsizei primcount);
  VKFUNDEFINE(glDrawElementsInstancedANGLE);
  // GL_APICALL void GL_APIENTRY glVertexAttribDivisorANGLE (GLuint index,
  // GLuint divisor);
  VKFUNDEFINE(glVertexAttribDivisorANGLE);
  // GL_APICALL void GL_APIENTRY glGetTranslatedShaderSourceANGLE (GLuint
  // shader, GLsizei bufSize, GLsizei *length, GLchar *source);
  VKFUNDEFINE(glGetTranslatedShaderSourceANGLE);
  // GL_APICALL void GL_APIENTRY glCopyTextureLevelsAPPLE (GLuint
  // destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei
  // sourceLevelCount);
  VKFUNDEFINE(glCopyTextureLevelsAPPLE);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleAPPLE (GLenum
  // target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleAPPLE);
  // GL_APICALL void GL_APIENTRY glResolveMultisampleFramebufferAPPLE (void);
  VKFUNDEFINE(glResolveMultisampleFramebufferAPPLE);
  // GL_APICALL GLsync GL_APIENTRY glFenceSyncAPPLE (GLenum condition,
  // GLbitfield flags);
  VKFUNDEFINE(glFenceSyncAPPLE);
  // GL_APICALL GLboolean GL_APIENTRY glIsSyncAPPLE (GLsync sync);
  VKFUNDEFINE(glIsSyncAPPLE);
  // GL_APICALL void GL_APIENTRY glDeleteSyncAPPLE (GLsync sync);
  VKFUNDEFINE(glDeleteSyncAPPLE);
  // GL_APICALL GLenum GL_APIENTRY glClientWaitSyncAPPLE (GLsync sync,
  // GLbitfield flags, GLuint64 timeout);
  VKFUNDEFINE(glClientWaitSyncAPPLE);
  // GL_APICALL void GL_APIENTRY glWaitSyncAPPLE (GLsync sync, GLbitfield flags,
  // GLuint64 timeout);
  VKFUNDEFINE(glWaitSyncAPPLE);
  // GL_APICALL void GL_APIENTRY glGetInteger64vAPPLE (GLenum pname, GLint64
  // *params);
  VKFUNDEFINE(glGetInteger64vAPPLE);
  // GL_APICALL void GL_APIENTRY glGetSyncivAPPLE (GLsync sync, GLenum pname,
  // GLsizei count, GLsizei *length, GLint *values);
  VKFUNDEFINE(glGetSyncivAPPLE);
  // GL_APICALL void GL_APIENTRY glMaxActiveShaderCoresARM (GLuint count);
  VKFUNDEFINE(glMaxActiveShaderCoresARM);
  // GL_APICALL void GL_APIENTRY glEGLImageTargetTexStorageEXT (GLenum target,
  // GLeglImageOES image, const GLint* attrib_list);
  VKFUNDEFINE(glEGLImageTargetTexStorageEXT);
  // GL_APICALL void GL_APIENTRY glEGLImageTargetTextureStorageEXT (GLuint
  // texture, GLeglImageOES image, const GLint* attrib_list);
  VKFUNDEFINE(glEGLImageTargetTextureStorageEXT);
  // GL_APICALL void GL_APIENTRY glDrawArraysInstancedBaseInstanceEXT (GLenum
  // mode, GLint first, GLsizei count, GLsizei instancecount, GLuint
  // baseinstance);
  VKFUNDEFINE(glDrawArraysInstancedBaseInstanceEXT);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstancedBaseInstanceEXT (GLenum
  // mode, GLsizei count, GLenum type, const void *indices, GLsizei
  // instancecount, GLuint baseinstance);
  VKFUNDEFINE(glDrawElementsInstancedBaseInstanceEXT);
  // GL_APICALL void GL_APIENTRY
  // glDrawElementsInstancedBaseVertexBaseInstanceEXT (GLenum mode, GLsizei
  // count, GLenum type, const void *indices, GLsizei instancecount, GLint
  // basevertex, GLuint baseinstance);
  VKFUNDEFINE(glDrawElementsInstancedBaseVertexBaseInstanceEXT);
  // GL_APICALL void GL_APIENTRY glBindFragDataLocationIndexedEXT (GLuint
  // program, GLuint colorNumber, GLuint index, const GLchar *name);
  VKFUNDEFINE(glBindFragDataLocationIndexedEXT);
  // GL_APICALL void GL_APIENTRY glBindFragDataLocationEXT (GLuint program,
  // GLuint color, const GLchar *name);
  VKFUNDEFINE(glBindFragDataLocationEXT);
  // GL_APICALL GLint GL_APIENTRY glGetProgramResourceLocationIndexEXT (GLuint
  // program, GLenum programInterface, const GLchar *name);
  VKFUNDEFINE(glGetProgramResourceLocationIndexEXT);
  // GL_APICALL GLint GL_APIENTRY glGetFragDataIndexEXT (GLuint program, const
  // GLchar *name);
  VKFUNDEFINE(glGetFragDataIndexEXT);
  // GL_APICALL void GL_APIENTRY glBufferStorageEXT (GLenum target, GLsizeiptr
  // size, const void *data, GLbitfield flags);
  VKFUNDEFINE(glBufferStorageEXT);
  // GL_APICALL void GL_APIENTRY glClearTexImageEXT (GLuint texture, GLint
  // level, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glClearTexImageEXT);
  // GL_APICALL void GL_APIENTRY glClearTexSubImageEXT (GLuint texture, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLenum format, GLenum type, const void *data);
  VKFUNDEFINE(glClearTexSubImageEXT);
  // GL_APICALL void GL_APIENTRY glClipControlEXT (GLenum origin, GLenum depth);
  VKFUNDEFINE(glClipControlEXT);
  // GL_APICALL void GL_APIENTRY glCopyImageSubDataEXT (GLuint srcName, GLenum
  // srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint
  // dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint
  // dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
  VKFUNDEFINE(glCopyImageSubDataEXT);
  // GL_APICALL void GL_APIENTRY glLabelObjectEXT (GLenum type, GLuint object,
  // GLsizei length, const GLchar *label);
  VKFUNDEFINE(glLabelObjectEXT);
  // GL_APICALL void GL_APIENTRY glGetObjectLabelEXT (GLenum type, GLuint
  // object, GLsizei bufSize, GLsizei *length, GLchar *label);
  VKFUNDEFINE(glGetObjectLabelEXT);
  // GL_APICALL void GL_APIENTRY glInsertEventMarkerEXT (GLsizei length, const
  // GLchar *marker);
  VKFUNDEFINE(glInsertEventMarkerEXT);
  // GL_APICALL void GL_APIENTRY glPushGroupMarkerEXT (GLsizei length, const
  // GLchar *marker);
  VKFUNDEFINE(glPushGroupMarkerEXT);
  // GL_APICALL void GL_APIENTRY glPopGroupMarkerEXT (void);
  VKFUNDEFINE(glPopGroupMarkerEXT);
  // GL_APICALL void GL_APIENTRY glDiscardFramebufferEXT (GLenum target, GLsizei
  // numAttachments, const GLenum *attachments);
  VKFUNDEFINE(glDiscardFramebufferEXT);
  // GL_APICALL void GL_APIENTRY glGenQueriesEXT (GLsizei n, GLuint *ids);
  VKFUNDEFINE(glGenQueriesEXT);
  // GL_APICALL void GL_APIENTRY glDeleteQueriesEXT (GLsizei n, const GLuint
  // *ids);
  VKFUNDEFINE(glDeleteQueriesEXT);
  // GL_APICALL GLboolean GL_APIENTRY glIsQueryEXT (GLuint id);
  VKFUNDEFINE(glIsQueryEXT);
  // GL_APICALL void GL_APIENTRY glBeginQueryEXT (GLenum target, GLuint id);
  VKFUNDEFINE(glBeginQueryEXT);
  // GL_APICALL void GL_APIENTRY glEndQueryEXT (GLenum target);
  VKFUNDEFINE(glEndQueryEXT);
  // GL_APICALL void GL_APIENTRY glQueryCounterEXT (GLuint id, GLenum target);
  VKFUNDEFINE(glQueryCounterEXT);
  // GL_APICALL void GL_APIENTRY glGetQueryivEXT (GLenum target, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetQueryivEXT);
  // GL_APICALL void GL_APIENTRY glGetQueryObjectivEXT (GLuint id, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetQueryObjectivEXT);
  // GL_APICALL void GL_APIENTRY glGetQueryObjectuivEXT (GLuint id, GLenum
  // pname, GLuint *params);
  VKFUNDEFINE(glGetQueryObjectuivEXT);
  // GL_APICALL void GL_APIENTRY glGetQueryObjecti64vEXT (GLuint id, GLenum
  // pname, GLint64 *params);
  VKFUNDEFINE(glGetQueryObjecti64vEXT);
  // GL_APICALL void GL_APIENTRY glGetQueryObjectui64vEXT (GLuint id, GLenum
  // pname, GLuint64 *params);
  VKFUNDEFINE(glGetQueryObjectui64vEXT);
  // GL_APICALL void GL_APIENTRY glGetInteger64vEXT (GLenum pname, GLint64
  // *data);
  VKFUNDEFINE(glGetInteger64vEXT);
  // GL_APICALL void GL_APIENTRY glDrawBuffersEXT (GLsizei n, const GLenum
  // *bufs);
  VKFUNDEFINE(glDrawBuffersEXT);
  // GL_APICALL void GL_APIENTRY glEnableiEXT (GLenum target, GLuint index);
  VKFUNDEFINE(glEnableiEXT);
  // GL_APICALL void GL_APIENTRY glDisableiEXT (GLenum target, GLuint index);
  VKFUNDEFINE(glDisableiEXT);
  // GL_APICALL void GL_APIENTRY glBlendEquationiEXT (GLuint buf, GLenum mode);
  VKFUNDEFINE(glBlendEquationiEXT);
  // GL_APICALL void GL_APIENTRY glBlendEquationSeparateiEXT (GLuint buf, GLenum
  // modeRGB, GLenum modeAlpha);
  VKFUNDEFINE(glBlendEquationSeparateiEXT);
  // GL_APICALL void GL_APIENTRY glBlendFunciEXT (GLuint buf, GLenum src, GLenum
  // dst);
  VKFUNDEFINE(glBlendFunciEXT);
  // GL_APICALL void GL_APIENTRY glBlendFuncSeparateiEXT (GLuint buf, GLenum
  // srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  VKFUNDEFINE(glBlendFuncSeparateiEXT);
  // GL_APICALL void GL_APIENTRY glColorMaskiEXT (GLuint index, GLboolean r,
  // GLboolean g, GLboolean b, GLboolean a);
  VKFUNDEFINE(glColorMaskiEXT);
  // GL_APICALL GLboolean GL_APIENTRY glIsEnablediEXT (GLenum target, GLuint
  // index);
  VKFUNDEFINE(glIsEnablediEXT);
  // GL_APICALL void GL_APIENTRY glDrawElementsBaseVertexEXT (GLenum mode,
  // GLsizei count, GLenum type, const void *indices, GLint basevertex);
  VKFUNDEFINE(glDrawElementsBaseVertexEXT);
  // GL_APICALL void GL_APIENTRY glDrawRangeElementsBaseVertexEXT (GLenum mode,
  // GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices,
  // GLint basevertex);
  VKFUNDEFINE(glDrawRangeElementsBaseVertexEXT);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstancedBaseVertexEXT (GLenum
  // mode, GLsizei count, GLenum type, const void *indices, GLsizei
  // instancecount, GLint basevertex);
  VKFUNDEFINE(glDrawElementsInstancedBaseVertexEXT);
  // GL_APICALL void GL_APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint
  // start, GLsizei count, GLsizei primcount);
  VKFUNDEFINE(glDrawArraysInstancedEXT);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstancedEXT (GLenum mode,
  // GLsizei count, GLenum type, const void *indices, GLsizei primcount);
  VKFUNDEFINE(glDrawElementsInstancedEXT);
  // GL_APICALL void GL_APIENTRY glDrawTransformFeedbackEXT (GLenum mode, GLuint
  // id);
  VKFUNDEFINE(glDrawTransformFeedbackEXT);
  // GL_APICALL void GL_APIENTRY glDrawTransformFeedbackInstancedEXT (GLenum
  // mode, GLuint id, GLsizei instancecount);
  VKFUNDEFINE(glDrawTransformFeedbackInstancedEXT);
  // GL_APICALL void GL_APIENTRY glBufferStorageExternalEXT (GLenum target,
  // GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer,
  // GLbitfield flags);
  VKFUNDEFINE(glBufferStorageExternalEXT);
  // GL_APICALL void GL_APIENTRY glNamedBufferStorageExternalEXT (GLuint buffer,
  // GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer,
  // GLbitfield flags);
  VKFUNDEFINE(glNamedBufferStorageExternalEXT);
  // GL_APICALL void GL_APIENTRY glGetFragmentShadingRatesEXT (GLsizei samples,
  // GLsizei maxCount, GLsizei *count, GLenum *shadingRates);
  VKFUNDEFINE(glGetFragmentShadingRatesEXT);
  // GL_APICALL void GL_APIENTRY glShadingRateEXT (GLenum rate);
  VKFUNDEFINE(glShadingRateEXT);
  // GL_APICALL void GL_APIENTRY glShadingRateCombinerOpsEXT (GLenum
  // combinerOp0, GLenum combinerOp1);
  VKFUNDEFINE(glShadingRateCombinerOpsEXT);
  // GL_APICALL void GL_APIENTRY glFramebufferShadingRateEXT (GLenum target,
  // GLenum attachment, GLuint texture, GLint baseLayer, GLsizei numLayers,
  // GLsizei texelWidth, GLsizei texelHeight);
  VKFUNDEFINE(glFramebufferShadingRateEXT);
  // GL_APICALL void GL_APIENTRY glBlitFramebufferLayersEXT (GLint srcX0, GLint
  // srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1,
  // GLint dstY1, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebufferLayersEXT);
  // GL_APICALL void GL_APIENTRY glBlitFramebufferLayerEXT (GLint srcX0, GLint
  // srcY0, GLint srcX1, GLint srcY1, GLint srcLayer, GLint dstX0, GLint dstY0,
  // GLint dstX1, GLint dstY1, GLint dstLayer, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebufferLayerEXT);
  // GL_APICALL void GL_APIENTRY glFramebufferTextureEXT (GLenum target, GLenum
  // attachment, GLuint texture, GLint level);
  VKFUNDEFINE(glFramebufferTextureEXT);
  // GL_APICALL void GL_APIENTRY glVertexAttribDivisorEXT (GLuint index, GLuint
  // divisor);
  VKFUNDEFINE(glVertexAttribDivisorEXT);
  // GL_APICALL void *GL_APIENTRY glMapBufferRangeEXT (GLenum target, GLintptr
  // offset, GLsizeiptr length, GLbitfield access);
  VKFUNDEFINE(glMapBufferRangeEXT);
  // GL_APICALL void GL_APIENTRY glFlushMappedBufferRangeEXT (GLenum target,
  // GLintptr offset, GLsizeiptr length);
  VKFUNDEFINE(glFlushMappedBufferRangeEXT);
  // GL_APICALL void GL_APIENTRY glGetUnsignedBytevEXT (GLenum pname, GLubyte
  // *data);
  VKFUNDEFINE(glGetUnsignedBytevEXT);
  // GL_APICALL void GL_APIENTRY glGetUnsignedBytei_vEXT (GLenum target, GLuint
  // index, GLubyte *data);
  VKFUNDEFINE(glGetUnsignedBytei_vEXT);
  // GL_APICALL void GL_APIENTRY glDeleteMemoryObjectsEXT (GLsizei n, const
  // GLuint *memoryObjects);
  VKFUNDEFINE(glDeleteMemoryObjectsEXT);
  // GL_APICALL GLboolean GL_APIENTRY glIsMemoryObjectEXT (GLuint memoryObject);
  VKFUNDEFINE(glIsMemoryObjectEXT);
  // GL_APICALL void GL_APIENTRY glCreateMemoryObjectsEXT (GLsizei n, GLuint
  // *memoryObjects);
  VKFUNDEFINE(glCreateMemoryObjectsEXT);
  // GL_APICALL void GL_APIENTRY glMemoryObjectParameterivEXT (GLuint
  // memoryObject, GLenum pname, const GLint *params);
  VKFUNDEFINE(glMemoryObjectParameterivEXT);
  // GL_APICALL void GL_APIENTRY glGetMemoryObjectParameterivEXT (GLuint
  // memoryObject, GLenum pname, GLint *params);
  VKFUNDEFINE(glGetMemoryObjectParameterivEXT);
  // GL_APICALL void GL_APIENTRY glTexStorageMem2DEXT (GLenum target, GLsizei
  // levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint
  // memory, GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem2DEXT);
  // GL_APICALL void GL_APIENTRY glTexStorageMem2DMultisampleEXT (GLenum target,
  // GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height,
  // GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem2DMultisampleEXT);
  // GL_APICALL void GL_APIENTRY glTexStorageMem3DEXT (GLenum target, GLsizei
  // levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei
  // depth, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTexStorageMem3DEXT);
  // GL_APICALL void GL_APIENTRY glTexStorageMem3DMultisampleEXT (GLenum target,
  // GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height,
  // GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64
  // offset);
  VKFUNDEFINE(glTexStorageMem3DMultisampleEXT);
  // GL_APICALL void GL_APIENTRY glBufferStorageMemEXT (GLenum target,
  // GLsizeiptr size, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glBufferStorageMemEXT);
  // GL_APICALL void GL_APIENTRY glTextureStorageMem2DEXT (GLuint texture,
  // GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height,
  // GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTextureStorageMem2DEXT);
  // GL_APICALL void GL_APIENTRY glTextureStorageMem2DMultisampleEXT (GLuint
  // texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei
  // height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTextureStorageMem2DMultisampleEXT);
  // GL_APICALL void GL_APIENTRY glTextureStorageMem3DEXT (GLuint texture,
  // GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height,
  // GLsizei depth, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glTextureStorageMem3DEXT);
  // GL_APICALL void GL_APIENTRY glTextureStorageMem3DMultisampleEXT (GLuint
  // texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei
  // height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory,
  // GLuint64 offset);
  VKFUNDEFINE(glTextureStorageMem3DMultisampleEXT);
  // GL_APICALL void GL_APIENTRY glNamedBufferStorageMemEXT (GLuint buffer,
  // GLsizeiptr size, GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glNamedBufferStorageMemEXT);
  // GL_APICALL void GL_APIENTRY glImportMemoryFdEXT (GLuint memory, GLuint64
  // size, GLenum handleType, GLint fd);
  VKFUNDEFINE(glImportMemoryFdEXT);
  // GL_APICALL void GL_APIENTRY glImportMemoryWin32HandleEXT (GLuint memory,
  // GLuint64 size, GLenum handleType, void *handle);
  VKFUNDEFINE(glImportMemoryWin32HandleEXT);
  // GL_APICALL void GL_APIENTRY glImportMemoryWin32NameEXT (GLuint memory,
  // GLuint64 size, GLenum handleType, const void *name);
  VKFUNDEFINE(glImportMemoryWin32NameEXT);
  // GL_APICALL void GL_APIENTRY glMultiDrawArraysEXT (GLenum mode, const GLint
  // *first, const GLsizei *count, GLsizei primcount);
  VKFUNDEFINE(glMultiDrawArraysEXT);
  // GL_APICALL void GL_APIENTRY glMultiDrawElementsEXT (GLenum mode, const
  // GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);
  VKFUNDEFINE(glMultiDrawElementsEXT);
  // GL_APICALL void GL_APIENTRY glMultiDrawArraysIndirectEXT (GLenum mode,
  // const void *indirect, GLsizei drawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawArraysIndirectEXT);
  // GL_APICALL void GL_APIENTRY glMultiDrawElementsIndirectEXT (GLenum mode,
  // GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawElementsIndirectEXT);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleEXT (GLenum
  // target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleEXT);
  // GL_APICALL void GL_APIENTRY glFramebufferTexture2DMultisampleEXT (GLenum
  // target, GLenum attachment, GLenum textarget, GLuint texture, GLint level,
  // GLsizei samples);
  VKFUNDEFINE(glFramebufferTexture2DMultisampleEXT);
  // GL_APICALL void GL_APIENTRY glReadBufferIndexedEXT (GLenum src, GLint
  // index);
  VKFUNDEFINE(glReadBufferIndexedEXT);
  // GL_APICALL void GL_APIENTRY glDrawBuffersIndexedEXT (GLint n, const GLenum
  // *location, const GLint *indices);
  VKFUNDEFINE(glDrawBuffersIndexedEXT);
  // GL_APICALL void GL_APIENTRY glGetIntegeri_vEXT (GLenum target, GLuint
  // index, GLint *data);
  VKFUNDEFINE(glGetIntegeri_vEXT);
  // GL_APICALL void GL_APIENTRY glPolygonOffsetClampEXT (GLfloat factor,
  // GLfloat units, GLfloat clamp);
  VKFUNDEFINE(glPolygonOffsetClampEXT);
  // GL_APICALL void GL_APIENTRY glPrimitiveBoundingBoxEXT (GLfloat minX,
  // GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY,
  // GLfloat maxZ, GLfloat maxW);
  VKFUNDEFINE(glPrimitiveBoundingBoxEXT);
  // GL_APICALL void GL_APIENTRY glRasterSamplesEXT (GLuint samples, GLboolean
  // fixedsamplelocations);
  VKFUNDEFINE(glRasterSamplesEXT);
  // GL_APICALL GLenum GL_APIENTRY glGetGraphicsResetStatusEXT (void);
  VKFUNDEFINE(glGetGraphicsResetStatusEXT);
  // GL_APICALL void GL_APIENTRY glReadnPixelsEXT (GLint x, GLint y, GLsizei
  // width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void
  // *data);
  VKFUNDEFINE(glReadnPixelsEXT);
  // GL_APICALL void GL_APIENTRY glGetnUniformfvEXT (GLuint program, GLint
  // location, GLsizei bufSize, GLfloat *params);
  VKFUNDEFINE(glGetnUniformfvEXT);
  // GL_APICALL void GL_APIENTRY glGetnUniformivEXT (GLuint program, GLint
  // location, GLsizei bufSize, GLint *params);
  VKFUNDEFINE(glGetnUniformivEXT);
  // GL_APICALL void GL_APIENTRY glGenSemaphoresEXT (GLsizei n, GLuint
  // *semaphores);
  VKFUNDEFINE(glGenSemaphoresEXT);
  // GL_APICALL void GL_APIENTRY glDeleteSemaphoresEXT (GLsizei n, const GLuint
  // *semaphores);
  VKFUNDEFINE(glDeleteSemaphoresEXT);
  // GL_APICALL GLboolean GL_APIENTRY glIsSemaphoreEXT (GLuint semaphore);
  VKFUNDEFINE(glIsSemaphoreEXT);
  // GL_APICALL void GL_APIENTRY glSemaphoreParameterui64vEXT (GLuint semaphore,
  // GLenum pname, const GLuint64 *params);
  VKFUNDEFINE(glSemaphoreParameterui64vEXT);
  // GL_APICALL void GL_APIENTRY glGetSemaphoreParameterui64vEXT (GLuint
  // semaphore, GLenum pname, GLuint64 *params);
  VKFUNDEFINE(glGetSemaphoreParameterui64vEXT);
  // GL_APICALL void GL_APIENTRY glWaitSemaphoreEXT (GLuint semaphore, GLuint
  // numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const
  // GLuint *textures, const GLenum *srcLayouts);
  VKFUNDEFINE(glWaitSemaphoreEXT);
  // GL_APICALL void GL_APIENTRY glSignalSemaphoreEXT (GLuint semaphore, GLuint
  // numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const
  // GLuint *textures, const GLenum *dstLayouts);
  VKFUNDEFINE(glSignalSemaphoreEXT);
  // GL_APICALL void GL_APIENTRY glImportSemaphoreFdEXT (GLuint semaphore,
  // GLenum handleType, GLint fd);
  VKFUNDEFINE(glImportSemaphoreFdEXT);
  // GL_APICALL void GL_APIENTRY glImportSemaphoreWin32HandleEXT (GLuint
  // semaphore, GLenum handleType, void *handle);
  VKFUNDEFINE(glImportSemaphoreWin32HandleEXT);
  // GL_APICALL void GL_APIENTRY glImportSemaphoreWin32NameEXT (GLuint
  // semaphore, GLenum handleType, const void *name);
  VKFUNDEFINE(glImportSemaphoreWin32NameEXT);
  // GL_APICALL void GL_APIENTRY glActiveShaderProgramEXT (GLuint pipeline,
  // GLuint program);
  VKFUNDEFINE(glActiveShaderProgramEXT);
  // GL_APICALL void GL_APIENTRY glBindProgramPipelineEXT (GLuint pipeline);
  VKFUNDEFINE(glBindProgramPipelineEXT);
  // GL_APICALL GLuint GL_APIENTRY glCreateShaderProgramvEXT (GLenum type,
  // GLsizei count, const GLchar *const*strings);
  VKFUNDEFINE(glCreateShaderProgramvEXT);
  // GL_APICALL void GL_APIENTRY glDeleteProgramPipelinesEXT (GLsizei n, const
  // GLuint *pipelines);
  VKFUNDEFINE(glDeleteProgramPipelinesEXT);
  // GL_APICALL void GL_APIENTRY glGenProgramPipelinesEXT (GLsizei n, GLuint
  // *pipelines);
  VKFUNDEFINE(glGenProgramPipelinesEXT);
  // GL_APICALL void GL_APIENTRY glGetProgramPipelineInfoLogEXT (GLuint
  // pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  VKFUNDEFINE(glGetProgramPipelineInfoLogEXT);
  // GL_APICALL void GL_APIENTRY glGetProgramPipelineivEXT (GLuint pipeline,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetProgramPipelineivEXT);
  // GL_APICALL GLboolean GL_APIENTRY glIsProgramPipelineEXT (GLuint pipeline);
  VKFUNDEFINE(glIsProgramPipelineEXT);
  // GL_APICALL void GL_APIENTRY glProgramParameteriEXT (GLuint program, GLenum
  // pname, GLint value);
  VKFUNDEFINE(glProgramParameteriEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform1fEXT (GLuint program, GLint
  // location, GLfloat v0);
  VKFUNDEFINE(glProgramUniform1fEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform1fvEXT (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform1fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform1iEXT (GLuint program, GLint
  // location, GLint v0);
  VKFUNDEFINE(glProgramUniform1iEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform1ivEXT (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform1ivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform2fEXT (GLuint program, GLint
  // location, GLfloat v0, GLfloat v1);
  VKFUNDEFINE(glProgramUniform2fEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform2fvEXT (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform2fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform2iEXT (GLuint program, GLint
  // location, GLint v0, GLint v1);
  VKFUNDEFINE(glProgramUniform2iEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform2ivEXT (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform2ivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform3fEXT (GLuint program, GLint
  // location, GLfloat v0, GLfloat v1, GLfloat v2);
  VKFUNDEFINE(glProgramUniform3fEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform3fvEXT (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform3fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform3iEXT (GLuint program, GLint
  // location, GLint v0, GLint v1, GLint v2);
  VKFUNDEFINE(glProgramUniform3iEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform3ivEXT (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform3ivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform4fEXT (GLuint program, GLint
  // location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  VKFUNDEFINE(glProgramUniform4fEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform4fvEXT (GLuint program, GLint
  // location, GLsizei count, const GLfloat *value);
  VKFUNDEFINE(glProgramUniform4fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform4iEXT (GLuint program, GLint
  // location, GLint v0, GLint v1, GLint v2, GLint v3);
  VKFUNDEFINE(glProgramUniform4iEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform4ivEXT (GLuint program, GLint
  // location, GLsizei count, const GLint *value);
  VKFUNDEFINE(glProgramUniform4ivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix2fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix3fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix4fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4fvEXT);
  // GL_APICALL void GL_APIENTRY glUseProgramStagesEXT (GLuint pipeline,
  // GLbitfield stages, GLuint program);
  VKFUNDEFINE(glUseProgramStagesEXT);
  // GL_APICALL void GL_APIENTRY glValidateProgramPipelineEXT (GLuint pipeline);
  VKFUNDEFINE(glValidateProgramPipelineEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform1uiEXT (GLuint program, GLint
  // location, GLuint v0);
  VKFUNDEFINE(glProgramUniform1uiEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform2uiEXT (GLuint program, GLint
  // location, GLuint v0, GLuint v1);
  VKFUNDEFINE(glProgramUniform2uiEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform3uiEXT (GLuint program, GLint
  // location, GLuint v0, GLuint v1, GLuint v2);
  VKFUNDEFINE(glProgramUniform3uiEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform4uiEXT (GLuint program, GLint
  // location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  VKFUNDEFINE(glProgramUniform4uiEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform1uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform1uivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform2uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform2uivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform3uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform3uivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniform4uivEXT (GLuint program, GLint
  // location, GLsizei count, const GLuint *value);
  VKFUNDEFINE(glProgramUniform4uivEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x3fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x2fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix2x4fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x2fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix3x4fvEXT);
  // GL_APICALL void GL_APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program,
  // GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glProgramUniformMatrix4x3fvEXT);
  // GL_APICALL void GL_APIENTRY glFramebufferFetchBarrierEXT (void);
  VKFUNDEFINE(glFramebufferFetchBarrierEXT);
  // GL_APICALL void GL_APIENTRY glFramebufferPixelLocalStorageSizeEXT (GLuint
  // target, GLsizei size);
  VKFUNDEFINE(glFramebufferPixelLocalStorageSizeEXT);
  // GL_APICALL GLsizei GL_APIENTRY glGetFramebufferPixelLocalStorageSizeEXT
  // (GLuint target);
  VKFUNDEFINE(glGetFramebufferPixelLocalStorageSizeEXT);
  // GL_APICALL void GL_APIENTRY glClearPixelLocalStorageuiEXT (GLsizei offset,
  // GLsizei n, const GLuint *values);
  VKFUNDEFINE(glClearPixelLocalStorageuiEXT);
  // GL_APICALL void GL_APIENTRY glTexPageCommitmentEXT (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLboolean commit);
  VKFUNDEFINE(glTexPageCommitmentEXT);
  // GL_APICALL void GL_APIENTRY glPatchParameteriEXT (GLenum pname, GLint
  // value);
  VKFUNDEFINE(glPatchParameteriEXT);
  // GL_APICALL void GL_APIENTRY glTexParameterIivEXT (GLenum target, GLenum
  // pname, const GLint *params);
  VKFUNDEFINE(glTexParameterIivEXT);
  // GL_APICALL void GL_APIENTRY glTexParameterIuivEXT (GLenum target, GLenum
  // pname, const GLuint *params);
  VKFUNDEFINE(glTexParameterIuivEXT);
  // GL_APICALL void GL_APIENTRY glGetTexParameterIivEXT (GLenum target, GLenum
  // pname, GLint *params);
  VKFUNDEFINE(glGetTexParameterIivEXT);
  // GL_APICALL void GL_APIENTRY glGetTexParameterIuivEXT (GLenum target, GLenum
  // pname, GLuint *params);
  VKFUNDEFINE(glGetTexParameterIuivEXT);
  // GL_APICALL void GL_APIENTRY glSamplerParameterIivEXT (GLuint sampler,
  // GLenum pname, const GLint *param);
  VKFUNDEFINE(glSamplerParameterIivEXT);
  // GL_APICALL void GL_APIENTRY glSamplerParameterIuivEXT (GLuint sampler,
  // GLenum pname, const GLuint *param);
  VKFUNDEFINE(glSamplerParameterIuivEXT);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameterIivEXT (GLuint sampler,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetSamplerParameterIivEXT);
  // GL_APICALL void GL_APIENTRY glGetSamplerParameterIuivEXT (GLuint sampler,
  // GLenum pname, GLuint *params);
  VKFUNDEFINE(glGetSamplerParameterIuivEXT);
  // GL_APICALL void GL_APIENTRY glTexBufferEXT (GLenum target, GLenum
  // internalformat, GLuint buffer);
  VKFUNDEFINE(glTexBufferEXT);
  // GL_APICALL void GL_APIENTRY glTexBufferRangeEXT (GLenum target, GLenum
  // internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  VKFUNDEFINE(glTexBufferRangeEXT);
  // GL_APICALL void GL_APIENTRY glTexStorage1DEXT (GLenum target, GLsizei
  // levels, GLenum internalformat, GLsizei width);
  VKFUNDEFINE(glTexStorage1DEXT);
  // GL_APICALL void GL_APIENTRY glTexStorage2DEXT (GLenum target, GLsizei
  // levels, GLenum internalformat, GLsizei width, GLsizei height);
  VKFUNDEFINE(glTexStorage2DEXT);
  // GL_APICALL void GL_APIENTRY glTexStorage3DEXT (GLenum target, GLsizei
  // levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei
  // depth);
  VKFUNDEFINE(glTexStorage3DEXT);
  // GL_APICALL void GL_APIENTRY glTextureStorage1DEXT (GLuint texture, GLenum
  // target, GLsizei levels, GLenum internalformat, GLsizei width);
  VKFUNDEFINE(glTextureStorage1DEXT);
  // GL_APICALL void GL_APIENTRY glTextureStorage2DEXT (GLuint texture, GLenum
  // target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glTextureStorage2DEXT);
  // GL_APICALL void GL_APIENTRY glTextureStorage3DEXT (GLuint texture, GLenum
  // target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei
  // height, GLsizei depth);
  VKFUNDEFINE(glTextureStorage3DEXT);
  // GL_APICALL void GL_APIENTRY glTexStorageAttribs2DEXT (GLenum target,
  // GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const
  // GLint* attrib_list);
  VKFUNDEFINE(glTexStorageAttribs2DEXT);
  // GL_APICALL void GL_APIENTRY glTexStorageAttribs3DEXT (GLenum target,
  // GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height,
  // GLsizei depth, const GLint* attrib_list);
  VKFUNDEFINE(glTexStorageAttribs3DEXT);
  // GL_APICALL void GL_APIENTRY glTextureViewEXT (GLuint texture, GLenum
  // target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint
  // numlevels, GLuint minlayer, GLuint numlayers);
  VKFUNDEFINE(glTextureViewEXT);
  // GL_APICALL GLboolean GL_APIENTRY glAcquireKeyedMutexWin32EXT (GLuint
  // memory, GLuint64 key, GLuint timeout);
  VKFUNDEFINE(glAcquireKeyedMutexWin32EXT);
  // GL_APICALL GLboolean GL_APIENTRY glReleaseKeyedMutexWin32EXT (GLuint
  // memory, GLuint64 key);
  VKFUNDEFINE(glReleaseKeyedMutexWin32EXT);
  // GL_APICALL void GL_APIENTRY glWindowRectanglesEXT (GLenum mode, GLsizei
  // count, const GLint *box);
  VKFUNDEFINE(glWindowRectanglesEXT);
  // GL_APICALL GLuint64 GL_APIENTRY glGetTextureHandleIMG (GLuint texture);
  VKFUNDEFINE(glGetTextureHandleIMG);
  // GL_APICALL GLuint64 GL_APIENTRY glGetTextureSamplerHandleIMG (GLuint
  // texture, GLuint sampler);
  VKFUNDEFINE(glGetTextureSamplerHandleIMG);
  // GL_APICALL void GL_APIENTRY glUniformHandleui64IMG (GLint location,
  // GLuint64 value);
  VKFUNDEFINE(glUniformHandleui64IMG);
  // GL_APICALL void GL_APIENTRY glUniformHandleui64vIMG (GLint location,
  // GLsizei count, const GLuint64 *value);
  VKFUNDEFINE(glUniformHandleui64vIMG);
  // GL_APICALL void GL_APIENTRY glProgramUniformHandleui64IMG (GLuint program,
  // GLint location, GLuint64 value);
  VKFUNDEFINE(glProgramUniformHandleui64IMG);
  // GL_APICALL void GL_APIENTRY glProgramUniformHandleui64vIMG (GLuint program,
  // GLint location, GLsizei count, const GLuint64 *values);
  VKFUNDEFINE(glProgramUniformHandleui64vIMG);
  // GL_APICALL void GL_APIENTRY glFramebufferTexture2DDownsampleIMG (GLenum
  // target, GLenum attachment, GLenum textarget, GLuint texture, GLint level,
  // GLint xscale, GLint yscale);
  VKFUNDEFINE(glFramebufferTexture2DDownsampleIMG);
  // GL_APICALL void GL_APIENTRY glFramebufferTextureLayerDownsampleIMG (GLenum
  // target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint
  // xscale, GLint yscale);
  VKFUNDEFINE(glFramebufferTextureLayerDownsampleIMG);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleIMG (GLenum
  // target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleIMG);
  // GL_APICALL void GL_APIENTRY glFramebufferTexture2DMultisampleIMG (GLenum
  // target, GLenum attachment, GLenum textarget, GLuint texture, GLint level,
  // GLsizei samples);
  VKFUNDEFINE(glFramebufferTexture2DMultisampleIMG);
  // GL_APICALL void GL_APIENTRY glApplyFramebufferAttachmentCMAAINTEL (void);
  VKFUNDEFINE(glApplyFramebufferAttachmentCMAAINTEL);
  // GL_APICALL void GL_APIENTRY glBeginPerfQueryINTEL (GLuint queryHandle);
  VKFUNDEFINE(glBeginPerfQueryINTEL);
  // GL_APICALL void GL_APIENTRY glCreatePerfQueryINTEL (GLuint queryId, GLuint
  // *queryHandle);
  VKFUNDEFINE(glCreatePerfQueryINTEL);
  // GL_APICALL void GL_APIENTRY glDeletePerfQueryINTEL (GLuint queryHandle);
  VKFUNDEFINE(glDeletePerfQueryINTEL);
  // GL_APICALL void GL_APIENTRY glEndPerfQueryINTEL (GLuint queryHandle);
  VKFUNDEFINE(glEndPerfQueryINTEL);
  // GL_APICALL void GL_APIENTRY glGetFirstPerfQueryIdINTEL (GLuint *queryId);
  VKFUNDEFINE(glGetFirstPerfQueryIdINTEL);
  // GL_APICALL void GL_APIENTRY glGetNextPerfQueryIdINTEL (GLuint queryId,
  // GLuint *nextQueryId);
  VKFUNDEFINE(glGetNextPerfQueryIdINTEL);
  // GL_APICALL void GL_APIENTRY glGetPerfCounterInfoINTEL (GLuint queryId,
  // GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint
  // counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint
  // *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum,
  // GLuint64 *rawCounterMaxValue);
  VKFUNDEFINE(glGetPerfCounterInfoINTEL);
  // GL_APICALL void GL_APIENTRY glGetPerfQueryDataINTEL (GLuint queryHandle,
  // GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
  VKFUNDEFINE(glGetPerfQueryDataINTEL);
  // GL_APICALL void GL_APIENTRY glGetPerfQueryIdByNameINTEL (GLchar *queryName,
  // GLuint *queryId);
  VKFUNDEFINE(glGetPerfQueryIdByNameINTEL);
  // GL_APICALL void GL_APIENTRY glGetPerfQueryInfoINTEL (GLuint queryId, GLuint
  // queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters,
  // GLuint *noInstances, GLuint *capsMask);
  VKFUNDEFINE(glGetPerfQueryInfoINTEL);
  // GL_APICALL void GL_APIENTRY glFramebufferParameteriMESA (GLenum target,
  // GLenum pname, GLint param);
  VKFUNDEFINE(glFramebufferParameteriMESA);
  // GL_APICALL void GL_APIENTRY glGetFramebufferParameterivMESA (GLenum target,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetFramebufferParameterivMESA);
  // GL_APICALL GLuint64 GL_APIENTRY glGetTextureHandleNV (GLuint texture);
  VKFUNDEFINE(glGetTextureHandleNV);
  // GL_APICALL GLuint64 GL_APIENTRY glGetTextureSamplerHandleNV (GLuint
  // texture, GLuint sampler);
  VKFUNDEFINE(glGetTextureSamplerHandleNV);
  // GL_APICALL void GL_APIENTRY glMakeTextureHandleResidentNV (GLuint64
  // handle);
  VKFUNDEFINE(glMakeTextureHandleResidentNV);
  // GL_APICALL void GL_APIENTRY glMakeTextureHandleNonResidentNV (GLuint64
  // handle);
  VKFUNDEFINE(glMakeTextureHandleNonResidentNV);
  // GL_APICALL GLuint64 GL_APIENTRY glGetImageHandleNV (GLuint texture, GLint
  // level, GLboolean layered, GLint layer, GLenum format);
  VKFUNDEFINE(glGetImageHandleNV);
  // GL_APICALL void GL_APIENTRY glMakeImageHandleResidentNV (GLuint64 handle,
  // GLenum access);
  VKFUNDEFINE(glMakeImageHandleResidentNV);
  // GL_APICALL void GL_APIENTRY glMakeImageHandleNonResidentNV (GLuint64
  // handle);
  VKFUNDEFINE(glMakeImageHandleNonResidentNV);
  // GL_APICALL void GL_APIENTRY glUniformHandleui64NV (GLint location, GLuint64
  // value);
  VKFUNDEFINE(glUniformHandleui64NV);
  // GL_APICALL void GL_APIENTRY glUniformHandleui64vNV (GLint location, GLsizei
  // count, const GLuint64 *value);
  VKFUNDEFINE(glUniformHandleui64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniformHandleui64NV (GLuint program,
  // GLint location, GLuint64 value);
  VKFUNDEFINE(glProgramUniformHandleui64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniformHandleui64vNV (GLuint program,
  // GLint location, GLsizei count, const GLuint64 *values);
  VKFUNDEFINE(glProgramUniformHandleui64vNV);
  // GL_APICALL GLboolean GL_APIENTRY glIsTextureHandleResidentNV (GLuint64
  // handle);
  VKFUNDEFINE(glIsTextureHandleResidentNV);
  // GL_APICALL GLboolean GL_APIENTRY glIsImageHandleResidentNV (GLuint64
  // handle);
  VKFUNDEFINE(glIsImageHandleResidentNV);
  // GL_APICALL void GL_APIENTRY glBlendParameteriNV (GLenum pname, GLint
  // value);
  VKFUNDEFINE(glBlendParameteriNV);
  // GL_APICALL void GL_APIENTRY glBlendBarrierNV (void);
  VKFUNDEFINE(glBlendBarrierNV);
  // GL_APICALL void GL_APIENTRY glViewportPositionWScaleNV (GLuint index,
  // GLfloat xcoeff, GLfloat ycoeff);
  VKFUNDEFINE(glViewportPositionWScaleNV);
  // GL_APICALL void GL_APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum
  // mode);
  VKFUNDEFINE(glBeginConditionalRenderNV);
  // GL_APICALL void GL_APIENTRY glEndConditionalRenderNV (void);
  VKFUNDEFINE(glEndConditionalRenderNV);
  // GL_APICALL void GL_APIENTRY glSubpixelPrecisionBiasNV (GLuint xbits, GLuint
  // ybits);
  VKFUNDEFINE(glSubpixelPrecisionBiasNV);
  // GL_APICALL void GL_APIENTRY glConservativeRasterParameteriNV (GLenum pname,
  // GLint param);
  VKFUNDEFINE(glConservativeRasterParameteriNV);
  // GL_APICALL void GL_APIENTRY glCopyBufferSubDataNV (GLenum readTarget,
  // GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr
  // size);
  VKFUNDEFINE(glCopyBufferSubDataNV);
  // GL_APICALL void GL_APIENTRY glCoverageMaskNV (GLboolean mask);
  VKFUNDEFINE(glCoverageMaskNV);
  // GL_APICALL void GL_APIENTRY glCoverageOperationNV (GLenum operation);
  VKFUNDEFINE(glCoverageOperationNV);
  // GL_APICALL void GL_APIENTRY glDrawBuffersNV (GLsizei n, const GLenum
  // *bufs);
  VKFUNDEFINE(glDrawBuffersNV);
  // GL_APICALL void GL_APIENTRY glDrawArraysInstancedNV (GLenum mode, GLint
  // first, GLsizei count, GLsizei primcount);
  VKFUNDEFINE(glDrawArraysInstancedNV);
  // GL_APICALL void GL_APIENTRY glDrawElementsInstancedNV (GLenum mode, GLsizei
  // count, GLenum type, const void *indices, GLsizei primcount);
  VKFUNDEFINE(glDrawElementsInstancedNV);
  // GL_APICALL void GL_APIENTRY glDrawVkImageNV (GLuint64 vkImage, GLuint
  // sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat
  // s0, GLfloat t0, GLfloat s1, GLfloat t1);
  VKFUNDEFINE(glDrawVkImageNV);
  // GL_APICALL GLVULKANPROCNV GL_APIENTRY glGetVkProcAddrNV (const GLchar
  // *name);
  VKFUNDEFINE(glGetVkProcAddrNV);
  // GL_APICALL void GL_APIENTRY glWaitVkSemaphoreNV (GLuint64 vkSemaphore);
  VKFUNDEFINE(glWaitVkSemaphoreNV);
  // GL_APICALL void GL_APIENTRY glSignalVkSemaphoreNV (GLuint64 vkSemaphore);
  VKFUNDEFINE(glSignalVkSemaphoreNV);
  // GL_APICALL void GL_APIENTRY glSignalVkFenceNV (GLuint64 vkFence);
  VKFUNDEFINE(glSignalVkFenceNV);
  // GL_APICALL void GL_APIENTRY glDeleteFencesNV (GLsizei n, const GLuint
  // *fences);
  VKFUNDEFINE(glDeleteFencesNV);
  // GL_APICALL void GL_APIENTRY glGenFencesNV (GLsizei n, GLuint *fences);
  VKFUNDEFINE(glGenFencesNV);
  // GL_APICALL GLboolean GL_APIENTRY glIsFenceNV (GLuint fence);
  VKFUNDEFINE(glIsFenceNV);
  // GL_APICALL GLboolean GL_APIENTRY glTestFenceNV (GLuint fence);
  VKFUNDEFINE(glTestFenceNV);
  // GL_APICALL void GL_APIENTRY glGetFenceivNV (GLuint fence, GLenum pname,
  // GLint *params);
  VKFUNDEFINE(glGetFenceivNV);
  // GL_APICALL void GL_APIENTRY glFinishFenceNV (GLuint fence);
  VKFUNDEFINE(glFinishFenceNV);
  // GL_APICALL void GL_APIENTRY glSetFenceNV (GLuint fence, GLenum condition);
  VKFUNDEFINE(glSetFenceNV);
  // GL_APICALL void GL_APIENTRY glFragmentCoverageColorNV (GLuint color);
  VKFUNDEFINE(glFragmentCoverageColorNV);
  // GL_APICALL void GL_APIENTRY glBlitFramebufferNV (GLint srcX0, GLint srcY0,
  // GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint
  // dstY1, GLbitfield mask, GLenum filter);
  VKFUNDEFINE(glBlitFramebufferNV);
  // GL_APICALL void GL_APIENTRY glCoverageModulationTableNV (GLsizei n, const
  // GLfloat *v);
  VKFUNDEFINE(glCoverageModulationTableNV);
  // GL_APICALL void GL_APIENTRY glGetCoverageModulationTableNV (GLsizei
  // bufSize, GLfloat *v);
  VKFUNDEFINE(glGetCoverageModulationTableNV);
  // GL_APICALL void GL_APIENTRY glCoverageModulationNV (GLenum components);
  VKFUNDEFINE(glCoverageModulationNV);
  // GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleNV (GLenum
  // target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei
  // height);
  VKFUNDEFINE(glRenderbufferStorageMultisampleNV);
  // GL_APICALL void GL_APIENTRY glUniform1i64NV (GLint location, GLint64EXT x);
  VKFUNDEFINE(glUniform1i64NV);
  // GL_APICALL void GL_APIENTRY glUniform2i64NV (GLint location, GLint64EXT x,
  // GLint64EXT y);
  VKFUNDEFINE(glUniform2i64NV);
  // GL_APICALL void GL_APIENTRY glUniform3i64NV (GLint location, GLint64EXT x,
  // GLint64EXT y, GLint64EXT z);
  VKFUNDEFINE(glUniform3i64NV);
  // GL_APICALL void GL_APIENTRY glUniform4i64NV (GLint location, GLint64EXT x,
  // GLint64EXT y, GLint64EXT z, GLint64EXT w);
  VKFUNDEFINE(glUniform4i64NV);
  // GL_APICALL void GL_APIENTRY glUniform1i64vNV (GLint location, GLsizei
  // count, const GLint64EXT *value);
  VKFUNDEFINE(glUniform1i64vNV);
  // GL_APICALL void GL_APIENTRY glUniform2i64vNV (GLint location, GLsizei
  // count, const GLint64EXT *value);
  VKFUNDEFINE(glUniform2i64vNV);
  // GL_APICALL void GL_APIENTRY glUniform3i64vNV (GLint location, GLsizei
  // count, const GLint64EXT *value);
  VKFUNDEFINE(glUniform3i64vNV);
  // GL_APICALL void GL_APIENTRY glUniform4i64vNV (GLint location, GLsizei
  // count, const GLint64EXT *value);
  VKFUNDEFINE(glUniform4i64vNV);
  // GL_APICALL void GL_APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT
  // x);
  VKFUNDEFINE(glUniform1ui64NV);
  // GL_APICALL void GL_APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT
  // x, GLuint64EXT y);
  VKFUNDEFINE(glUniform2ui64NV);
  // GL_APICALL void GL_APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT
  // x, GLuint64EXT y, GLuint64EXT z);
  VKFUNDEFINE(glUniform3ui64NV);
  // GL_APICALL void GL_APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT
  // x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  VKFUNDEFINE(glUniform4ui64NV);
  // GL_APICALL void GL_APIENTRY glUniform1ui64vNV (GLint location, GLsizei
  // count, const GLuint64EXT *value);
  VKFUNDEFINE(glUniform1ui64vNV);
  // GL_APICALL void GL_APIENTRY glUniform2ui64vNV (GLint location, GLsizei
  // count, const GLuint64EXT *value);
  VKFUNDEFINE(glUniform2ui64vNV);
  // GL_APICALL void GL_APIENTRY glUniform3ui64vNV (GLint location, GLsizei
  // count, const GLuint64EXT *value);
  VKFUNDEFINE(glUniform3ui64vNV);
  // GL_APICALL void GL_APIENTRY glUniform4ui64vNV (GLint location, GLsizei
  // count, const GLuint64EXT *value);
  VKFUNDEFINE(glUniform4ui64vNV);
  // GL_APICALL void GL_APIENTRY glGetUniformi64vNV (GLuint program, GLint
  // location, GLint64EXT *params);
  VKFUNDEFINE(glGetUniformi64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform1i64NV (GLuint program, GLint
  // location, GLint64EXT x);
  VKFUNDEFINE(glProgramUniform1i64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform2i64NV (GLuint program, GLint
  // location, GLint64EXT x, GLint64EXT y);
  VKFUNDEFINE(glProgramUniform2i64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform3i64NV (GLuint program, GLint
  // location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
  VKFUNDEFINE(glProgramUniform3i64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform4i64NV (GLuint program, GLint
  // location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
  VKFUNDEFINE(glProgramUniform4i64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform1i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform1i64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform2i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform2i64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform3i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform3i64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform4i64vNV (GLuint program, GLint
  // location, GLsizei count, const GLint64EXT *value);
  VKFUNDEFINE(glProgramUniform4i64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform1ui64NV (GLuint program, GLint
  // location, GLuint64EXT x);
  VKFUNDEFINE(glProgramUniform1ui64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform2ui64NV (GLuint program, GLint
  // location, GLuint64EXT x, GLuint64EXT y);
  VKFUNDEFINE(glProgramUniform2ui64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform3ui64NV (GLuint program, GLint
  // location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
  VKFUNDEFINE(glProgramUniform3ui64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform4ui64NV (GLuint program, GLint
  // location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  VKFUNDEFINE(glProgramUniform4ui64NV);
  // GL_APICALL void GL_APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform1ui64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform2ui64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform3ui64vNV);
  // GL_APICALL void GL_APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint
  // location, GLsizei count, const GLuint64EXT *value);
  VKFUNDEFINE(glProgramUniform4ui64vNV);
  // GL_APICALL void GL_APIENTRY glVertexAttribDivisorNV (GLuint index, GLuint
  // divisor);
  VKFUNDEFINE(glVertexAttribDivisorNV);
  // GL_APICALL void GL_APIENTRY glGetInternalformatSampleivNV (GLenum target,
  // GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint
  // *params);
  VKFUNDEFINE(glGetInternalformatSampleivNV);
  // GL_APICALL void GL_APIENTRY glGetMemoryObjectDetachedResourcesuivNV (GLuint
  // memory, GLenum pname, GLint first, GLsizei count, GLuint *params);
  VKFUNDEFINE(glGetMemoryObjectDetachedResourcesuivNV);
  // GL_APICALL void GL_APIENTRY glResetMemoryObjectParameterNV (GLuint memory,
  // GLenum pname);
  VKFUNDEFINE(glResetMemoryObjectParameterNV);
  // GL_APICALL void GL_APIENTRY glTexAttachMemoryNV (GLenum target, GLuint
  // memory, GLuint64 offset);
  VKFUNDEFINE(glTexAttachMemoryNV);
  // GL_APICALL void GL_APIENTRY glBufferAttachMemoryNV (GLenum target, GLuint
  // memory, GLuint64 offset);
  VKFUNDEFINE(glBufferAttachMemoryNV);
  // GL_APICALL void GL_APIENTRY glTextureAttachMemoryNV (GLuint texture, GLuint
  // memory, GLuint64 offset);
  VKFUNDEFINE(glTextureAttachMemoryNV);
  // GL_APICALL void GL_APIENTRY glNamedBufferAttachMemoryNV (GLuint buffer,
  // GLuint memory, GLuint64 offset);
  VKFUNDEFINE(glNamedBufferAttachMemoryNV);
  // GL_APICALL void GL_APIENTRY glBufferPageCommitmentMemNV (GLenum target,
  // GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset,
  // GLboolean commit);
  VKFUNDEFINE(glBufferPageCommitmentMemNV);
  // GL_APICALL void GL_APIENTRY glTexPageCommitmentMemNV (GLenum target, GLint
  // layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei
  // width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset,
  // GLboolean commit);
  VKFUNDEFINE(glTexPageCommitmentMemNV);
  // GL_APICALL void GL_APIENTRY glNamedBufferPageCommitmentMemNV (GLuint
  // buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64
  // memOffset, GLboolean commit);
  VKFUNDEFINE(glNamedBufferPageCommitmentMemNV);
  // GL_APICALL void GL_APIENTRY glTexturePageCommitmentMemNV (GLuint texture,
  // GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,
  // GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64
  // offset, GLboolean commit);
  VKFUNDEFINE(glTexturePageCommitmentMemNV);
  // GL_APICALL void GL_APIENTRY glDrawMeshTasksNV (GLuint first, GLuint count);
  VKFUNDEFINE(glDrawMeshTasksNV);
  // GL_APICALL void GL_APIENTRY glDrawMeshTasksIndirectNV (GLintptr indirect);
  VKFUNDEFINE(glDrawMeshTasksIndirectNV);
  // GL_APICALL void GL_APIENTRY glMultiDrawMeshTasksIndirectNV (GLintptr
  // indirect, GLsizei drawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawMeshTasksIndirectNV);
  // GL_APICALL void GL_APIENTRY glMultiDrawMeshTasksIndirectCountNV (GLintptr
  // indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
  VKFUNDEFINE(glMultiDrawMeshTasksIndirectCountNV);
  // GL_APICALL void GL_APIENTRY glUniformMatrix2x3fvNV (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2x3fvNV);
  // GL_APICALL void GL_APIENTRY glUniformMatrix3x2fvNV (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3x2fvNV);
  // GL_APICALL void GL_APIENTRY glUniformMatrix2x4fvNV (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix2x4fvNV);
  // GL_APICALL void GL_APIENTRY glUniformMatrix4x2fvNV (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4x2fvNV);
  // GL_APICALL void GL_APIENTRY glUniformMatrix3x4fvNV (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix3x4fvNV);
  // GL_APICALL void GL_APIENTRY glUniformMatrix4x3fvNV (GLint location, GLsizei
  // count, GLboolean transpose, const GLfloat *value);
  VKFUNDEFINE(glUniformMatrix4x3fvNV);
  // GL_APICALL GLuint GL_APIENTRY glGenPathsNV (GLsizei range);
  VKFUNDEFINE(glGenPathsNV);
  // GL_APICALL void GL_APIENTRY glDeletePathsNV (GLuint path, GLsizei range);
  VKFUNDEFINE(glDeletePathsNV);
  // GL_APICALL GLboolean GL_APIENTRY glIsPathNV (GLuint path);
  VKFUNDEFINE(glIsPathNV);
  // GL_APICALL void GL_APIENTRY glPathCommandsNV (GLuint path, GLsizei
  // numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType,
  // const void *coords);
  VKFUNDEFINE(glPathCommandsNV);
  // GL_APICALL void GL_APIENTRY glPathCoordsNV (GLuint path, GLsizei numCoords,
  // GLenum coordType, const void *coords);
  VKFUNDEFINE(glPathCoordsNV);
  // GL_APICALL void GL_APIENTRY glPathSubCommandsNV (GLuint path, GLsizei
  // commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte
  // *commands, GLsizei numCoords, GLenum coordType, const void *coords);
  VKFUNDEFINE(glPathSubCommandsNV);
  // GL_APICALL void GL_APIENTRY glPathSubCoordsNV (GLuint path, GLsizei
  // coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
  VKFUNDEFINE(glPathSubCoordsNV);
  // GL_APICALL void GL_APIENTRY glPathStringNV (GLuint path, GLenum format,
  // GLsizei length, const void *pathString);
  VKFUNDEFINE(glPathStringNV);
  // GL_APICALL void GL_APIENTRY glPathGlyphsNV (GLuint firstPathName, GLenum
  // fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs,
  // GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint
  // pathParameterTemplate, GLfloat emScale);
  VKFUNDEFINE(glPathGlyphsNV);
  // GL_APICALL void GL_APIENTRY glPathGlyphRangeNV (GLuint firstPathName,
  // GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint
  // firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint
  // pathParameterTemplate, GLfloat emScale);
  VKFUNDEFINE(glPathGlyphRangeNV);
  // GL_APICALL void GL_APIENTRY glWeightPathsNV (GLuint resultPath, GLsizei
  // numPaths, const GLuint *paths, const GLfloat *weights);
  VKFUNDEFINE(glWeightPathsNV);
  // GL_APICALL void GL_APIENTRY glCopyPathNV (GLuint resultPath, GLuint
  // srcPath);
  VKFUNDEFINE(glCopyPathNV);
  // GL_APICALL void GL_APIENTRY glInterpolatePathsNV (GLuint resultPath, GLuint
  // pathA, GLuint pathB, GLfloat weight);
  VKFUNDEFINE(glInterpolatePathsNV);
  // GL_APICALL void GL_APIENTRY glTransformPathNV (GLuint resultPath, GLuint
  // srcPath, GLenum transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glTransformPathNV);
  // GL_APICALL void GL_APIENTRY glPathParameterivNV (GLuint path, GLenum pname,
  // const GLint *value);
  VKFUNDEFINE(glPathParameterivNV);
  // GL_APICALL void GL_APIENTRY glPathParameteriNV (GLuint path, GLenum pname,
  // GLint value);
  VKFUNDEFINE(glPathParameteriNV);
  // GL_APICALL void GL_APIENTRY glPathParameterfvNV (GLuint path, GLenum pname,
  // const GLfloat *value);
  VKFUNDEFINE(glPathParameterfvNV);
  // GL_APICALL void GL_APIENTRY glPathParameterfNV (GLuint path, GLenum pname,
  // GLfloat value);
  VKFUNDEFINE(glPathParameterfNV);
  // GL_APICALL void GL_APIENTRY glPathDashArrayNV (GLuint path, GLsizei
  // dashCount, const GLfloat *dashArray);
  VKFUNDEFINE(glPathDashArrayNV);
  // GL_APICALL void GL_APIENTRY glPathStencilFuncNV (GLenum func, GLint ref,
  // GLuint mask);
  VKFUNDEFINE(glPathStencilFuncNV);
  // GL_APICALL void GL_APIENTRY glPathStencilDepthOffsetNV (GLfloat factor,
  // GLfloat units);
  VKFUNDEFINE(glPathStencilDepthOffsetNV);
  // GL_APICALL void GL_APIENTRY glStencilFillPathNV (GLuint path, GLenum
  // fillMode, GLuint mask);
  VKFUNDEFINE(glStencilFillPathNV);
  // GL_APICALL void GL_APIENTRY glStencilStrokePathNV (GLuint path, GLint
  // reference, GLuint mask);
  VKFUNDEFINE(glStencilStrokePathNV);
  // GL_APICALL void GL_APIENTRY glStencilFillPathInstancedNV (GLsizei numPaths,
  // GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode,
  // GLuint mask, GLenum transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glStencilFillPathInstancedNV);
  // GL_APICALL void GL_APIENTRY glStencilStrokePathInstancedNV (GLsizei
  // numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint
  // reference, GLuint mask, GLenum transformType, const GLfloat
  // *transformValues);
  VKFUNDEFINE(glStencilStrokePathInstancedNV);
  // GL_APICALL void GL_APIENTRY glPathCoverDepthFuncNV (GLenum func);
  VKFUNDEFINE(glPathCoverDepthFuncNV);
  // GL_APICALL void GL_APIENTRY glCoverFillPathNV (GLuint path, GLenum
  // coverMode);
  VKFUNDEFINE(glCoverFillPathNV);
  // GL_APICALL void GL_APIENTRY glCoverStrokePathNV (GLuint path, GLenum
  // coverMode);
  VKFUNDEFINE(glCoverStrokePathNV);
  // GL_APICALL void GL_APIENTRY glCoverFillPathInstancedNV (GLsizei numPaths,
  // GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode,
  // GLenum transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glCoverFillPathInstancedNV);
  // GL_APICALL void GL_APIENTRY glCoverStrokePathInstancedNV (GLsizei numPaths,
  // GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode,
  // GLenum transformType, const GLfloat *transformValues);
  VKFUNDEFINE(glCoverStrokePathInstancedNV);
  // GL_APICALL void GL_APIENTRY glGetPathParameterivNV (GLuint path, GLenum
  // pname, GLint *value);
  VKFUNDEFINE(glGetPathParameterivNV);
  // GL_APICALL void GL_APIENTRY glGetPathParameterfvNV (GLuint path, GLenum
  // pname, GLfloat *value);
  VKFUNDEFINE(glGetPathParameterfvNV);
  // GL_APICALL void GL_APIENTRY glGetPathCommandsNV (GLuint path, GLubyte
  // *commands);
  VKFUNDEFINE(glGetPathCommandsNV);
  // GL_APICALL void GL_APIENTRY glGetPathCoordsNV (GLuint path, GLfloat
  // *coords);
  VKFUNDEFINE(glGetPathCoordsNV);
  // GL_APICALL void GL_APIENTRY glGetPathDashArrayNV (GLuint path, GLfloat
  // *dashArray);
  VKFUNDEFINE(glGetPathDashArrayNV);
  // GL_APICALL void GL_APIENTRY glGetPathMetricsNV (GLbitfield metricQueryMask,
  // GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase,
  // GLsizei stride, GLfloat *metrics);
  VKFUNDEFINE(glGetPathMetricsNV);
  // GL_APICALL void GL_APIENTRY glGetPathMetricRangeNV (GLbitfield
  // metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride,
  // GLfloat *metrics);
  VKFUNDEFINE(glGetPathMetricRangeNV);
  // GL_APICALL void GL_APIENTRY glGetPathSpacingNV (GLenum pathListMode,
  // GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase,
  // GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat
  // *returnedSpacing);
  VKFUNDEFINE(glGetPathSpacingNV);
  // GL_APICALL GLboolean GL_APIENTRY glIsPointInFillPathNV (GLuint path, GLuint
  // mask, GLfloat x, GLfloat y);
  VKFUNDEFINE(glIsPointInFillPathNV);
  // GL_APICALL GLboolean GL_APIENTRY glIsPointInStrokePathNV (GLuint path,
  // GLfloat x, GLfloat y);
  VKFUNDEFINE(glIsPointInStrokePathNV);
  // GL_APICALL GLfloat GL_APIENTRY glGetPathLengthNV (GLuint path, GLsizei
  // startSegment, GLsizei numSegments);
  VKFUNDEFINE(glGetPathLengthNV);
  // GL_APICALL GLboolean GL_APIENTRY glPointAlongPathNV (GLuint path, GLsizei
  // startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat
  // *y, GLfloat *tangentX, GLfloat *tangentY);
  VKFUNDEFINE(glPointAlongPathNV);
  // GL_APICALL void GL_APIENTRY glMatrixLoad3x2fNV (GLenum matrixMode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixLoad3x2fNV);
  // GL_APICALL void GL_APIENTRY glMatrixLoad3x3fNV (GLenum matrixMode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixLoad3x3fNV);
  // GL_APICALL void GL_APIENTRY glMatrixLoadTranspose3x3fNV (GLenum matrixMode,
  // const GLfloat *m);
  VKFUNDEFINE(glMatrixLoadTranspose3x3fNV);
  // GL_APICALL void GL_APIENTRY glMatrixMult3x2fNV (GLenum matrixMode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixMult3x2fNV);
  // GL_APICALL void GL_APIENTRY glMatrixMult3x3fNV (GLenum matrixMode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixMult3x3fNV);
  // GL_APICALL void GL_APIENTRY glMatrixMultTranspose3x3fNV (GLenum matrixMode,
  // const GLfloat *m);
  VKFUNDEFINE(glMatrixMultTranspose3x3fNV);
  // GL_APICALL void GL_APIENTRY glStencilThenCoverFillPathNV (GLuint path,
  // GLenum fillMode, GLuint mask, GLenum coverMode);
  VKFUNDEFINE(glStencilThenCoverFillPathNV);
  // GL_APICALL void GL_APIENTRY glStencilThenCoverStrokePathNV (GLuint path,
  // GLint reference, GLuint mask, GLenum coverMode);
  VKFUNDEFINE(glStencilThenCoverStrokePathNV);
  // GL_APICALL void GL_APIENTRY glStencilThenCoverFillPathInstancedNV (GLsizei
  // numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum
  // fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const
  // GLfloat *transformValues);
  VKFUNDEFINE(glStencilThenCoverFillPathInstancedNV);
  // GL_APICALL void GL_APIENTRY glStencilThenCoverStrokePathInstancedNV
  // (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase,
  // GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const
  // GLfloat *transformValues);
  VKFUNDEFINE(glStencilThenCoverStrokePathInstancedNV);
  // GL_APICALL GLenum GL_APIENTRY glPathGlyphIndexRangeNV (GLenum fontTarget,
  // const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate,
  // GLfloat emScale, GLuint *baseAndCount);
  VKFUNDEFINE(glPathGlyphIndexRangeNV);
  // GL_APICALL GLenum GL_APIENTRY glPathGlyphIndexArrayNV (GLuint
  // firstPathName, GLenum fontTarget, const void *fontName, GLbitfield
  // fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint
  // pathParameterTemplate, GLfloat emScale);
  VKFUNDEFINE(glPathGlyphIndexArrayNV);
  // GL_APICALL GLenum GL_APIENTRY glPathMemoryGlyphIndexArrayNV (GLuint
  // firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void
  // *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs,
  // GLuint pathParameterTemplate, GLfloat emScale);
  VKFUNDEFINE(glPathMemoryGlyphIndexArrayNV);
  // GL_APICALL void GL_APIENTRY glProgramPathFragmentInputGenNV (GLuint
  // program, GLint location, GLenum genMode, GLint components, const GLfloat
  // *coeffs);
  VKFUNDEFINE(glProgramPathFragmentInputGenNV);
  // GL_APICALL void GL_APIENTRY glGetProgramResourcefvNV (GLuint program,
  // GLenum programInterface, GLuint index, GLsizei propCount, const GLenum
  // *props, GLsizei count, GLsizei *length, GLfloat *params);
  VKFUNDEFINE(glGetProgramResourcefvNV);
  // GL_APICALL void GL_APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left,
  // GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble
  // zFar);
  VKFUNDEFINE(glMatrixFrustumEXT);
  // GL_APICALL void GL_APIENTRY glMatrixLoadIdentityEXT (GLenum mode);
  VKFUNDEFINE(glMatrixLoadIdentityEXT);
  // GL_APICALL void GL_APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixLoadTransposefEXT);
  // GL_APICALL void GL_APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const
  // GLdouble *m);
  VKFUNDEFINE(glMatrixLoadTransposedEXT);
  // GL_APICALL void GL_APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixLoadfEXT);
  // GL_APICALL void GL_APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble
  // *m);
  VKFUNDEFINE(glMatrixLoaddEXT);
  // GL_APICALL void GL_APIENTRY glMatrixMultTransposefEXT (GLenum mode, const
  // GLfloat *m);
  VKFUNDEFINE(glMatrixMultTransposefEXT);
  // GL_APICALL void GL_APIENTRY glMatrixMultTransposedEXT (GLenum mode, const
  // GLdouble *m);
  VKFUNDEFINE(glMatrixMultTransposedEXT);
  // GL_APICALL void GL_APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat
  // *m);
  VKFUNDEFINE(glMatrixMultfEXT);
  // GL_APICALL void GL_APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble
  // *m);
  VKFUNDEFINE(glMatrixMultdEXT);
  // GL_APICALL void GL_APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left,
  // GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble
  // zFar);
  VKFUNDEFINE(glMatrixOrthoEXT);
  // GL_APICALL void GL_APIENTRY glMatrixPopEXT (GLenum mode);
  VKFUNDEFINE(glMatrixPopEXT);
  // GL_APICALL void GL_APIENTRY glMatrixPushEXT (GLenum mode);
  VKFUNDEFINE(glMatrixPushEXT);
  // GL_APICALL void GL_APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle,
  // GLfloat x, GLfloat y, GLfloat z);
  VKFUNDEFINE(glMatrixRotatefEXT);
  // GL_APICALL void GL_APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble
  // angle, GLdouble x, GLdouble y, GLdouble z);
  VKFUNDEFINE(glMatrixRotatedEXT);
  // GL_APICALL void GL_APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x,
  // GLfloat y, GLfloat z);
  VKFUNDEFINE(glMatrixScalefEXT);
  // GL_APICALL void GL_APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x,
  // GLdouble y, GLdouble z);
  VKFUNDEFINE(glMatrixScaledEXT);
  // GL_APICALL void GL_APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x,
  // GLfloat y, GLfloat z);
  VKFUNDEFINE(glMatrixTranslatefEXT);
  // GL_APICALL void GL_APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x,
  // GLdouble y, GLdouble z);
  VKFUNDEFINE(glMatrixTranslatedEXT);
  // GL_APICALL void GL_APIENTRY glPolygonModeNV (GLenum face, GLenum mode);
  VKFUNDEFINE(glPolygonModeNV);
  // GL_APICALL void GL_APIENTRY glReadBufferNV (GLenum mode);
  VKFUNDEFINE(glReadBufferNV);
  // GL_APICALL void GL_APIENTRY glFramebufferSampleLocationsfvNV (GLenum
  // target, GLuint start, GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glFramebufferSampleLocationsfvNV);
  // GL_APICALL void GL_APIENTRY glNamedFramebufferSampleLocationsfvNV (GLuint
  // framebuffer, GLuint start, GLsizei count, const GLfloat *v);
  VKFUNDEFINE(glNamedFramebufferSampleLocationsfvNV);
  // GL_APICALL void GL_APIENTRY glResolveDepthValuesNV (void);
  VKFUNDEFINE(glResolveDepthValuesNV);
  // GL_APICALL void GL_APIENTRY glScissorExclusiveNV (GLint x, GLint y, GLsizei
  // width, GLsizei height);
  VKFUNDEFINE(glScissorExclusiveNV);
  // GL_APICALL void GL_APIENTRY glScissorExclusiveArrayvNV (GLuint first,
  // GLsizei count, const GLint *v);
  VKFUNDEFINE(glScissorExclusiveArrayvNV);
  // GL_APICALL void GL_APIENTRY glBindShadingRateImageNV (GLuint texture);
  VKFUNDEFINE(glBindShadingRateImageNV);
  // GL_APICALL void GL_APIENTRY glGetShadingRateImagePaletteNV (GLuint
  // viewport, GLuint entry, GLenum *rate);
  VKFUNDEFINE(glGetShadingRateImagePaletteNV);
  // GL_APICALL void GL_APIENTRY glGetShadingRateSampleLocationivNV (GLenum
  // rate, GLuint samples, GLuint index, GLint *location);
  VKFUNDEFINE(glGetShadingRateSampleLocationivNV);
  // GL_APICALL void GL_APIENTRY glShadingRateImageBarrierNV (GLboolean
  // synchronize);
  VKFUNDEFINE(glShadingRateImageBarrierNV);
  // GL_APICALL void GL_APIENTRY glShadingRateImagePaletteNV (GLuint viewport,
  // GLuint first, GLsizei count, const GLenum *rates);
  VKFUNDEFINE(glShadingRateImagePaletteNV);
  // GL_APICALL void GL_APIENTRY glShadingRateSampleOrderNV (GLenum order);
  VKFUNDEFINE(glShadingRateSampleOrderNV);
  // GL_APICALL void GL_APIENTRY glShadingRateSampleOrderCustomNV (GLenum rate,
  // GLuint samples, const GLint *locations);
  VKFUNDEFINE(glShadingRateSampleOrderCustomNV);
  // GL_APICALL void GL_APIENTRY glCreateSemaphoresNV (GLsizei n, GLuint
  // *semaphores);
  VKFUNDEFINE(glCreateSemaphoresNV);
  // GL_APICALL void GL_APIENTRY glSemaphoreParameterivNV (GLuint semaphore,
  // GLenum pname, const GLint *params);
  VKFUNDEFINE(glSemaphoreParameterivNV);
  // GL_APICALL void GL_APIENTRY glGetSemaphoreParameterivNV (GLuint semaphore,
  // GLenum pname, GLint *params);
  VKFUNDEFINE(glGetSemaphoreParameterivNV);
  // GL_APICALL void GL_APIENTRY glViewportArrayvNV (GLuint first, GLsizei
  // count, const GLfloat *v);
  VKFUNDEFINE(glViewportArrayvNV);
  // GL_APICALL void GL_APIENTRY glViewportIndexedfNV (GLuint index, GLfloat x,
  // GLfloat y, GLfloat w, GLfloat h);
  VKFUNDEFINE(glViewportIndexedfNV);
  // GL_APICALL void GL_APIENTRY glViewportIndexedfvNV (GLuint index, const
  // GLfloat *v);
  VKFUNDEFINE(glViewportIndexedfvNV);
  // GL_APICALL void GL_APIENTRY glScissorArrayvNV (GLuint first, GLsizei count,
  // const GLint *v);
  VKFUNDEFINE(glScissorArrayvNV);
  // GL_APICALL void GL_APIENTRY glScissorIndexedNV (GLuint index, GLint left,
  // GLint bottom, GLsizei width, GLsizei height);
  VKFUNDEFINE(glScissorIndexedNV);
  // GL_APICALL void GL_APIENTRY glScissorIndexedvNV (GLuint index, const GLint
  // *v);
  VKFUNDEFINE(glScissorIndexedvNV);
  // GL_APICALL void GL_APIENTRY glDepthRangeArrayfvNV (GLuint first, GLsizei
  // count, const GLfloat *v);
  VKFUNDEFINE(glDepthRangeArrayfvNV);
  // GL_APICALL void GL_APIENTRY glDepthRangeIndexedfNV (GLuint index, GLfloat
  // n, GLfloat f);
  VKFUNDEFINE(glDepthRangeIndexedfNV);
  // GL_APICALL void GL_APIENTRY glGetFloati_vNV (GLenum target, GLuint index,
  // GLfloat *data);
  VKFUNDEFINE(glGetFloati_vNV);
  // GL_APICALL void GL_APIENTRY glEnableiNV (GLenum target, GLuint index);
  VKFUNDEFINE(glEnableiNV);
  // GL_APICALL void GL_APIENTRY glDisableiNV (GLenum target, GLuint index);
  VKFUNDEFINE(glDisableiNV);
  // GL_APICALL GLboolean GL_APIENTRY glIsEnablediNV (GLenum target, GLuint
  // index);
  VKFUNDEFINE(glIsEnablediNV);
  // GL_APICALL void GL_APIENTRY glViewportSwizzleNV (GLuint index, GLenum
  // swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
  VKFUNDEFINE(glViewportSwizzleNV);
  // GL_APICALL void GL_APIENTRY glFramebufferTextureMultiviewOVR (GLenum
  // target, GLenum attachment, GLuint texture, GLint level, GLint
  // baseViewIndex, GLsizei numViews);
  VKFUNDEFINE(glFramebufferTextureMultiviewOVR);
  // GL_APICALL void GL_APIENTRY glFramebufferTextureMultisampleMultiviewOVR
  // (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei
  // samples, GLint baseViewIndex, GLsizei numViews);
  VKFUNDEFINE(glFramebufferTextureMultisampleMultiviewOVR);
  // GL_APICALL void GL_APIENTRY glAlphaFuncQCOM (GLenum func, GLclampf ref);
  VKFUNDEFINE(glAlphaFuncQCOM);
  // GL_APICALL void GL_APIENTRY glGetDriverControlsQCOM (GLint *num, GLsizei
  // size, GLuint *driverControls);
  VKFUNDEFINE(glGetDriverControlsQCOM);
  // GL_APICALL void GL_APIENTRY glGetDriverControlStringQCOM (GLuint
  // driverControl, GLsizei bufSize, GLsizei *length, GLchar
  // *driverControlString);
  VKFUNDEFINE(glGetDriverControlStringQCOM);
  // GL_APICALL void GL_APIENTRY glEnableDriverControlQCOM (GLuint
  // driverControl);
  VKFUNDEFINE(glEnableDriverControlQCOM);
  // GL_APICALL void GL_APIENTRY glDisableDriverControlQCOM (GLuint
  // driverControl);
  VKFUNDEFINE(glDisableDriverControlQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetTexturesQCOM (GLuint *textures, GLint
  // maxTextures, GLint *numTextures);
  VKFUNDEFINE(glExtGetTexturesQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetBuffersQCOM (GLuint *buffers, GLint
  // maxBuffers, GLint *numBuffers);
  VKFUNDEFINE(glExtGetBuffersQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetRenderbuffersQCOM (GLuint
  // *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);
  VKFUNDEFINE(glExtGetRenderbuffersQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetFramebuffersQCOM (GLuint *framebuffers,
  // GLint maxFramebuffers, GLint *numFramebuffers);
  VKFUNDEFINE(glExtGetFramebuffersQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetTexLevelParameterivQCOM (GLuint
  // texture, GLenum face, GLint level, GLenum pname, GLint *params);
  VKFUNDEFINE(glExtGetTexLevelParameterivQCOM);
  // GL_APICALL void GL_APIENTRY glExtTexObjectStateOverrideiQCOM (GLenum
  // target, GLenum pname, GLint param);
  VKFUNDEFINE(glExtTexObjectStateOverrideiQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetTexSubImageQCOM (GLenum target, GLint
  // level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei
  // height, GLsizei depth, GLenum format, GLenum type, void *texels);
  VKFUNDEFINE(glExtGetTexSubImageQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetBufferPointervQCOM (GLenum target, void
  // **params);
  VKFUNDEFINE(glExtGetBufferPointervQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetShadersQCOM (GLuint *shaders, GLint
  // maxShaders, GLint *numShaders);
  VKFUNDEFINE(glExtGetShadersQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetProgramsQCOM (GLuint *programs, GLint
  // maxPrograms, GLint *numPrograms);
  VKFUNDEFINE(glExtGetProgramsQCOM);
  // GL_APICALL GLboolean GL_APIENTRY glExtIsProgramBinaryQCOM (GLuint program);
  VKFUNDEFINE(glExtIsProgramBinaryQCOM);
  // GL_APICALL void GL_APIENTRY glExtGetProgramBinarySourceQCOM (GLuint
  // program, GLenum shadertype, GLchar *source, GLint *length);
  VKFUNDEFINE(glExtGetProgramBinarySourceQCOM);
  // GL_APICALL void GL_APIENTRY glExtrapolateTex2DQCOM (GLuint src1, GLuint
  // src2, GLuint output, GLfloat scaleFactor);
  VKFUNDEFINE(glExtrapolateTex2DQCOM);
  // GL_APICALL void GL_APIENTRY glFramebufferFoveationConfigQCOM (GLuint
  // framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint
  // requestedFeatures, GLuint *providedFeatures);
  VKFUNDEFINE(glFramebufferFoveationConfigQCOM);
  // GL_APICALL void GL_APIENTRY glFramebufferFoveationParametersQCOM (GLuint
  // framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat
  // focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea);
  VKFUNDEFINE(glFramebufferFoveationParametersQCOM);
  // GL_APICALL void GL_APIENTRY glTexEstimateMotionQCOM (GLuint ref, GLuint
  // target, GLuint output);
  VKFUNDEFINE(glTexEstimateMotionQCOM);
  // GL_APICALL void GL_APIENTRY glTexEstimateMotionRegionsQCOM (GLuint ref,
  // GLuint target, GLuint output, GLuint mask);
  VKFUNDEFINE(glTexEstimateMotionRegionsQCOM);
  // GL_APICALL void GL_APIENTRY glFramebufferFetchBarrierQCOM (void);
  VKFUNDEFINE(glFramebufferFetchBarrierQCOM);
  // GL_APICALL void GL_APIENTRY glShadingRateQCOM (GLenum rate);
  VKFUNDEFINE(glShadingRateQCOM);
  // GL_APICALL void GL_APIENTRY glTextureFoveationParametersQCOM (GLuint
  // texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY,
  // GLfloat gainX, GLfloat gainY, GLfloat foveaArea);
  VKFUNDEFINE(glTextureFoveationParametersQCOM);
  // GL_APICALL void GL_APIENTRY glStartTilingQCOM (GLuint x, GLuint y, GLuint
  // width, GLuint height, GLbitfield preserveMask);
  VKFUNDEFINE(glStartTilingQCOM);
  // GL_APICALL void GL_APIENTRY glEndTilingQCOM (GLbitfield preserveMask);
  VKFUNDEFINE(glEndTilingQCOM);

  bool TRY_LOAD_GL_ES_VERSION_2_0();                               // 0
  bool TRY_LOAD_GL_ES_VERSION_3_0();                               // 1
  bool TRY_LOAD_GL_ES_VERSION_3_1();                               // 2
  bool TRY_LOAD_GL_ES_VERSION_3_2();                               // 3
  bool TRY_LOAD_GL_KHR_blend_equation_advanced();                  // 4
  bool TRY_LOAD_GL_KHR_debug();                                    // 5
  bool TRY_LOAD_GL_KHR_parallel_shader_compile();                  // 6
  bool TRY_LOAD_GL_KHR_robustness();                               // 7
  bool TRY_LOAD_GL_OES_EGL_image();                                // 8
  bool TRY_LOAD_GL_OES_copy_image();                               // 9
  bool TRY_LOAD_GL_OES_draw_buffers_indexed();                     // 10
  bool TRY_LOAD_GL_OES_draw_elements_base_vertex();                // 11
  bool TRY_LOAD_GL_OES_geometry_shader();                          // 12
  bool TRY_LOAD_GL_OES_get_program_binary();                       // 13
  bool TRY_LOAD_GL_OES_mapbuffer();                                // 14
  bool TRY_LOAD_GL_OES_primitive_bounding_box();                   // 15
  bool TRY_LOAD_GL_OES_sample_shading();                           // 16
  bool TRY_LOAD_GL_OES_tessellation_shader();                      // 17
  bool TRY_LOAD_GL_OES_texture_3D();                               // 18
  bool TRY_LOAD_GL_OES_texture_border_clamp();                     // 19
  bool TRY_LOAD_GL_OES_texture_buffer();                           // 20
  bool TRY_LOAD_GL_OES_texture_storage_multisample_2d_array();     // 21
  bool TRY_LOAD_GL_OES_texture_view();                             // 22
  bool TRY_LOAD_GL_OES_vertex_array_object();                      // 23
  bool TRY_LOAD_GL_OES_viewport_array();                           // 24
  bool TRY_LOAD_GL_AMD_framebuffer_multisample_advanced();         // 25
  bool TRY_LOAD_GL_AMD_performance_monitor();                      // 26
  bool TRY_LOAD_GL_ANGLE_framebuffer_blit();                       // 27
  bool TRY_LOAD_GL_ANGLE_framebuffer_multisample();                // 28
  bool TRY_LOAD_GL_ANGLE_instanced_arrays();                       // 29
  bool TRY_LOAD_GL_ANGLE_translated_shader_source();               // 30
  bool TRY_LOAD_GL_APPLE_copy_texture_levels();                    // 31
  bool TRY_LOAD_GL_APPLE_framebuffer_multisample();                // 32
  bool TRY_LOAD_GL_APPLE_sync();                                   // 33
  bool TRY_LOAD_GL_ARM_shader_core_properties();                   // 34
  bool TRY_LOAD_GL_EXT_EGL_image_storage();                        // 35
  bool TRY_LOAD_GL_EXT_base_instance();                            // 36
  bool TRY_LOAD_GL_EXT_blend_func_extended();                      // 37
  bool TRY_LOAD_GL_EXT_buffer_storage();                           // 38
  bool TRY_LOAD_GL_EXT_clear_texture();                            // 39
  bool TRY_LOAD_GL_EXT_clip_control();                             // 40
  bool TRY_LOAD_GL_EXT_copy_image();                               // 41
  bool TRY_LOAD_GL_EXT_debug_label();                              // 42
  bool TRY_LOAD_GL_EXT_debug_marker();                             // 43
  bool TRY_LOAD_GL_EXT_discard_framebuffer();                      // 44
  bool TRY_LOAD_GL_EXT_disjoint_timer_query();                     // 45
  bool TRY_LOAD_GL_EXT_draw_buffers();                             // 46
  bool TRY_LOAD_GL_EXT_draw_buffers_indexed();                     // 47
  bool TRY_LOAD_GL_EXT_draw_elements_base_vertex();                // 48
  bool TRY_LOAD_GL_EXT_draw_instanced();                           // 49
  bool TRY_LOAD_GL_EXT_draw_transform_feedback();                  // 50
  bool TRY_LOAD_GL_EXT_external_buffer();                          // 51
  bool TRY_LOAD_GL_EXT_fragment_shading_rate();                    // 52
  bool TRY_LOAD_GL_EXT_framebuffer_blit_layers();                  // 53
  bool TRY_LOAD_GL_EXT_geometry_shader();                          // 54
  bool TRY_LOAD_GL_EXT_instanced_arrays();                         // 55
  bool TRY_LOAD_GL_EXT_map_buffer_range();                         // 56
  bool TRY_LOAD_GL_EXT_memory_object();                            // 57
  bool TRY_LOAD_GL_EXT_memory_object_fd();                         // 58
  bool TRY_LOAD_GL_EXT_memory_object_win32();                      // 59
  bool TRY_LOAD_GL_EXT_multi_draw_arrays();                        // 60
  bool TRY_LOAD_GL_EXT_multi_draw_indirect();                      // 61
  bool TRY_LOAD_GL_EXT_multisampled_render_to_texture();           // 62
  bool TRY_LOAD_GL_EXT_multiview_draw_buffers();                   // 63
  bool TRY_LOAD_GL_EXT_polygon_offset_clamp();                     // 64
  bool TRY_LOAD_GL_EXT_primitive_bounding_box();                   // 65
  bool TRY_LOAD_GL_EXT_raster_multisample();                       // 66
  bool TRY_LOAD_GL_EXT_robustness();                               // 67
  bool TRY_LOAD_GL_EXT_semaphore();                                // 68
  bool TRY_LOAD_GL_EXT_semaphore_fd();                             // 69
  bool TRY_LOAD_GL_EXT_semaphore_win32();                          // 70
  bool TRY_LOAD_GL_EXT_separate_shader_objects();                  // 71
  bool TRY_LOAD_GL_EXT_shader_framebuffer_fetch_non_coherent();    // 72
  bool TRY_LOAD_GL_EXT_shader_pixel_local_storage2();              // 73
  bool TRY_LOAD_GL_EXT_sparse_texture();                           // 74
  bool TRY_LOAD_GL_EXT_tessellation_shader();                      // 75
  bool TRY_LOAD_GL_EXT_texture_border_clamp();                     // 76
  bool TRY_LOAD_GL_EXT_texture_buffer();                           // 77
  bool TRY_LOAD_GL_EXT_texture_storage();                          // 78
  bool TRY_LOAD_GL_EXT_texture_storage_compression();              // 79
  bool TRY_LOAD_GL_EXT_texture_view();                             // 80
  bool TRY_LOAD_GL_EXT_win32_keyed_mutex();                        // 81
  bool TRY_LOAD_GL_EXT_window_rectangles();                        // 82
  bool TRY_LOAD_GL_IMG_bindless_texture();                         // 83
  bool TRY_LOAD_GL_IMG_framebuffer_downsample();                   // 84
  bool TRY_LOAD_GL_IMG_multisampled_render_to_texture();           // 85
  bool TRY_LOAD_GL_INTEL_framebuffer_CMAA();                       // 86
  bool TRY_LOAD_GL_INTEL_performance_query();                      // 87
  bool TRY_LOAD_GL_MESA_framebuffer_flip_y();                      // 88
  bool TRY_LOAD_GL_MESA_sampler_objects();                         // 89
  bool TRY_LOAD_GL_NV_bindless_texture();                          // 90
  bool TRY_LOAD_GL_NV_blend_equation_advanced();                   // 91
  bool TRY_LOAD_GL_NV_clip_space_w_scaling();                      // 92
  bool TRY_LOAD_GL_NV_conditional_render();                        // 93
  bool TRY_LOAD_GL_NV_conservative_raster();                       // 94
  bool TRY_LOAD_GL_NV_conservative_raster_pre_snap_triangles();    // 95
  bool TRY_LOAD_GL_NV_copy_buffer();                               // 96
  bool TRY_LOAD_GL_NV_coverage_sample();                           // 97
  bool TRY_LOAD_GL_NV_draw_buffers();                              // 98
  bool TRY_LOAD_GL_NV_draw_instanced();                            // 99
  bool TRY_LOAD_GL_NV_draw_vulkan_image();                         // 100
  bool TRY_LOAD_GL_NV_fence();                                     // 101
  bool TRY_LOAD_GL_NV_fragment_coverage_to_color();                // 102
  bool TRY_LOAD_GL_NV_framebuffer_blit();                          // 103
  bool TRY_LOAD_GL_NV_framebuffer_mixed_samples();                 // 104
  bool TRY_LOAD_GL_NV_framebuffer_multisample();                   // 105
  bool TRY_LOAD_GL_NV_gpu_shader5();                               // 106
  bool TRY_LOAD_GL_NV_instanced_arrays();                          // 107
  bool TRY_LOAD_GL_NV_internalformat_sample_query();               // 108
  bool TRY_LOAD_GL_NV_memory_attachment();                         // 109
  bool TRY_LOAD_GL_NV_memory_object_sparse();                      // 110
  bool TRY_LOAD_GL_NV_mesh_shader();                               // 111
  bool TRY_LOAD_GL_NV_non_square_matrices();                       // 112
  bool TRY_LOAD_GL_NV_path_rendering();                            // 113
  bool TRY_LOAD_GL_NV_polygon_mode();                              // 114
  bool TRY_LOAD_GL_NV_read_buffer();                               // 115
  bool TRY_LOAD_GL_NV_sample_locations();                          // 116
  bool TRY_LOAD_GL_NV_scissor_exclusive();                         // 117
  bool TRY_LOAD_GL_NV_shading_rate_image();                        // 118
  bool TRY_LOAD_GL_NV_timeline_semaphore();                        // 119
  bool TRY_LOAD_GL_NV_viewport_array();                            // 120
  bool TRY_LOAD_GL_NV_viewport_swizzle();                          // 121
  bool TRY_LOAD_GL_OVR_multiview();                                // 122
  bool TRY_LOAD_GL_OVR_multiview_multisampled_render_to_texture(); // 123
  bool TRY_LOAD_GL_QCOM_alpha_test();                              // 124
  bool TRY_LOAD_GL_QCOM_driver_control();                          // 125
  bool TRY_LOAD_GL_QCOM_extended_get();                            // 126
  bool TRY_LOAD_GL_QCOM_extended_get2();                           // 127
  bool TRY_LOAD_GL_QCOM_frame_extrapolation();                     // 128
  bool TRY_LOAD_GL_QCOM_framebuffer_foveated();                    // 129
  bool TRY_LOAD_GL_QCOM_motion_estimation();                       // 130
  bool TRY_LOAD_GL_QCOM_shader_framebuffer_fetch_noncoherent();    // 131
  bool TRY_LOAD_GL_QCOM_shading_rate();                            // 132
  bool TRY_LOAD_GL_QCOM_texture_foveated();                        // 133
  bool TRY_LOAD_GL_QCOM_tiled_rendering();                         // 134

  typedef bool (GLES2LoaderLoader::*EXTLOADER)();
  using MAP = ExtendsMap<std::string, EXTLOADER, size_t>;
  static std::vector<EXTLOADER> TRAN2FUN(const std::vector<std::string> &list);
  static std::vector<size_t> TRAN(const std::vector<std::string> &list);

  bool MappingToNeedLoad(const std::vector<size_t> &list);
  static std::vector<EXTLOADER>
  TRAN2FUN(const std::vector<std::string> &&list) {
    return TRAN2FUN(list);
  }
  static std::vector<size_t> TRAN(std::vector<std::string> &&list) {
    return TRAN(list);
  }
  inline bool MappingToNeedLoad(const std::vector<std::string> &list) {
    auto encd = TRAN(list);
    return MappingToNeedLoad(encd);
  }
  inline bool MappingToNeedLoad(std::vector<std::string> &&list) {
    return MappingToNeedLoad(list);
  }

  Flags LoadAll();
};
extern LIBHANNLE GetGLES2LoaderLibHandle();
class GLES2LoaderPHILoader : public GLES2LoaderLoader {
public:
  LIBHANNLE libHandle;
  GLES2LoaderPHILoader();
  bool init();
  static APIProc phiLoadFunc(void *userptr, std::string_view name);
};

#undef VKFUNDEFINE